
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002200  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00800060  00002200  00002294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800232  00800232  00002466  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002466  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002498  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  000024d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000050b0  00000000  00000000  000028f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000014d3  00000000  00000000  000079a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000285f  00000000  00000000  00008e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000860  00000000  00000000  0000b6d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000da7  00000000  00000000  0000bf38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d9e  00000000  00000000  0000ccdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000fa7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	b0 04       	cpc	r11, r0
      56:	91 05       	cpc	r25, r1
      58:	47 06       	cpc	r4, r23
      5a:	d3 05       	cpc	r29, r3
      5c:	0b 06       	cpc	r0, r27
      5e:	35 06       	cpc	r3, r21
      60:	a4 04       	cpc	r10, r4
      62:	a4 04       	cpc	r10, r4
      64:	a4 04       	cpc	r10, r4
      66:	a4 04       	cpc	r10, r4
      68:	a4 04       	cpc	r10, r4
      6a:	a4 04       	cpc	r10, r4
      6c:	a4 04       	cpc	r10, r4
      6e:	a4 04       	cpc	r10, r4
      70:	a4 04       	cpc	r10, r4
      72:	a4 04       	cpc	r10, r4
      74:	a4 04       	cpc	r10, r4
      76:	a4 04       	cpc	r10, r4
      78:	a4 04       	cpc	r10, r4
      7a:	a4 04       	cpc	r10, r4
      7c:	a4 04       	cpc	r10, r4
      7e:	a4 04       	cpc	r10, r4
      80:	a4 04       	cpc	r10, r4
      82:	a4 04       	cpc	r10, r4
      84:	a4 04       	cpc	r10, r4
      86:	a4 04       	cpc	r10, r4
      88:	a4 04       	cpc	r10, r4
      8a:	a4 04       	cpc	r10, r4
      8c:	a4 04       	cpc	r10, r4
      8e:	a4 04       	cpc	r10, r4
      90:	a4 04       	cpc	r10, r4
      92:	a4 04       	cpc	r10, r4
      94:	a4 04       	cpc	r10, r4
      96:	a4 04       	cpc	r10, r4
      98:	a4 04       	cpc	r10, r4
      9a:	a4 04       	cpc	r10, r4
      9c:	a4 04       	cpc	r10, r4
      9e:	a4 04       	cpc	r10, r4
      a0:	a4 04       	cpc	r10, r4
      a2:	a4 04       	cpc	r10, r4
      a4:	a4 04       	cpc	r10, r4
      a6:	a4 04       	cpc	r10, r4
      a8:	a4 04       	cpc	r10, r4
      aa:	a4 04       	cpc	r10, r4
      ac:	a4 04       	cpc	r10, r4
      ae:	a4 04       	cpc	r10, r4
      b0:	a4 04       	cpc	r10, r4
      b2:	a4 04       	cpc	r10, r4
      b4:	b6 04       	cpc	r11, r6
      b6:	d7 04       	cpc	r13, r7
      b8:	2f 05       	cpc	r18, r15

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf e5       	ldi	r28, 0x5F	; 95
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	12 e0       	ldi	r17, 0x02	; 2
      c8:	a0 e6       	ldi	r26, 0x60	; 96
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	e0 e0       	ldi	r30, 0x00	; 0
      ce:	f2 e2       	ldi	r31, 0x22	; 34
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a2 33       	cpi	r26, 0x32	; 50
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	a2 e3       	ldi	r26, 0x32	; 50
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a3 33       	cpi	r26, 0x33	; 51
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 74 04 	call	0x8e8	; 0x8e8 <main>
      f0:	0c 94 fe 10 	jmp	0x21fc	; 0x21fc <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <AddUser>:
	H_Eeprom_Write('2',0,102);
	H_Eeprom_Write('3',0,103);	
	H_Eeprom_Write('1',0,104);	
	H_Eeprom_Write('2',0,105);	
	H_Eeprom_Write('3',0,106);	
	H_Eeprom_Write('4',0,107);		
      f8:	af 92       	push	r10
      fa:	bf 92       	push	r11
      fc:	cf 92       	push	r12
      fe:	df 92       	push	r13
     100:	ef 92       	push	r14
     102:	ff 92       	push	r15
     104:	0f 93       	push	r16
     106:	1f 93       	push	r17
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	8c 01       	movw	r16, r24
     10e:	7b 01       	movw	r14, r22
     110:	64 e6       	ldi	r22, 0x64	; 100
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     118:	b8 2e       	mov	r11, r24
     11a:	29 e0       	ldi	r18, 0x09	; 9
     11c:	28 17       	cp	r18, r24
     11e:	08 f4       	brcc	.+2      	; 0x122 <AddUser+0x2a>
     120:	c8 c0       	rjmp	.+400    	; 0x2b2 <AddUser+0x1ba>
     122:	81 11       	cpse	r24, r1
     124:	2f c0       	rjmp	.+94     	; 0x184 <AddUser+0x8c>
     126:	6c c0       	rjmp	.+216    	; 0x200 <AddUser+0x108>
     128:	dd 2d       	mov	r29, r13
     12a:	dd 0f       	add	r29, r29
     12c:	dd 0f       	add	r29, r29
     12e:	dd 0f       	add	r29, r29
     130:	dd 19       	sub	r29, r13
     132:	0f 2e       	mov	r0, r31
     134:	f3 e0       	ldi	r31, 0x03	; 3
     136:	cf 2e       	mov	r12, r31
     138:	f0 2d       	mov	r31, r0
     13a:	c0 e0       	ldi	r28, 0x00	; 0
     13c:	0d c0       	rjmp	.+26     	; 0x158 <AddUser+0x60>
     13e:	6c 2f       	mov	r22, r28
     140:	6d 0f       	add	r22, r29
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     148:	f8 01       	movw	r30, r16
     14a:	ec 0f       	add	r30, r28
     14c:	f1 1d       	adc	r31, r1
     14e:	90 81       	ld	r25, Z
     150:	89 13       	cpse	r24, r25
     152:	01 c0       	rjmp	.+2      	; 0x156 <AddUser+0x5e>
     154:	ca 94       	dec	r12
     156:	cf 5f       	subi	r28, 0xFF	; 255
     158:	c3 30       	cpi	r28, 0x03	; 3
     15a:	88 f3       	brcs	.-30     	; 0x13e <AddUser+0x46>
     15c:	c1 10       	cpse	r12, r1
     15e:	10 c0       	rjmp	.+32     	; 0x180 <AddUser+0x88>
     160:	a3 94       	inc	r10
     162:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     166:	80 e6       	ldi	r24, 0x60	; 96
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	99 e6       	ldi	r25, 0x69	; 105
     172:	28 e1       	ldi	r18, 0x18	; 24
     174:	81 50       	subi	r24, 0x01	; 1
     176:	90 40       	sbci	r25, 0x00	; 0
     178:	20 40       	sbci	r18, 0x00	; 0
     17a:	e1 f7       	brne	.-8      	; 0x174 <AddUser+0x7c>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <AddUser+0x86>
     17e:	00 00       	nop
     180:	d3 94       	inc	r13
     182:	02 c0       	rjmp	.+4      	; 0x188 <AddUser+0x90>
     184:	a1 2c       	mov	r10, r1
     186:	d1 2c       	mov	r13, r1
     188:	db 14       	cp	r13, r11
     18a:	70 f2       	brcs	.-100    	; 0x128 <AddUser+0x30>
     18c:	a1 10       	cpse	r10, r1
     18e:	a8 c0       	rjmp	.+336    	; 0x2e0 <AddUser+0x1e8>
     190:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     194:	81 e7       	ldi	r24, 0x71	; 113
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     19c:	8f ef       	ldi	r24, 0xFF	; 255
     19e:	99 e6       	ldi	r25, 0x69	; 105
     1a0:	28 e1       	ldi	r18, 0x18	; 24
     1a2:	81 50       	subi	r24, 0x01	; 1
     1a4:	90 40       	sbci	r25, 0x00	; 0
     1a6:	20 40       	sbci	r18, 0x00	; 0
     1a8:	e1 f7       	brne	.-8      	; 0x1a2 <AddUser+0xaa>
     1aa:	00 c0       	rjmp	.+0      	; 0x1ac <AddUser+0xb4>
     1ac:	00 00       	nop
     1ae:	db 2d       	mov	r29, r11
     1b0:	dd 0f       	add	r29, r29
     1b2:	dd 0f       	add	r29, r29
     1b4:	dd 0f       	add	r29, r29
     1b6:	db 19       	sub	r29, r11
     1b8:	c0 e0       	ldi	r28, 0x00	; 0
     1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <AddUser+0xd8>
     1bc:	4c 2f       	mov	r20, r28
     1be:	4d 0f       	add	r20, r29
     1c0:	f8 01       	movw	r30, r16
     1c2:	ec 0f       	add	r30, r28
     1c4:	f1 1d       	adc	r31, r1
     1c6:	60 e0       	ldi	r22, 0x00	; 0
     1c8:	80 81       	ld	r24, Z
     1ca:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     1ce:	cf 5f       	subi	r28, 0xFF	; 255
     1d0:	c3 30       	cpi	r28, 0x03	; 3
     1d2:	a0 f3       	brcs	.-24     	; 0x1bc <AddUser+0xc4>
     1d4:	c0 e0       	ldi	r28, 0x00	; 0
     1d6:	0b c0       	rjmp	.+22     	; 0x1ee <AddUser+0xf6>
     1d8:	4c 2f       	mov	r20, r28
     1da:	4d 0f       	add	r20, r29
     1dc:	4d 5f       	subi	r20, 0xFD	; 253
     1de:	f7 01       	movw	r30, r14
     1e0:	ec 0f       	add	r30, r28
     1e2:	f1 1d       	adc	r31, r1
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     1ec:	cf 5f       	subi	r28, 0xFF	; 255
     1ee:	c4 30       	cpi	r28, 0x04	; 4
     1f0:	98 f3       	brcs	.-26     	; 0x1d8 <AddUser+0xe0>
     1f2:	44 e6       	ldi	r20, 0x64	; 100
     1f4:	60 e0       	ldi	r22, 0x00	; 0
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	8b 0d       	add	r24, r11
     1fa:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     1fe:	70 c0       	rjmp	.+224    	; 0x2e0 <AddUser+0x1e8>
     200:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     204:	81 e7       	ldi	r24, 0x71	; 113
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	99 e6       	ldi	r25, 0x69	; 105
     210:	28 e1       	ldi	r18, 0x18	; 24
     212:	81 50       	subi	r24, 0x01	; 1
     214:	90 40       	sbci	r25, 0x00	; 0
     216:	20 40       	sbci	r18, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <AddUser+0x11a>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <AddUser+0x124>
     21c:	00 00       	nop
     21e:	db 2d       	mov	r29, r11
     220:	dd 0f       	add	r29, r29
     222:	dd 0f       	add	r29, r29
     224:	dd 0f       	add	r29, r29
     226:	db 19       	sub	r29, r11
     228:	c0 e0       	ldi	r28, 0x00	; 0
     22a:	0a c0       	rjmp	.+20     	; 0x240 <AddUser+0x148>
     22c:	4c 2f       	mov	r20, r28
     22e:	4d 0f       	add	r20, r29
     230:	f8 01       	movw	r30, r16
     232:	ec 0f       	add	r30, r28
     234:	f1 1d       	adc	r31, r1
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	80 81       	ld	r24, Z
     23a:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     23e:	cf 5f       	subi	r28, 0xFF	; 255
     240:	c3 30       	cpi	r28, 0x03	; 3
     242:	a0 f3       	brcs	.-24     	; 0x22c <AddUser+0x134>
     244:	c0 e0       	ldi	r28, 0x00	; 0
     246:	0b c0       	rjmp	.+22     	; 0x25e <AddUser+0x166>
     248:	4c 2f       	mov	r20, r28
     24a:	4d 0f       	add	r20, r29
     24c:	4d 5f       	subi	r20, 0xFD	; 253
     24e:	f7 01       	movw	r30, r14
     250:	ec 0f       	add	r30, r28
     252:	f1 1d       	adc	r31, r1
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	80 81       	ld	r24, Z
     258:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     25c:	cf 5f       	subi	r28, 0xFF	; 255
     25e:	c4 30       	cpi	r28, 0x04	; 4
     260:	98 f3       	brcs	.-26     	; 0x248 <AddUser+0x150>
     262:	44 e6       	ldi	r20, 0x64	; 100
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	81 e0       	ldi	r24, 0x01	; 1
     268:	8b 0d       	add	r24, r11
     26a:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     26e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     272:	8d e7       	ldi	r24, 0x7D	; 125
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     282:	88 e8       	ldi	r24, 0x88	; 136
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     28a:	64 e6       	ldi	r22, 0x64	; 100
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     292:	68 2f       	mov	r22, r24
     294:	70 e0       	ldi	r23, 0x00	; 0
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 b2 09 	call	0x1364	; 0x1364 <H_Lcd_WriteNumber>
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	99 e6       	ldi	r25, 0x69	; 105
     2a2:	28 e1       	ldi	r18, 0x18	; 24
     2a4:	81 50       	subi	r24, 0x01	; 1
     2a6:	90 40       	sbci	r25, 0x00	; 0
     2a8:	20 40       	sbci	r18, 0x00	; 0
     2aa:	e1 f7       	brne	.-8      	; 0x2a4 <AddUser+0x1ac>
     2ac:	00 c0       	rjmp	.+0      	; 0x2ae <AddUser+0x1b6>
     2ae:	00 00       	nop
     2b0:	17 c0       	rjmp	.+46     	; 0x2e0 <AddUser+0x1e8>
     2b2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     2b6:	85 e9       	ldi	r24, 0x95	; 149
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     2c6:	81 ea       	ldi	r24, 0xA1	; 161
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	99 e6       	ldi	r25, 0x69	; 105
     2d2:	28 e1       	ldi	r18, 0x18	; 24
     2d4:	81 50       	subi	r24, 0x01	; 1
     2d6:	90 40       	sbci	r25, 0x00	; 0
     2d8:	20 40       	sbci	r18, 0x00	; 0
     2da:	e1 f7       	brne	.-8      	; 0x2d4 <AddUser+0x1dc>
     2dc:	00 c0       	rjmp	.+0      	; 0x2de <AddUser+0x1e6>
     2de:	00 00       	nop
     2e0:	df 91       	pop	r29
     2e2:	cf 91       	pop	r28
     2e4:	1f 91       	pop	r17
     2e6:	0f 91       	pop	r16
     2e8:	ff 90       	pop	r15
     2ea:	ef 90       	pop	r14
     2ec:	df 90       	pop	r13
     2ee:	cf 90       	pop	r12
     2f0:	bf 90       	pop	r11
     2f2:	af 90       	pop	r10
     2f4:	08 95       	ret

000002f6 <DeleteUser>:
     2f6:	cf 92       	push	r12
     2f8:	df 92       	push	r13
     2fa:	ef 92       	push	r14
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	81 11       	cpse	r24, r1
     308:	53 c0       	rjmp	.+166    	; 0x3b0 <DeleteUser+0xba>
     30a:	62 c0       	rjmp	.+196    	; 0x3d0 <DeleteUser+0xda>
     30c:	df 2d       	mov	r29, r15
     30e:	dd 0f       	add	r29, r29
     310:	dd 0f       	add	r29, r29
     312:	dd 0f       	add	r29, r29
     314:	df 19       	sub	r29, r15
     316:	e1 2c       	mov	r14, r1
     318:	c0 e0       	ldi	r28, 0x00	; 0
     31a:	0d c0       	rjmp	.+26     	; 0x336 <DeleteUser+0x40>
     31c:	6c 2f       	mov	r22, r28
     31e:	6d 0f       	add	r22, r29
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     326:	f8 01       	movw	r30, r16
     328:	ec 0f       	add	r30, r28
     32a:	f1 1d       	adc	r31, r1
     32c:	90 81       	ld	r25, Z
     32e:	89 13       	cpse	r24, r25
     330:	01 c0       	rjmp	.+2      	; 0x334 <DeleteUser+0x3e>
     332:	e3 94       	inc	r14
     334:	cf 5f       	subi	r28, 0xFF	; 255
     336:	c3 30       	cpi	r28, 0x03	; 3
     338:	88 f3       	brcs	.-30     	; 0x31c <DeleteUser+0x26>
     33a:	23 e0       	ldi	r18, 0x03	; 3
     33c:	e2 12       	cpse	r14, r18
     33e:	0e c0       	rjmp	.+28     	; 0x35c <DeleteUser+0x66>
     340:	81 eb       	ldi	r24, 0xB1	; 177
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	93 ec       	ldi	r25, 0xC3	; 195
     34c:	29 e0       	ldi	r18, 0x09	; 9
     34e:	81 50       	subi	r24, 0x01	; 1
     350:	90 40       	sbci	r25, 0x00	; 0
     352:	20 40       	sbci	r18, 0x00	; 0
     354:	e1 f7       	brne	.-8      	; 0x34e <DeleteUser+0x58>
     356:	00 c0       	rjmp	.+0      	; 0x358 <DeleteUser+0x62>
     358:	00 00       	nop
     35a:	c3 94       	inc	r12
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	c8 12       	cpse	r12, r24
     360:	25 c0       	rjmp	.+74     	; 0x3ac <DeleteUser+0xb6>
     362:	0d c0       	rjmp	.+26     	; 0x37e <DeleteUser+0x88>
     364:	ec 2e       	mov	r14, r28
     366:	ed 0e       	add	r14, r29
     368:	67 e0       	ldi	r22, 0x07	; 7
     36a:	6e 0d       	add	r22, r14
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     372:	4e 2d       	mov	r20, r14
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     37a:	cf 5f       	subi	r28, 0xFF	; 255
     37c:	01 c0       	rjmp	.+2      	; 0x380 <DeleteUser+0x8a>
     37e:	c0 e0       	ldi	r28, 0x00	; 0
     380:	c3 30       	cpi	r28, 0x03	; 3
     382:	80 f3       	brcs	.-32     	; 0x364 <DeleteUser+0x6e>
     384:	c0 e0       	ldi	r28, 0x00	; 0
     386:	10 c0       	rjmp	.+32     	; 0x3a8 <DeleteUser+0xb2>
     388:	6c 2f       	mov	r22, r28
     38a:	6d 0f       	add	r22, r29
     38c:	0f 2e       	mov	r0, r31
     38e:	f3 e0       	ldi	r31, 0x03	; 3
     390:	ef 2e       	mov	r14, r31
     392:	f0 2d       	mov	r31, r0
     394:	e6 0e       	add	r14, r22
     396:	66 5f       	subi	r22, 0xF6	; 246
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     39e:	4e 2d       	mov	r20, r14
     3a0:	60 e0       	ldi	r22, 0x00	; 0
     3a2:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     3a6:	cf 5f       	subi	r28, 0xFF	; 255
     3a8:	c4 30       	cpi	r28, 0x04	; 4
     3aa:	70 f3       	brcs	.-36     	; 0x388 <DeleteUser+0x92>
     3ac:	f3 94       	inc	r15
     3ae:	04 c0       	rjmp	.+8      	; 0x3b8 <DeleteUser+0xc2>
     3b0:	8b 01       	movw	r16, r22
     3b2:	d8 2e       	mov	r13, r24
     3b4:	c1 2c       	mov	r12, r1
     3b6:	f1 2c       	mov	r15, r1
     3b8:	fd 14       	cp	r15, r13
     3ba:	08 f4       	brcc	.+2      	; 0x3be <DeleteUser+0xc8>
     3bc:	a7 cf       	rjmp	.-178    	; 0x30c <DeleteUser+0x16>
     3be:	91 e0       	ldi	r25, 0x01	; 1
     3c0:	c9 12       	cpse	r12, r25
     3c2:	06 c0       	rjmp	.+12     	; 0x3d0 <DeleteUser+0xda>
     3c4:	44 e6       	ldi	r20, 0x64	; 100
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	8f ef       	ldi	r24, 0xFF	; 255
     3ca:	8d 0d       	add	r24, r13
     3cc:	0e 94 9a 06 	call	0xd34	; 0xd34 <H_Eeprom_Write>
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	1f 91       	pop	r17
     3d6:	0f 91       	pop	r16
     3d8:	ff 90       	pop	r15
     3da:	ef 90       	pop	r14
     3dc:	df 90       	pop	r13
     3de:	cf 90       	pop	r12
     3e0:	08 95       	ret

000003e2 <AdminLogin>:
     3e2:	ef 92       	push	r14
     3e4:	ff 92       	push	r15
     3e6:	0f 93       	push	r16
     3e8:	1f 93       	push	r17
     3ea:	cf 93       	push	r28
     3ec:	df 93       	push	r29
     3ee:	7c 01       	movw	r14, r24
     3f0:	8b 01       	movw	r16, r22
     3f2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     3f6:	c0 e0       	ldi	r28, 0x00	; 0
     3f8:	d0 e0       	ldi	r29, 0x00	; 0
     3fa:	0d c0       	rjmp	.+26     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     3fc:	65 e6       	ldi	r22, 0x65	; 101
     3fe:	6c 0f       	add	r22, r28
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     406:	f7 01       	movw	r30, r14
     408:	ec 0f       	add	r30, r28
     40a:	f1 1d       	adc	r31, r1
     40c:	90 81       	ld	r25, Z
     40e:	89 13       	cpse	r24, r25
     410:	01 c0       	rjmp	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     412:	df 5f       	subi	r29, 0xFF	; 255
     414:	cf 5f       	subi	r28, 0xFF	; 255
     416:	c3 30       	cpi	r28, 0x03	; 3
     418:	88 f3       	brcs	.-30     	; 0x3fc <AdminLogin+0x1a>
     41a:	c0 e0       	ldi	r28, 0x00	; 0
     41c:	f1 2c       	mov	r15, r1
     41e:	0d c0       	rjmp	.+26     	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     420:	68 e6       	ldi	r22, 0x68	; 104
     422:	6c 0f       	add	r22, r28
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     42a:	f8 01       	movw	r30, r16
     42c:	ec 0f       	add	r30, r28
     42e:	f1 1d       	adc	r31, r1
     430:	90 81       	ld	r25, Z
     432:	89 13       	cpse	r24, r25
     434:	01 c0       	rjmp	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	f3 94       	inc	r15
     438:	cf 5f       	subi	r28, 0xFF	; 255
     43a:	c4 30       	cpi	r28, 0x04	; 4
     43c:	88 f3       	brcs	.-30     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
     43e:	d3 30       	cpi	r29, 0x03	; 3
     440:	91 f4       	brne	.+36     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     442:	24 e0       	ldi	r18, 0x04	; 4
     444:	f2 12       	cpse	r15, r18
     446:	0f c0       	rjmp	.+30     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
     448:	80 ec       	ldi	r24, 0xC0	; 192
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     450:	8f ef       	ldi	r24, 0xFF	; 255
     452:	99 e6       	ldi	r25, 0x69	; 105
     454:	28 e1       	ldi	r18, 0x18	; 24
     456:	81 50       	subi	r24, 0x01	; 1
     458:	90 40       	sbci	r25, 0x00	; 0
     45a:	20 40       	sbci	r18, 0x00	; 0
     45c:	e1 f7       	brne	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
     460:	00 00       	nop
     462:	c0 e0       	ldi	r28, 0x00	; 0
     464:	47 c0       	rjmp	.+142    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     466:	84 e0       	ldi	r24, 0x04	; 4
     468:	f8 12       	cpse	r15, r24
     46a:	11 c0       	rjmp	.+34     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     46c:	d3 30       	cpi	r29, 0x03	; 3
     46e:	79 f0       	breq	.+30     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
     470:	80 e6       	ldi	r24, 0x60	; 96
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     478:	9f ef       	ldi	r25, 0xFF	; 255
     47a:	29 e6       	ldi	r18, 0x69	; 105
     47c:	88 e1       	ldi	r24, 0x18	; 24
     47e:	91 50       	subi	r25, 0x01	; 1
     480:	20 40       	sbci	r18, 0x00	; 0
     482:	80 40       	sbci	r24, 0x00	; 0
     484:	e1 f7       	brne	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
     486:	00 c0       	rjmp	.+0      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
     488:	00 00       	nop
     48a:	c1 e0       	ldi	r28, 0x01	; 1
     48c:	33 c0       	rjmp	.+102    	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     48e:	d3 30       	cpi	r29, 0x03	; 3
     490:	91 f4       	brne	.+36     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     492:	94 e0       	ldi	r25, 0x04	; 4
     494:	f9 16       	cp	r15, r25
     496:	79 f0       	breq	.+30     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     498:	81 ed       	ldi	r24, 0xD1	; 209
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     4a0:	2f ef       	ldi	r18, 0xFF	; 255
     4a2:	89 e6       	ldi	r24, 0x69	; 105
     4a4:	98 e1       	ldi	r25, 0x18	; 24
     4a6:	21 50       	subi	r18, 0x01	; 1
     4a8:	80 40       	sbci	r24, 0x00	; 0
     4aa:	90 40       	sbci	r25, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
     4b0:	00 00       	nop
     4b2:	c1 e0       	ldi	r28, 0x01	; 1
     4b4:	1f c0       	rjmp	.+62     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4b6:	d3 30       	cpi	r29, 0x03	; 3
     4b8:	d1 f0       	breq	.+52     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
     4ba:	24 e0       	ldi	r18, 0x04	; 4
     4bc:	f2 16       	cp	r15, r18
     4be:	c9 f0       	breq	.+50     	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4c0:	80 e6       	ldi	r24, 0x60	; 96
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	81 e0       	ldi	r24, 0x01	; 1
     4cc:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     4d0:	81 ed       	ldi	r24, 0xD1	; 209
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     4d8:	8f ef       	ldi	r24, 0xFF	; 255
     4da:	99 e6       	ldi	r25, 0x69	; 105
     4dc:	28 e1       	ldi	r18, 0x18	; 24
     4de:	81 50       	subi	r24, 0x01	; 1
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	20 40       	sbci	r18, 0x00	; 0
     4e4:	e1 f7       	brne	.-8      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
     4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4e8:	00 00       	nop
     4ea:	c1 e0       	ldi	r28, 0x01	; 1
     4ec:	03 c0       	rjmp	.+6      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4ee:	c0 e0       	ldi	r28, 0x00	; 0
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	95 ea       	ldi	r25, 0xA5	; 165
     4f8:	2e e0       	ldi	r18, 0x0E	; 14
     4fa:	81 50       	subi	r24, 0x01	; 1
     4fc:	90 40       	sbci	r25, 0x00	; 0
     4fe:	20 40       	sbci	r18, 0x00	; 0
     500:	e1 f7       	brne	.-8      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
     502:	00 c0       	rjmp	.+0      	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
     504:	00 00       	nop
     506:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     50a:	8f ef       	ldi	r24, 0xFF	; 255
     50c:	95 ea       	ldi	r25, 0xA5	; 165
     50e:	2e e0       	ldi	r18, 0x0E	; 14
     510:	81 50       	subi	r24, 0x01	; 1
     512:	90 40       	sbci	r25, 0x00	; 0
     514:	20 40       	sbci	r18, 0x00	; 0
     516:	e1 f7       	brne	.-8      	; 0x510 <__EEPROM_REGION_LENGTH__+0x110>
     518:	00 c0       	rjmp	.+0      	; 0x51a <__EEPROM_REGION_LENGTH__+0x11a>
     51a:	00 00       	nop
     51c:	8c 2f       	mov	r24, r28
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	1f 91       	pop	r17
     524:	0f 91       	pop	r16
     526:	ff 90       	pop	r15
     528:	ef 90       	pop	r14
     52a:	08 95       	ret

0000052c <UserLogin>:
     52c:	af 92       	push	r10
     52e:	bf 92       	push	r11
     530:	cf 92       	push	r12
     532:	df 92       	push	r13
     534:	ef 92       	push	r14
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	cf 93       	push	r28
     53e:	df 93       	push	r29
     540:	7c 01       	movw	r14, r24
     542:	8b 01       	movw	r16, r22
     544:	64 e6       	ldi	r22, 0x64	; 100
     546:	80 e0       	ldi	r24, 0x00	; 0
     548:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     54c:	b8 2e       	mov	r11, r24
     54e:	81 11       	cpse	r24, r1
     550:	33 c0       	rjmp	.+102    	; 0x5b8 <UserLogin+0x8c>
     552:	5c c0       	rjmp	.+184    	; 0x60c <UserLogin+0xe0>
     554:	dd 2d       	mov	r29, r13
     556:	dd 0f       	add	r29, r29
     558:	dd 0f       	add	r29, r29
     55a:	dd 0f       	add	r29, r29
     55c:	dd 19       	sub	r29, r13
     55e:	c0 e0       	ldi	r28, 0x00	; 0
     560:	c1 2c       	mov	r12, r1
     562:	0d c0       	rjmp	.+26     	; 0x57e <UserLogin+0x52>
     564:	6c 2f       	mov	r22, r28
     566:	6d 0f       	add	r22, r29
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     56e:	f7 01       	movw	r30, r14
     570:	ec 0f       	add	r30, r28
     572:	f1 1d       	adc	r31, r1
     574:	90 81       	ld	r25, Z
     576:	89 13       	cpse	r24, r25
     578:	01 c0       	rjmp	.+2      	; 0x57c <UserLogin+0x50>
     57a:	c3 94       	inc	r12
     57c:	cf 5f       	subi	r28, 0xFF	; 255
     57e:	c3 30       	cpi	r28, 0x03	; 3
     580:	88 f3       	brcs	.-30     	; 0x564 <UserLogin+0x38>
     582:	c0 e0       	ldi	r28, 0x00	; 0
     584:	a1 2c       	mov	r10, r1
     586:	0e c0       	rjmp	.+28     	; 0x5a4 <UserLogin+0x78>
     588:	6c 2f       	mov	r22, r28
     58a:	6d 0f       	add	r22, r29
     58c:	6d 5f       	subi	r22, 0xFD	; 253
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     594:	f8 01       	movw	r30, r16
     596:	ec 0f       	add	r30, r28
     598:	f1 1d       	adc	r31, r1
     59a:	90 81       	ld	r25, Z
     59c:	89 13       	cpse	r24, r25
     59e:	01 c0       	rjmp	.+2      	; 0x5a2 <UserLogin+0x76>
     5a0:	a3 94       	inc	r10
     5a2:	cf 5f       	subi	r28, 0xFF	; 255
     5a4:	c4 30       	cpi	r28, 0x04	; 4
     5a6:	80 f3       	brcs	.-32     	; 0x588 <UserLogin+0x5c>
     5a8:	23 e0       	ldi	r18, 0x03	; 3
     5aa:	c2 12       	cpse	r12, r18
     5ac:	03 c0       	rjmp	.+6      	; 0x5b4 <UserLogin+0x88>
     5ae:	84 e0       	ldi	r24, 0x04	; 4
     5b0:	a8 16       	cp	r10, r24
     5b2:	39 f0       	breq	.+14     	; 0x5c2 <UserLogin+0x96>
     5b4:	d3 94       	inc	r13
     5b6:	01 c0       	rjmp	.+2      	; 0x5ba <UserLogin+0x8e>
     5b8:	d1 2c       	mov	r13, r1
     5ba:	db 14       	cp	r13, r11
     5bc:	58 f2       	brcs	.-106    	; 0x554 <UserLogin+0x28>
     5be:	a1 2c       	mov	r10, r1
     5c0:	c1 2c       	mov	r12, r1
     5c2:	93 e0       	ldi	r25, 0x03	; 3
     5c4:	c9 12       	cpse	r12, r25
     5c6:	09 c0       	rjmp	.+18     	; 0x5da <UserLogin+0xae>
     5c8:	24 e0       	ldi	r18, 0x04	; 4
     5ca:	a2 12       	cpse	r10, r18
     5cc:	06 c0       	rjmp	.+12     	; 0x5da <UserLogin+0xae>
     5ce:	80 ec       	ldi	r24, 0xC0	; 192
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     5d6:	80 e0       	ldi	r24, 0x00	; 0
     5d8:	31 c0       	rjmp	.+98     	; 0x63c <UserLogin+0x110>
     5da:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     5de:	80 e6       	ldi	r24, 0x60	; 96
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     5ee:	82 ee       	ldi	r24, 0xE2	; 226
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	93 ed       	ldi	r25, 0xD3	; 211
     5fa:	20 e3       	ldi	r18, 0x30	; 48
     5fc:	81 50       	subi	r24, 0x01	; 1
     5fe:	90 40       	sbci	r25, 0x00	; 0
     600:	20 40       	sbci	r18, 0x00	; 0
     602:	e1 f7       	brne	.-8      	; 0x5fc <UserLogin+0xd0>
     604:	00 c0       	rjmp	.+0      	; 0x606 <UserLogin+0xda>
     606:	00 00       	nop
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	18 c0       	rjmp	.+48     	; 0x63c <UserLogin+0x110>
     60c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     610:	8e ee       	ldi	r24, 0xEE	; 238
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     628:	8f ef       	ldi	r24, 0xFF	; 255
     62a:	93 ed       	ldi	r25, 0xD3	; 211
     62c:	20 e3       	ldi	r18, 0x30	; 48
     62e:	81 50       	subi	r24, 0x01	; 1
     630:	90 40       	sbci	r25, 0x00	; 0
     632:	20 40       	sbci	r18, 0x00	; 0
     634:	e1 f7       	brne	.-8      	; 0x62e <UserLogin+0x102>
     636:	00 c0       	rjmp	.+0      	; 0x638 <UserLogin+0x10c>
     638:	00 00       	nop
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	0f 91       	pop	r16
     644:	ff 90       	pop	r15
     646:	ef 90       	pop	r14
     648:	df 90       	pop	r13
     64a:	cf 90       	pop	r12
     64c:	bf 90       	pop	r11
     64e:	af 90       	pop	r10
     650:	08 95       	ret

00000652 <InputID>:
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	8c 01       	movw	r16, r24
     65a:	60 e0       	ldi	r22, 0x00	; 0
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	0b c0       	rjmp	.+22     	; 0x67c <InputID+0x2a>
     666:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     66a:	88 23       	and	r24, r24
     66c:	39 f0       	breq	.+14     	; 0x67c <InputID+0x2a>
     66e:	f8 01       	movw	r30, r16
     670:	ec 0f       	add	r30, r28
     672:	f1 1d       	adc	r31, r1
     674:	80 83       	st	Z, r24
     676:	0e 94 08 09 	call	0x1210	; 0x1210 <H_Lcd_WriteCharacter>
     67a:	cf 5f       	subi	r28, 0xFF	; 255
     67c:	c3 30       	cpi	r28, 0x03	; 3
     67e:	98 f3       	brcs	.-26     	; 0x666 <InputID+0x14>
     680:	2f ef       	ldi	r18, 0xFF	; 255
     682:	85 ea       	ldi	r24, 0xA5	; 165
     684:	9e e0       	ldi	r25, 0x0E	; 14
     686:	21 50       	subi	r18, 0x01	; 1
     688:	80 40       	sbci	r24, 0x00	; 0
     68a:	90 40       	sbci	r25, 0x00	; 0
     68c:	e1 f7       	brne	.-8      	; 0x686 <InputID+0x34>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <InputID+0x3e>
     690:	00 00       	nop
     692:	cf 91       	pop	r28
     694:	1f 91       	pop	r17
     696:	0f 91       	pop	r16
     698:	08 95       	ret

0000069a <InputPassword>:
     69a:	0f 93       	push	r16
     69c:	1f 93       	push	r17
     69e:	cf 93       	push	r28
     6a0:	8c 01       	movw	r16, r24
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     6aa:	c0 e0       	ldi	r28, 0x00	; 0
     6ac:	0c c0       	rjmp	.+24     	; 0x6c6 <InputPassword+0x2c>
     6ae:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     6b2:	88 23       	and	r24, r24
     6b4:	41 f0       	breq	.+16     	; 0x6c6 <InputPassword+0x2c>
     6b6:	f8 01       	movw	r30, r16
     6b8:	ec 0f       	add	r30, r28
     6ba:	f1 1d       	adc	r31, r1
     6bc:	80 83       	st	Z, r24
     6be:	8a e2       	ldi	r24, 0x2A	; 42
     6c0:	0e 94 08 09 	call	0x1210	; 0x1210 <H_Lcd_WriteCharacter>
     6c4:	cf 5f       	subi	r28, 0xFF	; 255
     6c6:	c4 30       	cpi	r28, 0x04	; 4
     6c8:	90 f3       	brcs	.-28     	; 0x6ae <InputPassword+0x14>
     6ca:	2f ef       	ldi	r18, 0xFF	; 255
     6cc:	85 ea       	ldi	r24, 0xA5	; 165
     6ce:	9e e0       	ldi	r25, 0x0E	; 14
     6d0:	21 50       	subi	r18, 0x01	; 1
     6d2:	80 40       	sbci	r24, 0x00	; 0
     6d4:	90 40       	sbci	r25, 0x00	; 0
     6d6:	e1 f7       	brne	.-8      	; 0x6d0 <InputPassword+0x36>
     6d8:	00 c0       	rjmp	.+0      	; 0x6da <InputPassword+0x40>
     6da:	00 00       	nop
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	08 95       	ret

000006e4 <SwitchDoor>:
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	88 81       	ld	r24, Y
     6ec:	81 11       	cpse	r24, r1
     6ee:	1e c0       	rjmp	.+60     	; 0x72c <SwitchDoor+0x48>
     6f0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     6f4:	60 e0       	ldi	r22, 0x00	; 0
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     6fc:	8a e0       	ldi	r24, 0x0A	; 10
     6fe:	91 e0       	ldi	r25, 0x01	; 1
     700:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     704:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <H_Relay_On>
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	80 ef       	ldi	r24, 0xF0	; 240
     70e:	92 e4       	ldi	r25, 0x42	; 66
     710:	0e 94 0a 0b 	call	0x1614	; 0x1614 <H_Servo_SetAngel>
     714:	2f ef       	ldi	r18, 0xFF	; 255
     716:	89 e6       	ldi	r24, 0x69	; 105
     718:	98 e1       	ldi	r25, 0x18	; 24
     71a:	21 50       	subi	r18, 0x01	; 1
     71c:	80 40       	sbci	r24, 0x00	; 0
     71e:	90 40       	sbci	r25, 0x00	; 0
     720:	e1 f7       	brne	.-8      	; 0x71a <SwitchDoor+0x36>
     722:	00 c0       	rjmp	.+0      	; 0x724 <SwitchDoor+0x40>
     724:	00 00       	nop
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	88 83       	st	Y, r24
     72a:	1b c0       	rjmp	.+54     	; 0x762 <SwitchDoor+0x7e>
     72c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
     738:	89 e1       	ldi	r24, 0x19	; 25
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     740:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <H_Relay_Off>
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	cb 01       	movw	r24, r22
     74a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <H_Servo_SetAngel>
     74e:	2f ef       	ldi	r18, 0xFF	; 255
     750:	89 e6       	ldi	r24, 0x69	; 105
     752:	98 e1       	ldi	r25, 0x18	; 24
     754:	21 50       	subi	r18, 0x01	; 1
     756:	80 40       	sbci	r24, 0x00	; 0
     758:	90 40       	sbci	r25, 0x00	; 0
     75a:	e1 f7       	brne	.-8      	; 0x754 <SwitchDoor+0x70>
     75c:	00 c0       	rjmp	.+0      	; 0x75e <SwitchDoor+0x7a>
     75e:	00 00       	nop
     760:	18 82       	st	Y, r1
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	08 95       	ret

00000768 <ACSwitch>:
     768:	cf 93       	push	r28
     76a:	df 93       	push	r29
     76c:	ec 01       	movw	r28, r24
     76e:	81 e2       	ldi	r24, 0x21	; 33
     770:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Led_On>
     774:	88 81       	ld	r24, Y
     776:	81 11       	cpse	r24, r1
     778:	20 c0       	rjmp	.+64     	; 0x7ba <ACSwitch+0x52>
     77a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <H_Lm35_Read>
     77e:	8b 31       	cpi	r24, 0x1B	; 27
     780:	78 f0       	brcs	.+30     	; 0x7a0 <ACSwitch+0x38>
     782:	80 e2       	ldi	r24, 0x20	; 32
     784:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Led_On>
     788:	81 e2       	ldi	r24, 0x21	; 33
     78a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	0e 94 85 06 	call	0xd0a	; 0xd0a <H_DcMotor_SetDirection>
     794:	84 e6       	ldi	r24, 0x64	; 100
     796:	0e 94 8e 06 	call	0xd1c	; 0xd1c <H_DcMotor_Speed>
     79a:	0e 94 91 06 	call	0xd22	; 0xd22 <H_DcMotor_Start>
     79e:	0a c0       	rjmp	.+20     	; 0x7b4 <ACSwitch+0x4c>
     7a0:	85 31       	cpi	r24, 0x15	; 21
     7a2:	40 f4       	brcc	.+16     	; 0x7b4 <ACSwitch+0x4c>
     7a4:	81 e2       	ldi	r24, 0x21	; 33
     7a6:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Led_On>
     7aa:	80 e2       	ldi	r24, 0x20	; 32
     7ac:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
     7b0:	0e 94 94 06 	call	0xd28	; 0xd28 <H_DcMotor_Stop>
     7b4:	81 e0       	ldi	r24, 0x01	; 1
     7b6:	88 83       	st	Y, r24
     7b8:	09 c0       	rjmp	.+18     	; 0x7cc <ACSwitch+0x64>
     7ba:	0e 94 94 06 	call	0xd28	; 0xd28 <H_DcMotor_Stop>
     7be:	81 e2       	ldi	r24, 0x21	; 33
     7c0:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
     7c4:	80 e2       	ldi	r24, 0x20	; 32
     7c6:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
     7ca:	18 82       	st	Y, r1
     7cc:	df 91       	pop	r29
     7ce:	cf 91       	pop	r28
     7d0:	08 95       	ret

000007d2 <WelcomingMsg>:
}

void WelcomingMsg(void)
{
	H_Lcd_Clear();
     7d2:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
	H_Lcd_WriteString("Welcome to Smart");
     7d6:	88 e2       	ldi	r24, 0x28	; 40
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     7de:	60 e0       	ldi	r22, 0x00	; 0
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
	H_Lcd_WriteString("Home Project");
     7e6:	89 e3       	ldi	r24, 0x39	; 57
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ee:	2f ef       	ldi	r18, 0xFF	; 255
     7f0:	87 ea       	ldi	r24, 0xA7	; 167
     7f2:	91 e6       	ldi	r25, 0x61	; 97
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	80 40       	sbci	r24, 0x00	; 0
     7f8:	90 40       	sbci	r25, 0x00	; 0
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <WelcomingMsg+0x22>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <WelcomingMsg+0x2c>
     7fe:	00 00       	nop
	_delay_ms(2000);
	H_Lcd_Clear();
     800:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
     804:	08 95       	ret

00000806 <CloseTheDoor>:
}

void CloseTheDoor(void)
{
	H_Servo_SetAngel(0);
     806:	60 e0       	ldi	r22, 0x00	; 0
     808:	70 e0       	ldi	r23, 0x00	; 0
     80a:	cb 01       	movw	r24, r22
     80c:	0e 94 0a 0b 	call	0x1614	; 0x1614 <H_Servo_SetAngel>
	H_Relay_Off();
     810:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <H_Relay_Off>
     814:	08 95       	ret

00000816 <CheckAC>:
	
}
*/
void CheckAC(u8 ACState)
{
	if (ACState == 1)
     816:	81 30       	cpi	r24, 0x01	; 1
     818:	21 f5       	brne	.+72     	; 0x862 <__stack+0x3>
	{
		u8 Temperature = 0;
		Temperature = H_Lm35_Read();
     81a:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <H_Lm35_Read>
		if (Temperature >= 26)
     81e:	8a 31       	cpi	r24, 0x1A	; 26
     820:	78 f0       	brcs	.+30     	; 0x840 <CheckAC+0x2a>
		{
			H_Led_On(LED_0);
     822:	80 e2       	ldi	r24, 0x20	; 32
     824:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Led_On>
			H_Led_Off(LED_1);
     828:	81 e2       	ldi	r24, 0x21	; 33
     82a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
			H_DcMotor_SetDirection(CW);
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	0e 94 85 06 	call	0xd0a	; 0xd0a <H_DcMotor_SetDirection>
			H_DcMotor_Speed(100);
     834:	84 e6       	ldi	r24, 0x64	; 100
     836:	0e 94 8e 06 	call	0xd1c	; 0xd1c <H_DcMotor_Speed>
			H_DcMotor_Start();
     83a:	0e 94 91 06 	call	0xd22	; 0xd22 <H_DcMotor_Start>
     83e:	0a c0       	rjmp	.+20     	; 0x854 <CheckAC+0x3e>
		}
		else if (Temperature < 21)
     840:	85 31       	cpi	r24, 0x15	; 21
     842:	40 f4       	brcc	.+16     	; 0x854 <CheckAC+0x3e>
		{
			H_Led_On(LED_1);
     844:	81 e2       	ldi	r24, 0x21	; 33
     846:	0e 94 cd 0a 	call	0x159a	; 0x159a <H_Led_On>
			H_Led_Off(LED_0);
     84a:	80 e2       	ldi	r24, 0x20	; 32
     84c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
			H_DcMotor_Stop();
     850:	0e 94 94 06 	call	0xd28	; 0xd28 <H_DcMotor_Stop>
		}
		H_Lcd_Clear();
     854:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
		H_Lcd_WriteString("AC Opened");
     858:	86 e4       	ldi	r24, 0x46	; 70
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     860:	08 95       	ret
	}
	else 
	{
		H_DcMotor_Stop();
     862:	0e 94 94 06 	call	0xd28	; 0xd28 <H_DcMotor_Stop>
		H_Led_Off(LED_1);
     866:	81 e2       	ldi	r24, 0x21	; 33
     868:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
		H_Led_Off(LED_0);
     86c:	80 e2       	ldi	r24, 0x20	; 32
     86e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <H_Led_Off>
		H_Lcd_Clear();
     872:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
		H_Lcd_WriteString("AC Closed");	
     876:	80 e5       	ldi	r24, 0x50	; 80
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     87e:	08 95       	ret

00000880 <CheckDoor>:
	}
}

void CheckDoor(u8 DoorState)
{
	if (DoorState == 1)
     880:	81 30       	cpi	r24, 0x01	; 1
     882:	c9 f4       	brne	.+50     	; 0x8b6 <CheckDoor+0x36>
	{
		H_Lcd_GoTo(1,0);
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
		H_Lcd_WriteString("Door Is Opened");
     88a:	8a e0       	ldi	r24, 0x0A	; 10
     88c:	91 e0       	ldi	r25, 0x01	; 1
     88e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
		H_Servo_SetAngel(120);
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	80 ef       	ldi	r24, 0xF0	; 240
     898:	92 e4       	ldi	r25, 0x42	; 66
     89a:	0e 94 0a 0b 	call	0x1614	; 0x1614 <H_Servo_SetAngel>
		H_Relay_On();
     89e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <H_Relay_On>
     8a2:	2f ef       	ldi	r18, 0xFF	; 255
     8a4:	89 e6       	ldi	r24, 0x69	; 105
     8a6:	98 e1       	ldi	r25, 0x18	; 24
     8a8:	21 50       	subi	r18, 0x01	; 1
     8aa:	80 40       	sbci	r24, 0x00	; 0
     8ac:	90 40       	sbci	r25, 0x00	; 0
     8ae:	e1 f7       	brne	.-8      	; 0x8a8 <CheckDoor+0x28>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <CheckDoor+0x32>
     8b2:	00 00       	nop
     8b4:	08 95       	ret
		_delay_ms(500);
	}
	else
	{
		H_Lcd_GoTo(1,0);
     8b6:	60 e0       	ldi	r22, 0x00	; 0
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
		H_Lcd_WriteString("Door Is Closed");
     8be:	89 e1       	ldi	r24, 0x19	; 25
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
		H_Servo_SetAngel(0);
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	cb 01       	movw	r24, r22
     8cc:	0e 94 0a 0b 	call	0x1614	; 0x1614 <H_Servo_SetAngel>
		H_Relay_Off();
     8d0:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <H_Relay_Off>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
     8d6:	89 e6       	ldi	r24, 0x69	; 105
     8d8:	98 e1       	ldi	r25, 0x18	; 24
     8da:	21 50       	subi	r18, 0x01	; 1
     8dc:	80 40       	sbci	r24, 0x00	; 0
     8de:	90 40       	sbci	r25, 0x00	; 0
     8e0:	e1 f7       	brne	.-8      	; 0x8da <CheckDoor+0x5a>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <CheckDoor+0x64>
     8e4:	00 00       	nop
     8e6:	08 95       	ret

000008e8 <main>:
/************************************************************************/
/*                                                                      */
/************************************************************************/

int main ()
{
     8e8:	cf 93       	push	r28
     8ea:	df 93       	push	r29
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
     8f0:	29 97       	sbiw	r28, 0x09	; 9
     8f2:	0f b6       	in	r0, 0x3f	; 63
     8f4:	f8 94       	cli
     8f6:	de bf       	out	0x3e, r29	; 62
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	cd bf       	out	0x3d, r28	; 61
	H_Lcd_Init();
     8fc:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <H_Lcd_Init>
	H_KeyPad_Init();
     900:	0e 94 cf 06 	call	0xd9e	; 0xd9e <H_KeyPad_Init>
	H_Eeprom_Init();
     904:	0e 94 97 06 	call	0xd2e	; 0xd2e <H_Eeprom_Init>
	H_DcMotor_Init();
     908:	0e 94 7a 06 	call	0xcf4	; 0xcf4 <H_DcMotor_Init>
	H_Lm35_Init();
     90c:	0e 94 d5 0a 	call	0x15aa	; 0x15aa <H_Lm35_Init>
	H_Servo_Init();
     910:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <H_Servo_Init>
	H_Led_Init(LED_0);
     914:	80 e2       	ldi	r24, 0x20	; 32
     916:	0e 94 c9 0a 	call	0x1592	; 0x1592 <H_Led_Init>
	H_Led_Init(LED_1);
     91a:	81 e2       	ldi	r24, 0x21	; 33
     91c:	0e 94 c9 0a 	call	0x1592	; 0x1592 <H_Led_Init>
	H_Buzzer_Init();
     920:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <H_Buzzer_Init>
	H_PushButton_Init();
     924:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <H_PushButton_Init>
	H_Relay_Init();
     928:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <H_Relay_Init>
	
//	M_ExtInt_SetCallBackInt0(A_Main_ExtInt0Exc);
	
	char NumberOfUsers = 0;

	NumberOfUsers = H_Eeprom_Read(0,100);
     92c:	64 e6       	ldi	r22, 0x64	; 100
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	0e 94 b4 06 	call	0xd68	; 0xd68 <H_Eeprom_Read>
     934:	08 2f       	mov	r16, r24
 	u8 UserID		[3]	= {0,0,0};
     936:	19 82       	std	Y+1, r1	; 0x01
     938:	1a 82       	std	Y+2, r1	; 0x02
     93a:	1b 82       	std	Y+3, r1	; 0x03
 	u8 UserPassword [4] = {0,0,0,0};	
     93c:	1c 82       	std	Y+4, r1	; 0x04
     93e:	1d 82       	std	Y+5, r1	; 0x05
     940:	1e 82       	std	Y+6, r1	; 0x06
     942:	1f 82       	std	Y+7, r1	; 0x07
	u8 KeyPressed = 0;
	u8 Trails = 0;
	u8 DoorState = 0;
     944:	18 86       	std	Y+8, r1	; 0x08
	u8 ACState = 0;
     946:	19 86       	std	Y+9, r1	; 0x09

	
	
	while (1)
	{
		switch(AppState)
     948:	e0 91 32 02 	lds	r30, 0x0232	; 0x800232 <__data_end>
     94c:	8e 2f       	mov	r24, r30
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	83 33       	cpi	r24, 0x33	; 51
     952:	91 05       	cpc	r25, r1
     954:	c8 f7       	brcc	.-14     	; 0x948 <main+0x60>
     956:	fc 01       	movw	r30, r24
     958:	e6 5d       	subi	r30, 0xD6	; 214
     95a:	ff 4f       	sbci	r31, 0xFF	; 255
     95c:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__tablejump2__>
		{
			case WELCOME :
				WelcomingMsg();
     960:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <WelcomingMsg>
				AppState = FIRST_PAGE;
     964:	80 e3       	ldi	r24, 0x30	; 48
     966:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
				break;
     96a:	ee cf       	rjmp	.-36     	; 0x948 <main+0x60>
			case FIRST_PAGE:
				H_Lcd_Clear();
     96c:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
				H_Lcd_WriteString("    Welcome     ");
     970:	8a e5       	ldi	r24, 0x5A	; 90
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     978:	60 e0       	ldi	r22, 0x00	; 0
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
				H_Lcd_WriteString("1:Admin 2:User");
     980:	8b e6       	ldi	r24, 0x6B	; 107
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     988:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
				while(!KeyPressed)
     98c:	0d c0       	rjmp	.+26     	; 0x9a8 <main+0xc0>
				{
					KeyPressed = H_KeyPad_Read();
     98e:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
					if (KeyPressed == '1')
     992:	81 33       	cpi	r24, 0x31	; 49
     994:	21 f4       	brne	.+8      	; 0x99e <main+0xb6>
					{	
						AppState = ADMIN_LOGIN_PAGE;
     996:	91 e3       	ldi	r25, 0x31	; 49
     998:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <__data_end>
     99c:	05 c0       	rjmp	.+10     	; 0x9a8 <main+0xc0>
					}
					else if (KeyPressed == '2')
     99e:	82 33       	cpi	r24, 0x32	; 50
     9a0:	19 f4       	brne	.+6      	; 0x9a8 <main+0xc0>
					{
						AppState = USER_LOGIN_PAGE;
     9a2:	92 e3       	ldi	r25, 0x32	; 50
     9a4:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString("    Welcome     ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("1:Admin 2:User");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     9a8:	88 23       	and	r24, r24
     9aa:	89 f3       	breq	.-30     	; 0x98e <main+0xa6>
     9ac:	cd cf       	rjmp	.-102    	; 0x948 <main+0x60>
				}
				break;
			
			case ADMIN_LOGIN_PAGE:
				Trails = 0;
				H_Lcd_Clear();
     9ae:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
				H_Lcd_WriteString("Welcome Admin");
     9b2:	8a e7       	ldi	r24, 0x7A	; 122
     9b4:	91 e0       	ldi	r25, 0x01	; 1
     9b6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     9ba:	2f ef       	ldi	r18, 0xFF	; 255
     9bc:	83 ed       	ldi	r24, 0xD3	; 211
     9be:	90 e3       	ldi	r25, 0x30	; 48
     9c0:	21 50       	subi	r18, 0x01	; 1
     9c2:	80 40       	sbci	r24, 0x00	; 0
     9c4:	90 40       	sbci	r25, 0x00	; 0
     9c6:	e1 f7       	brne	.-8      	; 0x9c0 <main+0xd8>
     9c8:	00 c0       	rjmp	.+0      	; 0x9ca <main+0xe2>
     9ca:	00 00       	nop
				_delay_ms(1000);
				H_Lcd_Clear();
     9cc:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
					
				}
				break;
			
			case ADMIN_LOGIN_PAGE:
				Trails = 0;
     9d0:	10 e0       	ldi	r17, 0x00	; 0
				H_Lcd_Clear();
				H_Lcd_WriteString("Welcome Admin");
				_delay_ms(1000);
				H_Lcd_Clear();
 				while(Trails < 3)
     9d2:	41 c0       	rjmp	.+130    	; 0xa56 <main+0x16e>
				{
					H_Lcd_WriteString("Enter Username");
     9d4:	88 e8       	ldi	r24, 0x88	; 136
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
 					InputID(UserID);
     9dc:	ce 01       	movw	r24, r28
     9de:	01 96       	adiw	r24, 0x01	; 1
     9e0:	0e 94 29 03 	call	0x652	; 0x652 <InputID>
					H_Lcd_Clear();
     9e4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
     9e8:	87 e9       	ldi	r24, 0x97	; 151
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
					InputPassword(UserPassword);
     9f0:	ce 01       	movw	r24, r28
     9f2:	04 96       	adiw	r24, 0x04	; 4
     9f4:	0e 94 4d 03 	call	0x69a	; 0x69a <InputPassword>
					
					if (AdminLogin(UserID,UserPassword) == 0)
     9f8:	be 01       	movw	r22, r28
     9fa:	6c 5f       	subi	r22, 0xFC	; 252
     9fc:	7f 4f       	sbci	r23, 0xFF	; 255
     9fe:	ce 01       	movw	r24, r28
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <AdminLogin>
     a06:	81 11       	cpse	r24, r1
     a08:	04 c0       	rjmp	.+8      	; 0xa12 <main+0x12a>
					{
						AppState = ADMIN_SECOND_PAGE;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
						break;
     a10:	9b cf       	rjmp	.-202    	; 0x948 <main+0x60>
					}
					else 
					{
						Trails++;
     a12:	1f 5f       	subi	r17, 0xFF	; 255
						if (Trails == 3)
     a14:	13 30       	cpi	r17, 0x03	; 3
     a16:	f9 f4       	brne	.+62     	; 0xa56 <main+0x16e>
						{
							H_Buzzer_On();
     a18:	0e 94 70 06 	call	0xce0	; 0xce0 <H_Buzzer_On>
							CloseTheDoor();
     a1c:	0e 94 03 04 	call	0x806	; 0x806 <CloseTheDoor>
							KeyPressed = H_PushButton_Read();
     a20:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
							while (1)
							{
								if (H_PushButton_Read() == PRESSED)
     a24:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
     a28:	81 30       	cpi	r24, 0x01	; 1
     a2a:	e1 f7       	brne	.-8      	; 0xa24 <main+0x13c>
     a2c:	2f ef       	ldi	r18, 0xFF	; 255
     a2e:	87 ee       	ldi	r24, 0xE7	; 231
     a30:	93 e0       	ldi	r25, 0x03	; 3
     a32:	21 50       	subi	r18, 0x01	; 1
     a34:	80 40       	sbci	r24, 0x00	; 0
     a36:	90 40       	sbci	r25, 0x00	; 0
     a38:	e1 f7       	brne	.-8      	; 0xa32 <main+0x14a>
     a3a:	00 c0       	rjmp	.+0      	; 0xa3c <main+0x154>
     a3c:	00 00       	nop
								{
									_delay_ms(80);
									if (H_PushButton_Read() == PRESSED)
     a3e:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
     a42:	81 30       	cpi	r24, 0x01	; 1
     a44:	79 f7       	brne	.-34     	; 0xa24 <main+0x13c>
									{
										while(H_PushButton_Read() == PRESSED);	
     a46:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
     a4a:	81 30       	cpi	r24, 0x01	; 1
     a4c:	e1 f3       	breq	.-8      	; 0xa46 <main+0x15e>
										H_Buzzer_Off();
     a4e:	0e 94 75 06 	call	0xcea	; 0xcea <H_Buzzer_Off>
										AppState = WELCOME;
     a52:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
				Trails = 0;
				H_Lcd_Clear();
				H_Lcd_WriteString("Welcome Admin");
				_delay_ms(1000);
				H_Lcd_Clear();
 				while(Trails < 3)
     a56:	13 30       	cpi	r17, 0x03	; 3
     a58:	08 f4       	brcc	.+2      	; 0xa5c <main+0x174>
     a5a:	bc cf       	rjmp	.-136    	; 0x9d4 <main+0xec>
     a5c:	75 cf       	rjmp	.-278    	; 0x948 <main+0x60>
				break;
				
			
			case USER_LOGIN_PAGE:
				Trails = 0;
				H_Lcd_Clear();
     a5e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
				H_Lcd_WriteString("Welcome User");
     a62:	86 ea       	ldi	r24, 0xA6	; 166
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
     a6a:	2f ef       	ldi	r18, 0xFF	; 255
     a6c:	83 ed       	ldi	r24, 0xD3	; 211
     a6e:	90 e3       	ldi	r25, 0x30	; 48
     a70:	21 50       	subi	r18, 0x01	; 1
     a72:	80 40       	sbci	r24, 0x00	; 0
     a74:	90 40       	sbci	r25, 0x00	; 0
     a76:	e1 f7       	brne	.-8      	; 0xa70 <main+0x188>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <main+0x192>
     a7a:	00 00       	nop
				Trails = 0;
				break;
				
			
			case USER_LOGIN_PAGE:
				Trails = 0;
     a7c:	10 e0       	ldi	r17, 0x00	; 0
     a7e:	4d c0       	rjmp	.+154    	; 0xb1a <main+0x232>
				H_Lcd_Clear();
				H_Lcd_WriteString("Welcome User");
				_delay_ms(1000);
				while(Trails < 3)
				{
					H_Lcd_Clear();
     a80:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Username");
     a84:	88 e8       	ldi	r24, 0x88	; 136
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
					InputID(UserID);
     a8c:	ce 01       	movw	r24, r28
     a8e:	01 96       	adiw	r24, 0x01	; 1
     a90:	0e 94 29 03 	call	0x652	; 0x652 <InputID>
					H_Lcd_Clear();
     a94:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
     a98:	87 e9       	ldi	r24, 0x97	; 151
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
					InputPassword(UserPassword);
     aa0:	ce 01       	movw	r24, r28
     aa2:	04 96       	adiw	r24, 0x04	; 4
     aa4:	0e 94 4d 03 	call	0x69a	; 0x69a <InputPassword>
					u8 LoginResult = UserLogin(UserID,UserPassword);
     aa8:	be 01       	movw	r22, r28
     aaa:	6c 5f       	subi	r22, 0xFC	; 252
     aac:	7f 4f       	sbci	r23, 0xFF	; 255
     aae:	ce 01       	movw	r24, r28
     ab0:	01 96       	adiw	r24, 0x01	; 1
     ab2:	0e 94 96 02 	call	0x52c	; 0x52c <UserLogin>
					
					if (LoginResult == 0)
     ab6:	81 11       	cpse	r24, r1
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <main+0x1da>
					{
						AppState = USER_SECOND_PAGE;
     aba:	82 e0       	ldi	r24, 0x02	; 2
     abc:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
						break;
     ac0:	43 cf       	rjmp	.-378    	; 0x948 <main+0x60>
					}
					else if (LoginResult == 2)
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	21 f4       	brne	.+8      	; 0xace <main+0x1e6>
					{
						AppState = FIRST_PAGE;
     ac6:	80 e3       	ldi	r24, 0x30	; 48
     ac8:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
						break;
     acc:	3d cf       	rjmp	.-390    	; 0x948 <main+0x60>
					}
					else if (LoginResult == 1)
     ace:	81 30       	cpi	r24, 0x01	; 1
     ad0:	21 f5       	brne	.+72     	; 0xb1a <main+0x232>
					{
						Trails++;
     ad2:	1f 5f       	subi	r17, 0xFF	; 255
						if (Trails == 3)
     ad4:	13 30       	cpi	r17, 0x03	; 3
     ad6:	09 f5       	brne	.+66     	; 0xb1a <main+0x232>
						{
							H_Buzzer_On();
     ad8:	0e 94 70 06 	call	0xce0	; 0xce0 <H_Buzzer_On>
							CloseTheDoor();
     adc:	0e 94 03 04 	call	0x806	; 0x806 <CloseTheDoor>
							H_Lcd_Clear();
     ae0:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
							KeyPressed = H_PushButton_Read();
     ae4:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
							while (1)
							{
								if (H_PushButton_Read() == PRESSED)
     ae8:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
     aec:	81 30       	cpi	r24, 0x01	; 1
     aee:	e1 f7       	brne	.-8      	; 0xae8 <main+0x200>
     af0:	2f ef       	ldi	r18, 0xFF	; 255
     af2:	87 ee       	ldi	r24, 0xE7	; 231
     af4:	93 e0       	ldi	r25, 0x03	; 3
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	80 40       	sbci	r24, 0x00	; 0
     afa:	90 40       	sbci	r25, 0x00	; 0
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <main+0x20e>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <main+0x218>
     b00:	00 00       	nop
								{
									_delay_ms(80);
									if (H_PushButton_Read() == PRESSED)
     b02:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
     b06:	81 30       	cpi	r24, 0x01	; 1
     b08:	79 f7       	brne	.-34     	; 0xae8 <main+0x200>
									{
										while(H_PushButton_Read() == PRESSED);
     b0a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <H_PushButton_Read>
     b0e:	81 30       	cpi	r24, 0x01	; 1
     b10:	e1 f3       	breq	.-8      	; 0xb0a <main+0x222>
										H_Buzzer_Off();
     b12:	0e 94 75 06 	call	0xcea	; 0xcea <H_Buzzer_Off>
										AppState = WELCOME;
     b16:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
			case USER_LOGIN_PAGE:
				Trails = 0;
				H_Lcd_Clear();
				H_Lcd_WriteString("Welcome User");
				_delay_ms(1000);
				while(Trails < 3)
     b1a:	13 30       	cpi	r17, 0x03	; 3
     b1c:	08 f4       	brcc	.+2      	; 0xb20 <main+0x238>
     b1e:	b0 cf       	rjmp	.-160    	; 0xa80 <main+0x198>
     b20:	13 cf       	rjmp	.-474    	; 0x948 <main+0x60>
				}
				Trails = 0;
				break;
			
			case ADMIN_SECOND_PAGE:
				H_Lcd_Clear();
     b22:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
				H_Lcd_WriteString(" 1:Switch Door  ");
     b26:	83 eb       	ldi	r24, 0xB3	; 179
     b28:	91 e0       	ldi	r25, 0x01	; 1
     b2a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
				H_Lcd_WriteString("2:AddUser 3:Next");
     b36:	84 ec       	ldi	r24, 0xC4	; 196
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     b3e:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     b42:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     b44:	2d c0       	rjmp	.+90     	; 0xba0 <main+0x2b8>
				{
					KeyPressed = H_KeyPad_Read();
     b46:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     b4a:	18 2f       	mov	r17, r24
					if (KeyPressed == '1')
     b4c:	81 33       	cpi	r24, 0x31	; 49
     b4e:	29 f4       	brne	.+10     	; 0xb5a <main+0x272>
					{
						SwitchDoor(&DoorState);
     b50:	ce 01       	movw	r24, r28
     b52:	08 96       	adiw	r24, 0x08	; 8
     b54:	0e 94 72 03 	call	0x6e4	; 0x6e4 <SwitchDoor>
     b58:	23 c0       	rjmp	.+70     	; 0xba0 <main+0x2b8>
					}
					else if (KeyPressed == '2')
     b5a:	82 33       	cpi	r24, 0x32	; 50
     b5c:	e1 f4       	brne	.+56     	; 0xb96 <main+0x2ae>
					{
						H_Lcd_Clear();
     b5e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
						H_Lcd_WriteString("Enter Username");
     b62:	88 e8       	ldi	r24, 0x88	; 136
     b64:	91 e0       	ldi	r25, 0x01	; 1
     b66:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
						InputID(UserID);
     b6a:	ce 01       	movw	r24, r28
     b6c:	01 96       	adiw	r24, 0x01	; 1
     b6e:	0e 94 29 03 	call	0x652	; 0x652 <InputID>
						H_Lcd_Clear();
     b72:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
						H_Lcd_WriteString("Enter Password");
     b76:	87 e9       	ldi	r24, 0x97	; 151
     b78:	91 e0       	ldi	r25, 0x01	; 1
     b7a:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
						InputPassword(UserPassword);
     b7e:	ce 01       	movw	r24, r28
     b80:	04 96       	adiw	r24, 0x04	; 4
     b82:	0e 94 4d 03 	call	0x69a	; 0x69a <InputPassword>
						AddUser(UserID, UserPassword);
     b86:	be 01       	movw	r22, r28
     b88:	6c 5f       	subi	r22, 0xFC	; 252
     b8a:	7f 4f       	sbci	r23, 0xFF	; 255
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 7c 00 	call	0xf8	; 0xf8 <AddUser>
     b94:	05 c0       	rjmp	.+10     	; 0xba0 <main+0x2b8>
					}
					else if (KeyPressed == '3')
     b96:	83 33       	cpi	r24, 0x33	; 51
     b98:	19 f4       	brne	.+6      	; 0xba0 <main+0x2b8>
					{
						AppState = ADMIN_THIRD_PAGE;
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString(" 1:Switch Door  ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("2:AddUser 3:Next");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     ba0:	11 23       	and	r17, r17
     ba2:	89 f2       	breq	.-94     	; 0xb46 <main+0x25e>
     ba4:	d1 ce       	rjmp	.-606    	; 0x948 <main+0x60>
						AppState = ADMIN_THIRD_PAGE;
					}		
				}
				break;
			case ADMIN_THIRD_PAGE:
				H_Lcd_Clear();        
     ba6:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
				H_Lcd_WriteString(" 4:Remove User  ");
     baa:	85 ed       	ldi	r24, 0xD5	; 213
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
				H_Lcd_WriteString("5:Back 6:Next");
     bba:	86 ee       	ldi	r24, 0xE6	; 230
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     bc2:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     bc6:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     bc8:	23 c0       	rjmp	.+70     	; 0xc10 <main+0x328>
				{
					KeyPressed = H_KeyPad_Read();
     bca:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     bce:	18 2f       	mov	r17, r24
					if (KeyPressed == '4')
     bd0:	84 33       	cpi	r24, 0x34	; 52
     bd2:	99 f4       	brne	.+38     	; 0xbfa <main+0x312>
					{
						H_Lcd_Clear();
     bd4:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
						H_Lcd_WriteString("Enter Username");
     bd8:	88 e8       	ldi	r24, 0x88	; 136
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
						InputID(UserID);
     be0:	ce 01       	movw	r24, r28
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	0e 94 29 03 	call	0x652	; 0x652 <InputID>
						H_Lcd_Clear();
     be8:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
						DeleteUser(NumberOfUsers,UserID);
     bec:	be 01       	movw	r22, r28
     bee:	6f 5f       	subi	r22, 0xFF	; 255
     bf0:	7f 4f       	sbci	r23, 0xFF	; 255
     bf2:	80 2f       	mov	r24, r16
     bf4:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <DeleteUser>
     bf8:	0b c0       	rjmp	.+22     	; 0xc10 <main+0x328>
					}
					else if (KeyPressed == '5')
     bfa:	85 33       	cpi	r24, 0x35	; 53
     bfc:	21 f4       	brne	.+8      	; 0xc06 <main+0x31e>
					{
						AppState = ADMIN_SECOND_PAGE;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
     c04:	05 c0       	rjmp	.+10     	; 0xc10 <main+0x328>
					}
					else if (KeyPressed == '6')
     c06:	86 33       	cpi	r24, 0x36	; 54
     c08:	19 f4       	brne	.+6      	; 0xc10 <main+0x328>
					{
						AppState = ADMIN_FOURTH_PAGE;
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
				H_Lcd_Clear();        
				H_Lcd_WriteString(" 4:Remove User  ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("5:Back 6:Next");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     c10:	11 23       	and	r17, r17
     c12:	d9 f2       	breq	.-74     	; 0xbca <main+0x2e2>
     c14:	99 ce       	rjmp	.-718    	; 0x948 <main+0x60>
						AppState = ADMIN_FOURTH_PAGE;
					}
				}
				break;
			case ADMIN_FOURTH_PAGE:
				H_Lcd_Clear();
     c16:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
				H_Lcd_WriteString(" 7:Switch AC  ");
     c1a:	84 ef       	ldi	r24, 0xF4	; 244
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     c22:	60 e0       	ldi	r22, 0x00	; 0
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
				H_Lcd_WriteString("8:1stPage 9:Done");
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	92 e0       	ldi	r25, 0x02	; 2
     c2e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     c32:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     c36:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     c38:	15 c0       	rjmp	.+42     	; 0xc64 <main+0x37c>
				{
					KeyPressed = H_KeyPad_Read();
     c3a:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     c3e:	18 2f       	mov	r17, r24
					if (KeyPressed == '7')
     c40:	87 33       	cpi	r24, 0x37	; 55
     c42:	29 f4       	brne	.+10     	; 0xc4e <main+0x366>
					{
						ACSwitch(&ACState);
     c44:	ce 01       	movw	r24, r28
     c46:	09 96       	adiw	r24, 0x09	; 9
     c48:	0e 94 b4 03 	call	0x768	; 0x768 <ACSwitch>
     c4c:	0b c0       	rjmp	.+22     	; 0xc64 <main+0x37c>
					}
					else if (KeyPressed == '8')
     c4e:	88 33       	cpi	r24, 0x38	; 56
     c50:	21 f4       	brne	.+8      	; 0xc5a <main+0x372>
					{
						AppState = ADMIN_SECOND_PAGE;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
     c58:	05 c0       	rjmp	.+10     	; 0xc64 <main+0x37c>
					}
					else if (KeyPressed == '9')
     c5a:	89 33       	cpi	r24, 0x39	; 57
     c5c:	19 f4       	brne	.+6      	; 0xc64 <main+0x37c>
					{
						AppState = IDLE_STATE;
     c5e:	85 e0       	ldi	r24, 0x05	; 5
     c60:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString(" 7:Switch AC  ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("8:1stPage 9:Done");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     c64:	11 23       	and	r17, r17
     c66:	49 f3       	breq	.-46     	; 0xc3a <main+0x352>
     c68:	6f ce       	rjmp	.-802    	; 0x948 <main+0x60>
					}
				}
				break;
				
			case IDLE_STATE:
				KeyPressed = H_KeyPad_Read();
     c6a:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     c6e:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <main+0x39c>
				{
					KeyPressed = H_KeyPad_Read();
     c72:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     c76:	18 2f       	mov	r17, r24
					CheckAC(ACState);
     c78:	89 85       	ldd	r24, Y+9	; 0x09
     c7a:	0e 94 0b 04 	call	0x816	; 0x816 <CheckAC>
					CheckDoor(DoorState);
     c7e:	88 85       	ldd	r24, Y+8	; 0x08
     c80:	0e 94 40 04 	call	0x880	; 0x880 <CheckDoor>
				}
				break;
				
			case IDLE_STATE:
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     c84:	11 23       	and	r17, r17
     c86:	a9 f3       	breq	.-22     	; 0xc72 <main+0x38a>
				{
					KeyPressed = H_KeyPad_Read();
					CheckAC(ACState);
					CheckDoor(DoorState);
				}
				AppState = WELCOME;
     c88:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <__data_end>
				break;
     c8c:	5d ce       	rjmp	.-838    	; 0x948 <main+0x60>
				
			case USER_SECOND_PAGE :
				H_Lcd_Clear();
     c8e:	0e 94 a8 0a 	call	0x1550	; 0x1550 <H_Lcd_Clear>
				H_Lcd_WriteString(" 1:Switch AC  ");
     c92:	84 e1       	ldi	r24, 0x14	; 20
     c94:	92 e0       	ldi	r25, 0x02	; 2
     c96:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
				H_Lcd_WriteString("   2: Done    ");
     ca2:	83 e2       	ldi	r24, 0x23	; 35
     ca4:	92 e0       	ldi	r25, 0x02	; 2
     ca6:	0e 94 b0 0a 	call	0x1560	; 0x1560 <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     caa:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     cae:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     cb0:	0f c0       	rjmp	.+30     	; 0xcd0 <main+0x3e8>
				{
					KeyPressed = H_KeyPad_Read();
     cb2:	0e 94 10 07 	call	0xe20	; 0xe20 <H_KeyPad_Read>
     cb6:	18 2f       	mov	r17, r24
					if (KeyPressed == '1')
     cb8:	81 33       	cpi	r24, 0x31	; 49
     cba:	29 f4       	brne	.+10     	; 0xcc6 <main+0x3de>
					{
						ACSwitch(&ACState);
     cbc:	ce 01       	movw	r24, r28
     cbe:	09 96       	adiw	r24, 0x09	; 9
     cc0:	0e 94 b4 03 	call	0x768	; 0x768 <ACSwitch>
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <main+0x3e8>
					}
					else if (KeyPressed == '2')
     cc6:	82 33       	cpi	r24, 0x32	; 50
     cc8:	19 f4       	brne	.+6      	; 0xcd0 <main+0x3e8>
					{
						AppState = IDLE_STATE;
     cca:	85 e0       	ldi	r24, 0x05	; 5
     ccc:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString(" 1:Switch AC  ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("   2: Done    ");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     cd0:	11 23       	and	r17, r17
     cd2:	79 f3       	breq	.-34     	; 0xcb2 <main+0x3ca>
     cd4:	39 ce       	rjmp	.-910    	; 0x948 <main+0x60>

00000cd6 <H_Buzzer_Init>:

#include "Buzzer.h"

void	H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZERPIN,OUTPUT);
     cd6:	61 e0       	ldi	r22, 0x01	; 1
     cd8:	8b e2       	ldi	r24, 0x2B	; 43
     cda:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
     cde:	08 95       	ret

00000ce0 <H_Buzzer_On>:
}

void	H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZERPIN,HIGH);
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	8b e2       	ldi	r24, 0x2B	; 43
     ce4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     ce8:	08 95       	ret

00000cea <H_Buzzer_Off>:
}

void H_Buzzer_Off(void)
{
	M_Dio_PinWrite(BUZZERPIN,LOW);
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	8b e2       	ldi	r24, 0x2B	; 43
     cee:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     cf2:	08 95       	ret

00000cf4 <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init				(void)
{
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
     cf4:	61 e0       	ldi	r22, 0x01	; 1
     cf6:	8e e2       	ldi	r24, 0x2E	; 46
     cf8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_0,OUTPUT);
     cfc:	61 e0       	ldi	r22, 0x01	; 1
     cfe:	8c e2       	ldi	r24, 0x2C	; 44
     d00:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Pwm2_Init();
     d04:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <M_Pwm2_Init>
     d08:	08 95       	ret

00000d0a <H_DcMotor_SetDirection>:
}


void H_DcMotor_SetDirection		(u8 Local_u8_Direction)
{
	M_Dio_PinWrite(DC_MOTOR_PIN_0,HIGH);
     d0a:	61 e0       	ldi	r22, 0x01	; 1
     d0c:	8c e2       	ldi	r24, 0x2C	; 44
     d0e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_1,LOW);	
     d12:	60 e0       	ldi	r22, 0x00	; 0
     d14:	8e e2       	ldi	r24, 0x2E	; 46
     d16:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     d1a:	08 95       	ret

00000d1c <H_DcMotor_Speed>:
}


void H_DcMotor_Speed			(u8 Local_u8_Speed)
{
	M_Pwm2_SetDutyCycle(Local_u8_Speed);
     d1c:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <M_Pwm2_SetDutyCycle>
     d20:	08 95       	ret

00000d22 <H_DcMotor_Start>:
}


void H_DcMotor_Start			(void)
{
	M_Pwm2_Start();
     d22:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <M_Pwm2_Start>
     d26:	08 95       	ret

00000d28 <H_DcMotor_Stop>:
}


void H_DcMotor_Stop				(void)
{
	M_Pwm2_Stop();
     d28:	0e 94 65 0e 	call	0x1cca	; 0x1cca <M_Pwm2_Stop>
     d2c:	08 95       	ret

00000d2e <H_Eeprom_Init>:
 */ 
#include "Eeprom.h"

void H_Eeprom_Init(void)
{
	M_I2c_Init();
     d2e:	0e 94 39 0d 	call	0x1a72	; 0x1a72 <M_I2c_Init>
     d32:	08 95       	ret

00000d34 <H_Eeprom_Write>:
}
void H_Eeprom_Write(u8 Local_u8_Data,u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     d34:	1f 93       	push	r17
     d36:	cf 93       	push	r28
     d38:	df 93       	push	r29
	if(Local_u8_PageAddress < 8)
     d3a:	68 30       	cpi	r22, 0x08	; 8
     d3c:	88 f4       	brcc	.+34     	; 0xd60 <H_Eeprom_Write+0x2c>
     d3e:	14 2f       	mov	r17, r20
     d40:	c6 2f       	mov	r28, r22
     d42:	d8 2f       	mov	r29, r24
	{
		M_I2c_StartCondition();
     d44:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <M_I2c_StartCondition>
		M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     d48:	8c 2f       	mov	r24, r28
     d4a:	80 65       	ori	r24, 0x50	; 80
     d4c:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <M_I2c_SendSlaveAddressWrite>
		M_I2c_SendSByte(Local_u8_ByteAddress);
     d50:	81 2f       	mov	r24, r17
     d52:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <M_I2c_SendSByte>
		M_I2c_SendSByte(Local_u8_Data);
     d56:	8d 2f       	mov	r24, r29
     d58:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <M_I2c_SendSByte>
		M_I2c_StopCondition();
     d5c:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <M_I2c_StopCondition>
	}
}
     d60:	df 91       	pop	r29
     d62:	cf 91       	pop	r28
     d64:	1f 91       	pop	r17
     d66:	08 95       	ret

00000d68 <H_Eeprom_Read>:
u8   H_Eeprom_Read(u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	c8 2f       	mov	r28, r24
     d6e:	d6 2f       	mov	r29, r22
	u8 Local_u8_Data = 0;
	M_I2c_StartCondition();
     d70:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <M_I2c_StartCondition>
	M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     d74:	c0 65       	ori	r28, 0x50	; 80
     d76:	8c 2f       	mov	r24, r28
     d78:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <M_I2c_SendSlaveAddressWrite>
	M_I2c_SendSByte(Local_u8_ByteAddress);
     d7c:	8d 2f       	mov	r24, r29
     d7e:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <M_I2c_SendSByte>
	M_I2c_RepeatedStart();
     d82:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <M_I2c_RepeatedStart>
	M_I2c_SendSlaveAddressRead((0x50 | Local_u8_PageAddress));
     d86:	8c 2f       	mov	r24, r28
     d88:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <M_I2c_SendSlaveAddressRead>
	Local_u8_Data = M_I2c_ReadByteNoAck();
     d8c:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <M_I2c_ReadByteNoAck>
     d90:	c8 2f       	mov	r28, r24
	M_I2c_StopCondition();
     d92:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <M_I2c_StopCondition>
	return Local_u8_Data;
     d96:	8c 2f       	mov	r24, r28
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	82 e2       	ldi	r24, 0x22	; 34
     da2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     da6:	61 e0       	ldi	r22, 0x01	; 1
     da8:	83 e2       	ldi	r24, 0x23	; 35
     daa:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     dae:	61 e0       	ldi	r22, 0x01	; 1
     db0:	84 e2       	ldi	r24, 0x24	; 36
     db2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     db6:	61 e0       	ldi	r22, 0x01	; 1
     db8:	85 e2       	ldi	r24, 0x25	; 37
     dba:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	82 e2       	ldi	r24, 0x22	; 34
     dc2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     dc6:	61 e0       	ldi	r22, 0x01	; 1
     dc8:	83 e2       	ldi	r24, 0x23	; 35
     dca:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	84 e2       	ldi	r24, 0x24	; 36
     dd2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     dd6:	61 e0       	ldi	r22, 0x01	; 1
     dd8:	85 e2       	ldi	r24, 0x25	; 37
     dda:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     dde:	60 e0       	ldi	r22, 0x00	; 0
     de0:	8f e0       	ldi	r24, 0x0F	; 15
     de2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     de6:	60 e0       	ldi	r22, 0x00	; 0
     de8:	80 e1       	ldi	r24, 0x10	; 16
     dea:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	81 e1       	ldi	r24, 0x11	; 17
     df2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     df6:	60 e0       	ldi	r22, 0x00	; 0
     df8:	87 e1       	ldi	r24, 0x17	; 23
     dfa:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
     dfe:	61 e0       	ldi	r22, 0x01	; 1
     e00:	8f e0       	ldi	r24, 0x0F	; 15
     e02:	0e 94 b0 0c 	call	0x1960	; 0x1960 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
     e06:	61 e0       	ldi	r22, 0x01	; 1
     e08:	80 e1       	ldi	r24, 0x10	; 16
     e0a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	81 e1       	ldi	r24, 0x11	; 17
     e12:	0e 94 b0 0c 	call	0x1960	; 0x1960 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
     e16:	61 e0       	ldi	r22, 0x01	; 1
     e18:	87 e1       	ldi	r24, 0x17	; 23
     e1a:	0e 94 b0 0c 	call	0x1960	; 0x1960 <M_Dio_PinPullUp>
     e1e:	08 95       	ret

00000e20 <H_KeyPad_Read>:
		
}
u8	 H_KeyPad_Read				(void)
{
     e20:	cf 93       	push	r28
	u8 Local_u8_KeyPadArr [4][4]	={	{'7','8','9','/'},
										{'4','5','6','*'},
										{'1','2','3','-'},										
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	82 e2       	ldi	r24, 0x22	; 34
     e26:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
     e2a:	8f e0       	ldi	r24, 0x0F	; 15
     e2c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     e30:	81 11       	cpse	r24, r1
     e32:	19 c0       	rjmp	.+50     	; 0xe66 <H_KeyPad_Read+0x46>
     e34:	2f ef       	ldi	r18, 0xFF	; 255
     e36:	86 e7       	ldi	r24, 0x76	; 118
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	80 40       	sbci	r24, 0x00	; 0
     e3e:	90 40       	sbci	r25, 0x00	; 0
     e40:	e1 f7       	brne	.-8      	; 0xe3a <H_KeyPad_Read+0x1a>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <H_KeyPad_Read+0x24>
     e44:	00 00       	nop
     e46:	8f e0       	ldi	r24, 0x0F	; 15
     e48:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     e4c:	81 11       	cpse	r24, r1
     e4e:	0d c0       	rjmp	.+26     	; 0xe6a <H_KeyPad_Read+0x4a>
     e50:	8f e0       	ldi	r24, 0x0F	; 15
     e52:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     e56:	88 23       	and	r24, r24
     e58:	d9 f3       	breq	.-10     	; 0xe50 <H_KeyPad_Read+0x30>
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	82 e2       	ldi	r24, 0x22	; 34
     e5e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     e62:	c7 e3       	ldi	r28, 0x37	; 55
     e64:	03 c0       	rjmp	.+6      	; 0xe6c <H_KeyPad_Read+0x4c>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
		
}
u8	 H_KeyPad_Read				(void)
{
	u8 Local_u8_KeypadReading		=	0;
     e66:	c0 e0       	ldi	r28, 0x00	; 0
     e68:	01 c0       	rjmp	.+2      	; 0xe6c <H_KeyPad_Read+0x4c>
     e6a:	c0 e0       	ldi	r28, 0x00	; 0
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][1];}}
     e6c:	80 e1       	ldi	r24, 0x10	; 16
     e6e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     e72:	81 11       	cpse	r24, r1
     e74:	18 c0       	rjmp	.+48     	; 0xea6 <H_KeyPad_Read+0x86>
     e76:	2f ef       	ldi	r18, 0xFF	; 255
     e78:	86 e7       	ldi	r24, 0x76	; 118
     e7a:	91 e0       	ldi	r25, 0x01	; 1
     e7c:	21 50       	subi	r18, 0x01	; 1
     e7e:	80 40       	sbci	r24, 0x00	; 0
     e80:	90 40       	sbci	r25, 0x00	; 0
     e82:	e1 f7       	brne	.-8      	; 0xe7c <H_KeyPad_Read+0x5c>
     e84:	00 c0       	rjmp	.+0      	; 0xe86 <H_KeyPad_Read+0x66>
     e86:	00 00       	nop
     e88:	80 e1       	ldi	r24, 0x10	; 16
     e8a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     e8e:	81 11       	cpse	r24, r1
     e90:	0a c0       	rjmp	.+20     	; 0xea6 <H_KeyPad_Read+0x86>
     e92:	80 e1       	ldi	r24, 0x10	; 16
     e94:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     e98:	88 23       	and	r24, r24
     e9a:	d9 f3       	breq	.-10     	; 0xe92 <H_KeyPad_Read+0x72>
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	82 e2       	ldi	r24, 0x22	; 34
     ea0:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     ea4:	c8 e3       	ldi	r28, 0x38	; 56
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][2];}}
     ea6:	81 e1       	ldi	r24, 0x11	; 17
     ea8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     eac:	81 11       	cpse	r24, r1
     eae:	18 c0       	rjmp	.+48     	; 0xee0 <H_KeyPad_Read+0xc0>
     eb0:	2f ef       	ldi	r18, 0xFF	; 255
     eb2:	86 e7       	ldi	r24, 0x76	; 118
     eb4:	91 e0       	ldi	r25, 0x01	; 1
     eb6:	21 50       	subi	r18, 0x01	; 1
     eb8:	80 40       	sbci	r24, 0x00	; 0
     eba:	90 40       	sbci	r25, 0x00	; 0
     ebc:	e1 f7       	brne	.-8      	; 0xeb6 <H_KeyPad_Read+0x96>
     ebe:	00 c0       	rjmp	.+0      	; 0xec0 <H_KeyPad_Read+0xa0>
     ec0:	00 00       	nop
     ec2:	81 e1       	ldi	r24, 0x11	; 17
     ec4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     ec8:	81 11       	cpse	r24, r1
     eca:	0a c0       	rjmp	.+20     	; 0xee0 <H_KeyPad_Read+0xc0>
     ecc:	81 e1       	ldi	r24, 0x11	; 17
     ece:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     ed2:	88 23       	and	r24, r24
     ed4:	d9 f3       	breq	.-10     	; 0xecc <H_KeyPad_Read+0xac>
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	82 e2       	ldi	r24, 0x22	; 34
     eda:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     ede:	c9 e3       	ldi	r28, 0x39	; 57
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][3];}}
     ee0:	87 e1       	ldi	r24, 0x17	; 23
     ee2:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     ee6:	81 11       	cpse	r24, r1
     ee8:	18 c0       	rjmp	.+48     	; 0xf1a <H_KeyPad_Read+0xfa>
     eea:	2f ef       	ldi	r18, 0xFF	; 255
     eec:	86 e7       	ldi	r24, 0x76	; 118
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	21 50       	subi	r18, 0x01	; 1
     ef2:	80 40       	sbci	r24, 0x00	; 0
     ef4:	90 40       	sbci	r25, 0x00	; 0
     ef6:	e1 f7       	brne	.-8      	; 0xef0 <H_KeyPad_Read+0xd0>
     ef8:	00 c0       	rjmp	.+0      	; 0xefa <H_KeyPad_Read+0xda>
     efa:	00 00       	nop
     efc:	87 e1       	ldi	r24, 0x17	; 23
     efe:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f02:	81 11       	cpse	r24, r1
     f04:	0a c0       	rjmp	.+20     	; 0xf1a <H_KeyPad_Read+0xfa>
     f06:	87 e1       	ldi	r24, 0x17	; 23
     f08:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f0c:	88 23       	and	r24, r24
     f0e:	d9 f3       	breq	.-10     	; 0xf06 <H_KeyPad_Read+0xe6>
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	82 e2       	ldi	r24, 0x22	; 34
     f14:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     f18:	cf e2       	ldi	r28, 0x2F	; 47
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	82 e2       	ldi	r24, 0x22	; 34
     f1e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,LOW);
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	83 e2       	ldi	r24, 0x23	; 35
     f26:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][0];}}
     f2a:	8f e0       	ldi	r24, 0x0F	; 15
     f2c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f30:	81 11       	cpse	r24, r1
     f32:	18 c0       	rjmp	.+48     	; 0xf64 <H_KeyPad_Read+0x144>
     f34:	2f ef       	ldi	r18, 0xFF	; 255
     f36:	86 e7       	ldi	r24, 0x76	; 118
     f38:	91 e0       	ldi	r25, 0x01	; 1
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	80 40       	sbci	r24, 0x00	; 0
     f3e:	90 40       	sbci	r25, 0x00	; 0
     f40:	e1 f7       	brne	.-8      	; 0xf3a <H_KeyPad_Read+0x11a>
     f42:	00 c0       	rjmp	.+0      	; 0xf44 <H_KeyPad_Read+0x124>
     f44:	00 00       	nop
     f46:	8f e0       	ldi	r24, 0x0F	; 15
     f48:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f4c:	81 11       	cpse	r24, r1
     f4e:	0a c0       	rjmp	.+20     	; 0xf64 <H_KeyPad_Read+0x144>
     f50:	8f e0       	ldi	r24, 0x0F	; 15
     f52:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f56:	88 23       	and	r24, r24
     f58:	d9 f3       	breq	.-10     	; 0xf50 <H_KeyPad_Read+0x130>
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	83 e2       	ldi	r24, 0x23	; 35
     f5e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     f62:	c4 e3       	ldi	r28, 0x34	; 52
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][1];}}
     f64:	80 e1       	ldi	r24, 0x10	; 16
     f66:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f6a:	81 11       	cpse	r24, r1
     f6c:	18 c0       	rjmp	.+48     	; 0xf9e <H_KeyPad_Read+0x17e>
     f6e:	2f ef       	ldi	r18, 0xFF	; 255
     f70:	86 e7       	ldi	r24, 0x76	; 118
     f72:	91 e0       	ldi	r25, 0x01	; 1
     f74:	21 50       	subi	r18, 0x01	; 1
     f76:	80 40       	sbci	r24, 0x00	; 0
     f78:	90 40       	sbci	r25, 0x00	; 0
     f7a:	e1 f7       	brne	.-8      	; 0xf74 <H_KeyPad_Read+0x154>
     f7c:	00 c0       	rjmp	.+0      	; 0xf7e <H_KeyPad_Read+0x15e>
     f7e:	00 00       	nop
     f80:	80 e1       	ldi	r24, 0x10	; 16
     f82:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f86:	81 11       	cpse	r24, r1
     f88:	0a c0       	rjmp	.+20     	; 0xf9e <H_KeyPad_Read+0x17e>
     f8a:	80 e1       	ldi	r24, 0x10	; 16
     f8c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     f90:	88 23       	and	r24, r24
     f92:	d9 f3       	breq	.-10     	; 0xf8a <H_KeyPad_Read+0x16a>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	83 e2       	ldi	r24, 0x23	; 35
     f98:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     f9c:	c5 e3       	ldi	r28, 0x35	; 53
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][2];}}
     f9e:	81 e1       	ldi	r24, 0x11	; 17
     fa0:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     fa4:	81 11       	cpse	r24, r1
     fa6:	18 c0       	rjmp	.+48     	; 0xfd8 <H_KeyPad_Read+0x1b8>
     fa8:	2f ef       	ldi	r18, 0xFF	; 255
     faa:	86 e7       	ldi	r24, 0x76	; 118
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	21 50       	subi	r18, 0x01	; 1
     fb0:	80 40       	sbci	r24, 0x00	; 0
     fb2:	90 40       	sbci	r25, 0x00	; 0
     fb4:	e1 f7       	brne	.-8      	; 0xfae <H_KeyPad_Read+0x18e>
     fb6:	00 c0       	rjmp	.+0      	; 0xfb8 <H_KeyPad_Read+0x198>
     fb8:	00 00       	nop
     fba:	81 e1       	ldi	r24, 0x11	; 17
     fbc:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     fc0:	81 11       	cpse	r24, r1
     fc2:	0a c0       	rjmp	.+20     	; 0xfd8 <H_KeyPad_Read+0x1b8>
     fc4:	81 e1       	ldi	r24, 0x11	; 17
     fc6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     fca:	88 23       	and	r24, r24
     fcc:	d9 f3       	breq	.-10     	; 0xfc4 <H_KeyPad_Read+0x1a4>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	83 e2       	ldi	r24, 0x23	; 35
     fd2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
     fd6:	c6 e3       	ldi	r28, 0x36	; 54
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][3];}}
     fd8:	87 e1       	ldi	r24, 0x17	; 23
     fda:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     fde:	81 11       	cpse	r24, r1
     fe0:	18 c0       	rjmp	.+48     	; 0x1012 <H_KeyPad_Read+0x1f2>
     fe2:	2f ef       	ldi	r18, 0xFF	; 255
     fe4:	86 e7       	ldi	r24, 0x76	; 118
     fe6:	91 e0       	ldi	r25, 0x01	; 1
     fe8:	21 50       	subi	r18, 0x01	; 1
     fea:	80 40       	sbci	r24, 0x00	; 0
     fec:	90 40       	sbci	r25, 0x00	; 0
     fee:	e1 f7       	brne	.-8      	; 0xfe8 <H_KeyPad_Read+0x1c8>
     ff0:	00 c0       	rjmp	.+0      	; 0xff2 <H_KeyPad_Read+0x1d2>
     ff2:	00 00       	nop
     ff4:	87 e1       	ldi	r24, 0x17	; 23
     ff6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
     ffa:	81 11       	cpse	r24, r1
     ffc:	0a c0       	rjmp	.+20     	; 0x1012 <H_KeyPad_Read+0x1f2>
     ffe:	87 e1       	ldi	r24, 0x17	; 23
    1000:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1004:	88 23       	and	r24, r24
    1006:	d9 f3       	breq	.-10     	; 0xffe <H_KeyPad_Read+0x1de>
    1008:	61 e0       	ldi	r22, 0x01	; 1
    100a:	83 e2       	ldi	r24, 0x23	; 35
    100c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    1010:	ca e2       	ldi	r28, 0x2A	; 42
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	83 e2       	ldi	r24, 0x23	; 35
    1016:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,LOW);
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	84 e2       	ldi	r24, 0x24	; 36
    101e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
		
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][0];}}
    1022:	8f e0       	ldi	r24, 0x0F	; 15
    1024:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1028:	81 11       	cpse	r24, r1
    102a:	18 c0       	rjmp	.+48     	; 0x105c <H_KeyPad_Read+0x23c>
    102c:	2f ef       	ldi	r18, 0xFF	; 255
    102e:	86 e7       	ldi	r24, 0x76	; 118
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	21 50       	subi	r18, 0x01	; 1
    1034:	80 40       	sbci	r24, 0x00	; 0
    1036:	90 40       	sbci	r25, 0x00	; 0
    1038:	e1 f7       	brne	.-8      	; 0x1032 <H_KeyPad_Read+0x212>
    103a:	00 c0       	rjmp	.+0      	; 0x103c <H_KeyPad_Read+0x21c>
    103c:	00 00       	nop
    103e:	8f e0       	ldi	r24, 0x0F	; 15
    1040:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1044:	81 11       	cpse	r24, r1
    1046:	0a c0       	rjmp	.+20     	; 0x105c <H_KeyPad_Read+0x23c>
    1048:	8f e0       	ldi	r24, 0x0F	; 15
    104a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    104e:	88 23       	and	r24, r24
    1050:	d9 f3       	breq	.-10     	; 0x1048 <H_KeyPad_Read+0x228>
    1052:	61 e0       	ldi	r22, 0x01	; 1
    1054:	84 e2       	ldi	r24, 0x24	; 36
    1056:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    105a:	c1 e3       	ldi	r28, 0x31	; 49
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][1];}}
    105c:	80 e1       	ldi	r24, 0x10	; 16
    105e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1062:	81 11       	cpse	r24, r1
    1064:	18 c0       	rjmp	.+48     	; 0x1096 <H_KeyPad_Read+0x276>
    1066:	2f ef       	ldi	r18, 0xFF	; 255
    1068:	86 e7       	ldi	r24, 0x76	; 118
    106a:	91 e0       	ldi	r25, 0x01	; 1
    106c:	21 50       	subi	r18, 0x01	; 1
    106e:	80 40       	sbci	r24, 0x00	; 0
    1070:	90 40       	sbci	r25, 0x00	; 0
    1072:	e1 f7       	brne	.-8      	; 0x106c <H_KeyPad_Read+0x24c>
    1074:	00 c0       	rjmp	.+0      	; 0x1076 <H_KeyPad_Read+0x256>
    1076:	00 00       	nop
    1078:	80 e1       	ldi	r24, 0x10	; 16
    107a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    107e:	81 11       	cpse	r24, r1
    1080:	0a c0       	rjmp	.+20     	; 0x1096 <H_KeyPad_Read+0x276>
    1082:	80 e1       	ldi	r24, 0x10	; 16
    1084:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1088:	88 23       	and	r24, r24
    108a:	d9 f3       	breq	.-10     	; 0x1082 <H_KeyPad_Read+0x262>
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	84 e2       	ldi	r24, 0x24	; 36
    1090:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    1094:	c2 e3       	ldi	r28, 0x32	; 50
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][2];}}
    1096:	81 e1       	ldi	r24, 0x11	; 17
    1098:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    109c:	81 11       	cpse	r24, r1
    109e:	18 c0       	rjmp	.+48     	; 0x10d0 <H_KeyPad_Read+0x2b0>
    10a0:	2f ef       	ldi	r18, 0xFF	; 255
    10a2:	86 e7       	ldi	r24, 0x76	; 118
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	21 50       	subi	r18, 0x01	; 1
    10a8:	80 40       	sbci	r24, 0x00	; 0
    10aa:	90 40       	sbci	r25, 0x00	; 0
    10ac:	e1 f7       	brne	.-8      	; 0x10a6 <H_KeyPad_Read+0x286>
    10ae:	00 c0       	rjmp	.+0      	; 0x10b0 <H_KeyPad_Read+0x290>
    10b0:	00 00       	nop
    10b2:	81 e1       	ldi	r24, 0x11	; 17
    10b4:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    10b8:	81 11       	cpse	r24, r1
    10ba:	0a c0       	rjmp	.+20     	; 0x10d0 <H_KeyPad_Read+0x2b0>
    10bc:	81 e1       	ldi	r24, 0x11	; 17
    10be:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    10c2:	88 23       	and	r24, r24
    10c4:	d9 f3       	breq	.-10     	; 0x10bc <H_KeyPad_Read+0x29c>
    10c6:	61 e0       	ldi	r22, 0x01	; 1
    10c8:	84 e2       	ldi	r24, 0x24	; 36
    10ca:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    10ce:	c3 e3       	ldi	r28, 0x33	; 51
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][3];}}
    10d0:	87 e1       	ldi	r24, 0x17	; 23
    10d2:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    10d6:	81 11       	cpse	r24, r1
    10d8:	18 c0       	rjmp	.+48     	; 0x110a <H_KeyPad_Read+0x2ea>
    10da:	2f ef       	ldi	r18, 0xFF	; 255
    10dc:	86 e7       	ldi	r24, 0x76	; 118
    10de:	91 e0       	ldi	r25, 0x01	; 1
    10e0:	21 50       	subi	r18, 0x01	; 1
    10e2:	80 40       	sbci	r24, 0x00	; 0
    10e4:	90 40       	sbci	r25, 0x00	; 0
    10e6:	e1 f7       	brne	.-8      	; 0x10e0 <H_KeyPad_Read+0x2c0>
    10e8:	00 c0       	rjmp	.+0      	; 0x10ea <H_KeyPad_Read+0x2ca>
    10ea:	00 00       	nop
    10ec:	87 e1       	ldi	r24, 0x17	; 23
    10ee:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    10f2:	81 11       	cpse	r24, r1
    10f4:	0a c0       	rjmp	.+20     	; 0x110a <H_KeyPad_Read+0x2ea>
    10f6:	87 e1       	ldi	r24, 0x17	; 23
    10f8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    10fc:	88 23       	and	r24, r24
    10fe:	d9 f3       	breq	.-10     	; 0x10f6 <H_KeyPad_Read+0x2d6>
    1100:	61 e0       	ldi	r22, 0x01	; 1
    1102:	84 e2       	ldi	r24, 0x24	; 36
    1104:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    1108:	cd e2       	ldi	r28, 0x2D	; 45
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
    110a:	61 e0       	ldi	r22, 0x01	; 1
    110c:	84 e2       	ldi	r24, 0x24	; 36
    110e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
				
	M_Dio_PinWrite(KEYPAD_R3_PIN,LOW);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	85 e2       	ldi	r24, 0x25	; 37
    1116:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][0];}}
    111a:	8f e0       	ldi	r24, 0x0F	; 15
    111c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1120:	81 11       	cpse	r24, r1
    1122:	18 c0       	rjmp	.+48     	; 0x1154 <H_KeyPad_Read+0x334>
    1124:	2f ef       	ldi	r18, 0xFF	; 255
    1126:	86 e7       	ldi	r24, 0x76	; 118
    1128:	91 e0       	ldi	r25, 0x01	; 1
    112a:	21 50       	subi	r18, 0x01	; 1
    112c:	80 40       	sbci	r24, 0x00	; 0
    112e:	90 40       	sbci	r25, 0x00	; 0
    1130:	e1 f7       	brne	.-8      	; 0x112a <H_KeyPad_Read+0x30a>
    1132:	00 c0       	rjmp	.+0      	; 0x1134 <H_KeyPad_Read+0x314>
    1134:	00 00       	nop
    1136:	8f e0       	ldi	r24, 0x0F	; 15
    1138:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    113c:	81 11       	cpse	r24, r1
    113e:	0a c0       	rjmp	.+20     	; 0x1154 <H_KeyPad_Read+0x334>
    1140:	8f e0       	ldi	r24, 0x0F	; 15
    1142:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1146:	88 23       	and	r24, r24
    1148:	d9 f3       	breq	.-10     	; 0x1140 <H_KeyPad_Read+0x320>
    114a:	61 e0       	ldi	r22, 0x01	; 1
    114c:	85 e2       	ldi	r24, 0x25	; 37
    114e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    1152:	c3 e4       	ldi	r28, 0x43	; 67
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][1];}}
    1154:	80 e1       	ldi	r24, 0x10	; 16
    1156:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    115a:	81 11       	cpse	r24, r1
    115c:	18 c0       	rjmp	.+48     	; 0x118e <H_KeyPad_Read+0x36e>
    115e:	2f ef       	ldi	r18, 0xFF	; 255
    1160:	86 e7       	ldi	r24, 0x76	; 118
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	21 50       	subi	r18, 0x01	; 1
    1166:	80 40       	sbci	r24, 0x00	; 0
    1168:	90 40       	sbci	r25, 0x00	; 0
    116a:	e1 f7       	brne	.-8      	; 0x1164 <H_KeyPad_Read+0x344>
    116c:	00 c0       	rjmp	.+0      	; 0x116e <H_KeyPad_Read+0x34e>
    116e:	00 00       	nop
    1170:	80 e1       	ldi	r24, 0x10	; 16
    1172:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1176:	81 11       	cpse	r24, r1
    1178:	0a c0       	rjmp	.+20     	; 0x118e <H_KeyPad_Read+0x36e>
    117a:	80 e1       	ldi	r24, 0x10	; 16
    117c:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1180:	88 23       	and	r24, r24
    1182:	d9 f3       	breq	.-10     	; 0x117a <H_KeyPad_Read+0x35a>
    1184:	61 e0       	ldi	r22, 0x01	; 1
    1186:	85 e2       	ldi	r24, 0x25	; 37
    1188:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    118c:	c0 e3       	ldi	r28, 0x30	; 48
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][2];}}
    118e:	81 e1       	ldi	r24, 0x11	; 17
    1190:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    1194:	81 11       	cpse	r24, r1
    1196:	18 c0       	rjmp	.+48     	; 0x11c8 <H_KeyPad_Read+0x3a8>
    1198:	2f ef       	ldi	r18, 0xFF	; 255
    119a:	86 e7       	ldi	r24, 0x76	; 118
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	80 40       	sbci	r24, 0x00	; 0
    11a2:	90 40       	sbci	r25, 0x00	; 0
    11a4:	e1 f7       	brne	.-8      	; 0x119e <H_KeyPad_Read+0x37e>
    11a6:	00 c0       	rjmp	.+0      	; 0x11a8 <H_KeyPad_Read+0x388>
    11a8:	00 00       	nop
    11aa:	81 e1       	ldi	r24, 0x11	; 17
    11ac:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    11b0:	81 11       	cpse	r24, r1
    11b2:	0a c0       	rjmp	.+20     	; 0x11c8 <H_KeyPad_Read+0x3a8>
    11b4:	81 e1       	ldi	r24, 0x11	; 17
    11b6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    11ba:	88 23       	and	r24, r24
    11bc:	d9 f3       	breq	.-10     	; 0x11b4 <H_KeyPad_Read+0x394>
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	85 e2       	ldi	r24, 0x25	; 37
    11c2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    11c6:	cd e3       	ldi	r28, 0x3D	; 61
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][3];}}
    11c8:	87 e1       	ldi	r24, 0x17	; 23
    11ca:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    11ce:	81 11       	cpse	r24, r1
    11d0:	18 c0       	rjmp	.+48     	; 0x1202 <H_KeyPad_Read+0x3e2>
    11d2:	2f ef       	ldi	r18, 0xFF	; 255
    11d4:	86 e7       	ldi	r24, 0x76	; 118
    11d6:	91 e0       	ldi	r25, 0x01	; 1
    11d8:	21 50       	subi	r18, 0x01	; 1
    11da:	80 40       	sbci	r24, 0x00	; 0
    11dc:	90 40       	sbci	r25, 0x00	; 0
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <H_KeyPad_Read+0x3b8>
    11e0:	00 c0       	rjmp	.+0      	; 0x11e2 <H_KeyPad_Read+0x3c2>
    11e2:	00 00       	nop
    11e4:	87 e1       	ldi	r24, 0x17	; 23
    11e6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    11ea:	81 11       	cpse	r24, r1
    11ec:	0a c0       	rjmp	.+20     	; 0x1202 <H_KeyPad_Read+0x3e2>
    11ee:	87 e1       	ldi	r24, 0x17	; 23
    11f0:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
    11f4:	88 23       	and	r24, r24
    11f6:	d9 f3       	breq	.-10     	; 0x11ee <H_KeyPad_Read+0x3ce>
    11f8:	61 e0       	ldi	r22, 0x01	; 1
    11fa:	85 e2       	ldi	r24, 0x25	; 37
    11fc:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    1200:	cb e2       	ldi	r28, 0x2B	; 43
	
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	85 e2       	ldi	r24, 0x25	; 37
    1206:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	
	return Local_u8_KeypadReading ;
    120a:	8c 2f       	mov	r24, r28
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <H_Lcd_WriteCharacter>:
// 	#endif
// }


void H_Lcd_WriteCharacter	(u8 Local_u8_Character)
{
    1210:	cf 93       	push	r28
    1212:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	84 e1       	ldi	r24, 0x14	; 20
    1218:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	#elif		LCD_MODE	==	_4_BIT_MODE
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character & 0XF0);	
    121c:	88 b3       	in	r24, 0x18	; 24
    121e:	8f 70       	andi	r24, 0x0F	; 15
    1220:	9c 2f       	mov	r25, r28
    1222:	90 7f       	andi	r25, 0xF0	; 240
    1224:	89 2b       	or	r24, r25
    1226:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    1228:	61 e0       	ldi	r22, 0x01	; 1
    122a:	86 e1       	ldi	r24, 0x16	; 22
    122c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    1230:	8f e9       	ldi	r24, 0x9F	; 159
    1232:	9f e0       	ldi	r25, 0x0F	; 15
    1234:	01 97       	sbiw	r24, 0x01	; 1
    1236:	f1 f7       	brne	.-4      	; 0x1234 <H_Lcd_WriteCharacter+0x24>
    1238:	00 c0       	rjmp	.+0      	; 0x123a <H_Lcd_WriteCharacter+0x2a>
    123a:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	86 e1       	ldi	r24, 0x16	; 22
    1240:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character << 4);
    1244:	28 b3       	in	r18, 0x18	; 24
    1246:	30 e1       	ldi	r19, 0x10	; 16
    1248:	c3 9f       	mul	r28, r19
    124a:	c0 01       	movw	r24, r0
    124c:	11 24       	eor	r1, r1
    124e:	92 2f       	mov	r25, r18
    1250:	9f 70       	andi	r25, 0x0F	; 15
    1252:	89 2b       	or	r24, r25
    1254:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	86 e1       	ldi	r24, 0x16	; 22
    125a:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    125e:	8f e9       	ldi	r24, 0x9F	; 159
    1260:	9f e0       	ldi	r25, 0x0F	; 15
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	f1 f7       	brne	.-4      	; 0x1262 <H_Lcd_WriteCharacter+0x52>
    1266:	00 c0       	rjmp	.+0      	; 0x1268 <H_Lcd_WriteCharacter+0x58>
    1268:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    126a:	60 e0       	ldi	r22, 0x00	; 0
    126c:	86 e1       	ldi	r24, 0x16	; 22
    126e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	#endif 

	
}
    1272:	cf 91       	pop	r28
    1274:	08 95       	ret

00001276 <H_Lcd_WriteCommand>:
// 	#endif
// }


void H_Lcd_WriteCommand		(u8 Local_u8_Command)
{
    1276:	cf 93       	push	r28
    1278:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	84 e1       	ldi	r24, 0x14	; 20
    127e:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	
	#elif		LCD_MODE	==	_4_BIT_MODE
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command & 0XF0);
    1282:	88 b3       	in	r24, 0x18	; 24
    1284:	8f 70       	andi	r24, 0x0F	; 15
    1286:	9c 2f       	mov	r25, r28
    1288:	90 7f       	andi	r25, 0xF0	; 240
    128a:	89 2b       	or	r24, r25
    128c:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    128e:	61 e0       	ldi	r22, 0x01	; 1
    1290:	86 e1       	ldi	r24, 0x16	; 22
    1292:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    1296:	8f e9       	ldi	r24, 0x9F	; 159
    1298:	9f e0       	ldi	r25, 0x0F	; 15
    129a:	01 97       	sbiw	r24, 0x01	; 1
    129c:	f1 f7       	brne	.-4      	; 0x129a <H_Lcd_WriteCommand+0x24>
    129e:	00 c0       	rjmp	.+0      	; 0x12a0 <H_Lcd_WriteCommand+0x2a>
    12a0:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    12a2:	60 e0       	ldi	r22, 0x00	; 0
    12a4:	86 e1       	ldi	r24, 0x16	; 22
    12a6:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    12aa:	8f e1       	ldi	r24, 0x1F	; 31
    12ac:	9e e4       	ldi	r25, 0x4E	; 78
    12ae:	01 97       	sbiw	r24, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <H_Lcd_WriteCommand+0x38>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <H_Lcd_WriteCommand+0x3e>
    12b4:	00 00       	nop
	_delay_ms(5);

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command << 4);
    12b6:	28 b3       	in	r18, 0x18	; 24
    12b8:	30 e1       	ldi	r19, 0x10	; 16
    12ba:	c3 9f       	mul	r28, r19
    12bc:	c0 01       	movw	r24, r0
    12be:	11 24       	eor	r1, r1
    12c0:	92 2f       	mov	r25, r18
    12c2:	9f 70       	andi	r25, 0x0F	; 15
    12c4:	89 2b       	or	r24, r25
    12c6:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	86 e1       	ldi	r24, 0x16	; 22
    12cc:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    12d0:	8f e9       	ldi	r24, 0x9F	; 159
    12d2:	9f e0       	ldi	r25, 0x0F	; 15
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <H_Lcd_WriteCommand+0x5e>
    12d8:	00 c0       	rjmp	.+0      	; 0x12da <H_Lcd_WriteCommand+0x64>
    12da:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	86 e1       	ldi	r24, 0x16	; 22
    12e0:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    12e4:	8f e1       	ldi	r24, 0x1F	; 31
    12e6:	9e e4       	ldi	r25, 0x4E	; 78
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	f1 f7       	brne	.-4      	; 0x12e8 <H_Lcd_WriteCommand+0x72>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <H_Lcd_WriteCommand+0x78>
    12ee:	00 00       	nop
	_delay_ms(5);
	#endif

}
    12f0:	cf 91       	pop	r28
    12f2:	08 95       	ret

000012f4 <H_Lcd_Init>:
	M_Dio_PinMode(LCD_DATA_1_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_2_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_3_PIN,OUTPUT);
	#elif	LCD_MODE	==	_4_BIT_MODE
	#endif
	M_Dio_PinMode(LCD_DATA_4_PIN,OUTPUT);
    12f4:	61 e0       	ldi	r22, 0x01	; 1
    12f6:	88 e1       	ldi	r24, 0x18	; 24
    12f8:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_5_PIN,OUTPUT);
    12fc:	61 e0       	ldi	r22, 0x01	; 1
    12fe:	89 e1       	ldi	r24, 0x19	; 25
    1300:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_6_PIN,OUTPUT);
    1304:	61 e0       	ldi	r22, 0x01	; 1
    1306:	8a e1       	ldi	r24, 0x1A	; 26
    1308:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_7_PIN,OUTPUT);
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	8b e1       	ldi	r24, 0x1B	; 27
    1310:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
    1314:	61 e0       	ldi	r22, 0x01	; 1
    1316:	84 e1       	ldi	r24, 0x14	; 20
    1318:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
    131c:	61 e0       	ldi	r22, 0x01	; 1
    131e:	85 e1       	ldi	r24, 0x15	; 21
    1320:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);	
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	86 e1       	ldi	r24, 0x16	; 22
    1328:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
    132c:	2f ef       	ldi	r18, 0xFF	; 255
    132e:	83 ed       	ldi	r24, 0xD3	; 211
    1330:	90 e3       	ldi	r25, 0x30	; 48
    1332:	21 50       	subi	r18, 0x01	; 1
    1334:	80 40       	sbci	r24, 0x00	; 0
    1336:	90 40       	sbci	r25, 0x00	; 0
    1338:	e1 f7       	brne	.-8      	; 0x1332 <H_Lcd_Init+0x3e>
    133a:	00 c0       	rjmp	.+0      	; 0x133c <H_Lcd_Init+0x48>
    133c:	00 00       	nop
	_delay_ms(1000);
	
	#if			LCD_MODE	==	_8_BIT_MODE	
	H_Lcd_WriteCommand(LCD_CMD_SELECT_8_BIT_MODE);				// to select 8 bit mode
	#elif		LCD_MODE	==	_4_BIT_MODE	
	H_Lcd_WriteCommand(0X33);
    133e:	83 e3       	ldi	r24, 0x33	; 51
    1340:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0X32);
    1344:	82 e3       	ldi	r24, 0x32	; 50
    1346:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_SELECT_4_BIT_MODE);				// to select 4 bit mode
    134a:	88 e2       	ldi	r24, 0x28	; 40
    134c:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
	#endif		
	H_Lcd_WriteCommand(LCD_CMD_DISPLAY_ON_CURSOR_OFF);			// to Display ON, cursor OFF
    1350:	8c e0       	ldi	r24, 0x0C	; 12
    1352:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);							// to clear LCD
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_RETURN_HOME);					// to return home
    135c:	82 e0       	ldi	r24, 0x02	; 2
    135e:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
    1362:	08 95       	ret

00001364 <H_Lcd_WriteNumber>:
// 	_delay_ms(5);
// 	#endif
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
    1364:	3f 92       	push	r3
    1366:	4f 92       	push	r4
    1368:	5f 92       	push	r5
    136a:	6f 92       	push	r6
    136c:	7f 92       	push	r7
    136e:	8f 92       	push	r8
    1370:	9f 92       	push	r9
    1372:	af 92       	push	r10
    1374:	bf 92       	push	r11
    1376:	cf 92       	push	r12
    1378:	df 92       	push	r13
    137a:	ef 92       	push	r14
    137c:	ff 92       	push	r15
    137e:	0f 93       	push	r16
    1380:	1f 93       	push	r17
    1382:	cf 93       	push	r28
    1384:	df 93       	push	r29
    1386:	00 d0       	rcall	.+0      	; 0x1388 <H_Lcd_WriteNumber+0x24>
    1388:	00 d0       	rcall	.+0      	; 0x138a <H_Lcd_WriteNumber+0x26>
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62
    138e:	4b 01       	movw	r8, r22
    1390:	5c 01       	movw	r10, r24
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    1392:	2d b7       	in	r18, 0x3d	; 61
    1394:	3e b7       	in	r19, 0x3e	; 62
    1396:	3a 83       	std	Y+2, r19	; 0x02
    1398:	29 83       	std	Y+1, r18	; 0x01
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
 	s32 check_reminder = Local_s32_Number;
 	if (Local_s32_Number == 0)
    139a:	67 2b       	or	r22, r23
    139c:	68 2b       	or	r22, r24
    139e:	69 2b       	or	r22, r25
    13a0:	19 f4       	brne	.+6      	; 0x13a8 <H_Lcd_WriteNumber+0x44>
 	{
 		H_Lcd_WriteCharacter('0');
    13a2:	80 e3       	ldi	r24, 0x30	; 48
    13a4:	0e 94 08 09 	call	0x1210	; 0x1210 <H_Lcd_WriteCharacter>
 	}
 	check_reminder*=1000;
    13a8:	a8 ee       	ldi	r26, 0xE8	; 232
    13aa:	b3 e0       	ldi	r27, 0x03	; 3
    13ac:	a5 01       	movw	r20, r10
    13ae:	94 01       	movw	r18, r8
    13b0:	0e 94 df 10 	call	0x21be	; 0x21be <__muluhisi3>
 	
 	if ((check_reminder % 1000)== 0)
    13b4:	28 ee       	ldi	r18, 0xE8	; 232
    13b6:	33 e0       	ldi	r19, 0x03	; 3
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	0e 94 ab 10 	call	0x2156	; 0x2156 <__divmodsi4>
    13c0:	67 2b       	or	r22, r23
    13c2:	68 2b       	or	r22, r24
    13c4:	69 2b       	or	r22, r25
    13c6:	09 f0       	breq	.+2      	; 0x13ca <H_Lcd_WriteNumber+0x66>
    13c8:	8e c0       	rjmp	.+284    	; 0x14e6 <H_Lcd_WriteNumber+0x182>
 	{
 		if (Local_s32_Number < 0)
    13ca:	bb 20       	and	r11, r11
    13cc:	5c f4       	brge	.+22     	; 0x13e4 <H_Lcd_WriteNumber+0x80>
 		{
 		
 			H_Lcd_WriteCharacter('-');
    13ce:	8d e2       	ldi	r24, 0x2D	; 45
    13d0:	0e 94 08 09 	call	0x1210	; 0x1210 <H_Lcd_WriteCharacter>
 			Local_s32_Number = Local_s32_Number * -1;
    13d4:	b0 94       	com	r11
    13d6:	a0 94       	com	r10
    13d8:	90 94       	com	r9
    13da:	80 94       	com	r8
    13dc:	81 1c       	adc	r8, r1
    13de:	91 1c       	adc	r9, r1
    13e0:	a1 1c       	adc	r10, r1
    13e2:	b1 1c       	adc	r11, r1
 		}
 		if (Local_s32_Number > 0)
    13e4:	18 14       	cp	r1, r8
    13e6:	19 04       	cpc	r1, r9
    13e8:	1a 04       	cpc	r1, r10
    13ea:	1b 04       	cpc	r1, r11
    13ec:	0c f0       	brlt	.+2      	; 0x13f0 <H_Lcd_WriteNumber+0x8c>
    13ee:	7b c0       	rjmp	.+246    	; 0x14e6 <H_Lcd_WriteNumber+0x182>
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
    13f0:	a5 01       	movw	r20, r10
    13f2:	94 01       	movw	r18, r8
 			u8  Local_u8_DigitCounter = 0;
    13f4:	31 2c       	mov	r3, r1
 			while (Local_u32_Printed_Number)
    13f6:	0e c0       	rjmp	.+28     	; 0x1414 <H_Lcd_WriteNumber+0xb0>
 			{
 				if (Local_u32_Printed_Number)
    13f8:	21 15       	cp	r18, r1
    13fa:	31 05       	cpc	r19, r1
    13fc:	41 05       	cpc	r20, r1
    13fe:	51 05       	cpc	r21, r1
    1400:	49 f0       	breq	.+18     	; 0x1414 <H_Lcd_WriteNumber+0xb0>
 				{
 					Local_u32_Printed_Number/= 10;
    1402:	ca 01       	movw	r24, r20
    1404:	b9 01       	movw	r22, r18
    1406:	2a e0       	ldi	r18, 0x0A	; 10
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	50 e0       	ldi	r21, 0x00	; 0
    140e:	0e 94 89 10 	call	0x2112	; 0x2112 <__udivmodsi4>
 					Local_u8_DigitCounter++;
    1412:	33 94       	inc	r3
 		}
 		if (Local_s32_Number > 0)
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
 			u8  Local_u8_DigitCounter = 0;
 			while (Local_u32_Printed_Number)
    1414:	21 15       	cp	r18, r1
    1416:	31 05       	cpc	r19, r1
    1418:	41 05       	cpc	r20, r1
    141a:	51 05       	cpc	r21, r1
    141c:	69 f7       	brne	.-38     	; 0x13f8 <H_Lcd_WriteNumber+0x94>
 					Local_u32_Printed_Number/= 10;
 					Local_u8_DigitCounter++;
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
    141e:	8d b7       	in	r24, 0x3d	; 61
    1420:	9e b7       	in	r25, 0x3e	; 62
    1422:	9c 83       	std	Y+4, r25	; 0x04
    1424:	8b 83       	std	Y+3, r24	; 0x03
    1426:	83 2d       	mov	r24, r3
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	2d b7       	in	r18, 0x3d	; 61
    1434:	3e b7       	in	r19, 0x3e	; 62
    1436:	28 1b       	sub	r18, r24
    1438:	39 0b       	sbc	r19, r25
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	3e bf       	out	0x3e, r19	; 62
    1440:	0f be       	out	0x3f, r0	; 63
    1442:	2d bf       	out	0x3d, r18	; 61
    1444:	0d b7       	in	r16, 0x3d	; 61
    1446:	1e b7       	in	r17, 0x3e	; 62
    1448:	0f 5f       	subi	r16, 0xFF	; 255
    144a:	1f 4f       	sbci	r17, 0xFF	; 255
 			u32 Local_u8_ArrCounter = 0;
    144c:	41 2c       	mov	r4, r1
    144e:	51 2c       	mov	r5, r1
    1450:	32 01       	movw	r6, r4
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    1452:	20 c0       	rjmp	.+64     	; 0x1494 <H_Lcd_WriteNumber+0x130>
 			{
 				Local_u8_ArrCounter ++;
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	43 1a       	sub	r4, r19
    1458:	53 0a       	sbc	r5, r19
    145a:	63 0a       	sbc	r6, r19
    145c:	73 0a       	sbc	r7, r19
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
    145e:	c4 18       	sub	r12, r4
    1460:	d5 08       	sbc	r13, r5
    1462:	e6 08       	sbc	r14, r6
    1464:	f7 08       	sbc	r15, r7
    1466:	c5 01       	movw	r24, r10
    1468:	b4 01       	movw	r22, r8
    146a:	2a e0       	ldi	r18, 0x0A	; 10
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e0       	ldi	r20, 0x00	; 0
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	0e 94 ab 10 	call	0x2156	; 0x2156 <__divmodsi4>
    1476:	cc 0c       	add	r12, r12
    1478:	dd 1c       	adc	r13, r13
    147a:	cc 0c       	add	r12, r12
    147c:	dd 1c       	adc	r13, r13
    147e:	f8 01       	movw	r30, r16
    1480:	ec 0d       	add	r30, r12
    1482:	fd 1d       	adc	r31, r13
    1484:	60 83       	st	Z, r22
    1486:	71 83       	std	Z+1, r23	; 0x01
    1488:	82 83       	std	Z+2, r24	; 0x02
    148a:	93 83       	std	Z+3, r25	; 0x03
 				Local_s32_Number /= 10;
    148c:	82 2e       	mov	r8, r18
    148e:	93 2e       	mov	r9, r19
    1490:	a4 2e       	mov	r10, r20
    1492:	b5 2e       	mov	r11, r21
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
 			u32 Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    1494:	c3 2c       	mov	r12, r3
    1496:	d1 2c       	mov	r13, r1
    1498:	e1 2c       	mov	r14, r1
    149a:	f1 2c       	mov	r15, r1
    149c:	4c 14       	cp	r4, r12
    149e:	5d 04       	cpc	r5, r13
    14a0:	6e 04       	cpc	r6, r14
    14a2:	7f 04       	cpc	r7, r15
    14a4:	b8 f2       	brcs	.-82     	; 0x1454 <H_Lcd_WriteNumber+0xf0>
    14a6:	81 2c       	mov	r8, r1
    14a8:	91 2c       	mov	r9, r1
    14aa:	54 01       	movw	r10, r8
    14ac:	10 c0       	rjmp	.+32     	; 0x14ce <H_Lcd_WriteNumber+0x16a>
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
 			{
 				H_Lcd_WriteCharacter(arr[Local_u8_ArrCounter]+48);
    14ae:	f4 01       	movw	r30, r8
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	ee 0f       	add	r30, r30
    14b6:	ff 1f       	adc	r31, r31
    14b8:	e0 0f       	add	r30, r16
    14ba:	f1 1f       	adc	r31, r17
    14bc:	80 81       	ld	r24, Z
    14be:	80 5d       	subi	r24, 0xD0	; 208
    14c0:	0e 94 08 09 	call	0x1210	; 0x1210 <H_Lcd_WriteCharacter>
 				Local_u8_ArrCounter++;
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	88 1a       	sub	r8, r24
    14c8:	98 0a       	sbc	r9, r24
    14ca:	a8 0a       	sbc	r10, r24
    14cc:	b8 0a       	sbc	r11, r24
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
 				Local_s32_Number /= 10;
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    14ce:	8c 14       	cp	r8, r12
    14d0:	9d 04       	cpc	r9, r13
    14d2:	ae 04       	cpc	r10, r14
    14d4:	bf 04       	cpc	r11, r15
    14d6:	58 f3       	brcs	.-42     	; 0x14ae <H_Lcd_WriteNumber+0x14a>
    14d8:	2b 81       	ldd	r18, Y+3	; 0x03
    14da:	3c 81       	ldd	r19, Y+4	; 0x04
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	3e bf       	out	0x3e, r19	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	2d bf       	out	0x3d, r18	; 61
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	9e bf       	out	0x3e, r25	; 62
    14f0:	0f be       	out	0x3f, r0	; 63
    14f2:	8d bf       	out	0x3d, r24	; 61
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	df 91       	pop	r29
    14fe:	cf 91       	pop	r28
    1500:	1f 91       	pop	r17
    1502:	0f 91       	pop	r16
    1504:	ff 90       	pop	r15
    1506:	ef 90       	pop	r14
    1508:	df 90       	pop	r13
    150a:	cf 90       	pop	r12
    150c:	bf 90       	pop	r11
    150e:	af 90       	pop	r10
    1510:	9f 90       	pop	r9
    1512:	8f 90       	pop	r8
    1514:	7f 90       	pop	r7
    1516:	6f 90       	pop	r6
    1518:	5f 90       	pop	r5
    151a:	4f 90       	pop	r4
    151c:	3f 90       	pop	r3
    151e:	08 95       	ret

00001520 <H_Lcd_GoTo>:
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
	H_Lcd_GoTo(0,0);
}

void H_Lcd_GoTo	(u8 Local_u8_Row,u8 Local_u8_Coloumn )
{
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	00 d0       	rcall	.+0      	; 0x1526 <H_Lcd_GoTo+0x6>
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	u8 arr [2] = {LCD_CMD_FIRST_ROW, LCD_CMD_SECOND_ROW};
    152a:	90 e8       	ldi	r25, 0x80	; 128
    152c:	99 83       	std	Y+1, r25	; 0x01
    152e:	90 ec       	ldi	r25, 0xC0	; 192
    1530:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
    1532:	e1 e0       	ldi	r30, 0x01	; 1
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	ec 0f       	add	r30, r28
    1538:	fd 1f       	adc	r31, r29
    153a:	e8 0f       	add	r30, r24
    153c:	f1 1d       	adc	r31, r1
    153e:	80 81       	ld	r24, Z
    1540:	86 0f       	add	r24, r22
    1542:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
	
}
    1546:	0f 90       	pop	r0
    1548:	0f 90       	pop	r0
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	08 95       	ret

00001550 <H_Lcd_Clear>:
// }

void H_Lcd_Clear (void)
{
	
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	0e 94 3b 09 	call	0x1276	; 0x1276 <H_Lcd_WriteCommand>
	H_Lcd_GoTo(0,0);
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
    155e:	08 95       	ret

00001560 <H_Lcd_WriteString>:
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
	
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
    1560:	0f 93       	push	r16
    1562:	1f 93       	push	r17
    1564:	cf 93       	push	r28
    1566:	8c 01       	movw	r16, r24
	u8 Local_u8_Counter = 0;
    1568:	c0 e0       	ldi	r28, 0x00	; 0
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    156a:	09 c0       	rjmp	.+18     	; 0x157e <H_Lcd_WriteString+0x1e>
	{
		H_Lcd_WriteCharacter(Local_u8_PtrToString[Local_u8_Counter]);
    156c:	0e 94 08 09 	call	0x1210	; 0x1210 <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
    1570:	cf 5f       	subi	r28, 0xFF	; 255
		if (Local_u8_Counter == 16)
    1572:	c0 31       	cpi	r28, 0x10	; 16
    1574:	21 f4       	brne	.+8      	; 0x157e <H_Lcd_WriteString+0x1e>
		{
			H_Lcd_GoTo(1,0);
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	0e 94 90 0a 	call	0x1520	; 0x1520 <H_Lcd_GoTo>
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
	u8 Local_u8_Counter = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    157e:	f8 01       	movw	r30, r16
    1580:	ec 0f       	add	r30, r28
    1582:	f1 1d       	adc	r31, r1
    1584:	80 81       	ld	r24, Z
    1586:	81 11       	cpse	r24, r1
    1588:	f1 cf       	rjmp	.-30     	; 0x156c <H_Lcd_WriteString+0xc>
		if (Local_u8_Counter == 16)
		{
			H_Lcd_GoTo(1,0);
		}
	}
    158a:	cf 91       	pop	r28
    158c:	1f 91       	pop	r17
    158e:	0f 91       	pop	r16
    1590:	08 95       	ret

00001592 <H_Led_Init>:

#include "Led.h"

void	H_Led_Init(u8 Local_u8_Led_Number)
{	
	M_Dio_PinMode(Local_u8_Led_Number,OUTPUT);		
    1592:	61 e0       	ldi	r22, 0x01	; 1
    1594:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
    1598:	08 95       	ret

0000159a <H_Led_On>:
}

void	H_Led_On(u8 Local_u8_Led_Number)
{
	M_Dio_PinWrite(Local_u8_Led_Number,HIGH);
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    15a0:	08 95       	ret

000015a2 <H_Led_Off>:
}

void H_Led_Off(u8 Local_u8_Led_Number)
{
	M_Dio_PinWrite(Local_u8_Led_Number,LOW);
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    15a8:	08 95       	ret

000015aa <H_Lm35_Init>:

#include "Lm35.h"

void H_Lm35_Init				(void)
{
	M_Adc_Init();
    15aa:	0e 94 21 0b 	call	0x1642	; 0x1642 <M_Adc_Init>
    15ae:	08 95       	ret

000015b0 <H_Lm35_Read>:
}
u16  H_Lm35_Read				(void)
{
	u16 Local_u16_ADCReading	=	M_Adc_Read();
    15b0:	0e 94 4d 0b 	call	0x169a	; 0x169a <M_Adc_Read>
	u16 Local_u16_Temp			=	(((u32)Local_u16_ADCReading * 500)/1023);
    15b4:	9c 01       	movw	r18, r24
    15b6:	a4 ef       	ldi	r26, 0xF4	; 244
    15b8:	b1 e0       	ldi	r27, 0x01	; 1
    15ba:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__umulhisi3>
    15be:	2f ef       	ldi	r18, 0xFF	; 255
    15c0:	33 e0       	ldi	r19, 0x03	; 3
    15c2:	40 e0       	ldi	r20, 0x00	; 0
    15c4:	50 e0       	ldi	r21, 0x00	; 0
    15c6:	0e 94 89 10 	call	0x2112	; 0x2112 <__udivmodsi4>
	return Local_u16_Temp;
    15ca:	c9 01       	movw	r24, r18
    15cc:	08 95       	ret

000015ce <H_PushButton_Init>:
*/

#include "PushButton.h"
void H_PushButton_Init(void)
{
	M_Dio_PinMode(PUSH_BUTTON_PIN,INPUT);
    15ce:	60 e0       	ldi	r22, 0x00	; 0
    15d0:	8a e2       	ldi	r24, 0x2A	; 42
    15d2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
    15d6:	08 95       	ret

000015d8 <H_PushButton_Read>:
}
u8   H_PushButton_Read(void)
{
	u8 Local_u8_Reading = 0;
	   Local_u8_Reading = M_Dio_PinRead(PUSH_BUTTON_PIN);
    15d8:	8a e2       	ldi	r24, 0x2A	; 42
    15da:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <M_Dio_PinRead>
	return Local_u8_Reading;
    15de:	08 95       	ret

000015e0 <H_Relay_Init>:

#include "Relay.h"

void	H_Relay_Init		(void)
{
	M_Dio_PinMode(RELAY_PIN,OUTPUT);	
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	8e e0       	ldi	r24, 0x0E	; 14
    15e4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
    15e8:	08 95       	ret

000015ea <H_Relay_On>:
}

void	H_Relay_On			(void)
{
	M_Dio_PinWrite(RELAY_PIN,HIGH);
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	8e e0       	ldi	r24, 0x0E	; 14
    15ee:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    15f2:	08 95       	ret

000015f4 <H_Relay_Off>:
}

void	H_Relay_Off		    (void)
{
	M_Dio_PinWrite(RELAY_PIN,LOW);
    15f4:	60 e0       	ldi	r22, 0x00	; 0
    15f6:	8e e0       	ldi	r24, 0x0E	; 14
    15f8:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <M_Dio_PinWrite>
    15fc:	08 95       	ret

000015fe <H_Servo_Init>:
	so I initialized an output pwm signal with frequency 50 hz
*/
void H_Servo_Init		(void)
{
	/*To Set Control Pin as Output*/
	M_Dio_PinMode(SERVO_OUTPUT_PIN, OUTPUT);
    15fe:	61 e0       	ldi	r22, 0x01	; 1
    1600:	8d e2       	ldi	r24, 0x2D	; 45
    1602:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	
	/*To initialize PWM*/
	M_Pwm1_Init();
    1606:	0e 94 bf 0d 	call	0x1b7e	; 0x1b7e <M_Pwm1_Init>
		
	/*To set working Frequency*/
	M_Pwm1_SetFrequency(50);
    160a:	82 e3       	ldi	r24, 0x32	; 50
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <M_Pwm1_SetFrequency>
    1612:	08 95       	ret

00001614 <H_Servo_SetAngel>:
/*To set desired angel for the servo step, Servo usually works from 5% to 10% duty cycle so I mapped 0-180 degrees to 5%-10% */
void H_Servo_SetAngel	(f32 Local_f32_DesiredAngel)
{
	/*scaling from 180 degrees to 5 to 10 Percents*/
 	
	Local_f32_DesiredAngel *= 5;
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 ea       	ldi	r20, 0xA0	; 160
    161a:	50 e4       	ldi	r21, 0x40	; 64
    161c:	0e 94 08 10 	call	0x2010	; 0x2010 <__mulsf3>
 	Local_f32_DesiredAngel /= 180;
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	44 e3       	ldi	r20, 0x34	; 52
    1626:	53 e4       	ldi	r21, 0x43	; 67
    1628:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__divsf3>
	Local_f32_DesiredAngel += 5;
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 ea       	ldi	r20, 0xA0	; 160
    1632:	50 e4       	ldi	r21, 0x40	; 64
    1634:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <__addsf3>
	 
	/*to set PWM Duty Cycle*/
 	M_Pwm1_SetDutyCycle(Local_f32_DesiredAngel);
    1638:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <M_Pwm1_SetDutyCycle>
	 
	/*To start the clock*/
 	M_Pwm1_Start();
    163c:	0e 94 0f 0e 	call	0x1c1e	; 0x1c1e <M_Pwm1_Start>
    1640:	08 95       	ret

00001642 <M_Adc_Init>:
void (* Adc_void_CallBack) (void);

void M_Adc_Init (void)
{
	
	M_Dio_PinMode(PA1, INPUT);
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	8b e0       	ldi	r24, 0x0B	; 11
    1646:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
	/* Step 1	->		Set Voltage Reference  */
	#if			VOLTAGE_REFERENCE		==		AREF
	ClrBit(ADMUX,REF0);
	ClrBit(ADMUX,REF1);
	#elif		VOLTAGE_REFERENCE		==		AVCC
	SetBit(ADMUX,REF0);
    164a:	87 b1       	in	r24, 0x07	; 7
    164c:	80 64       	ori	r24, 0x40	; 64
    164e:	87 b9       	out	0x07, r24	; 7
	ClrBit(ADMUX,REF1);
    1650:	87 b1       	in	r24, 0x07	; 7
    1652:	8f 77       	andi	r24, 0x7F	; 127
    1654:	87 b9       	out	0x07, r24	; 7
	SetBit(ADMUX,REF1);
	#endif
	
	/* Step 2	->		Set Left Adjust Result  */
	#if			LEFT_ADJUST_RESULT		==		RIGHT_ADJUST
	ClrBit(ADMUX,ADLAR);
    1656:	87 b1       	in	r24, 0x07	; 7
    1658:	8f 7d       	andi	r24, 0xDF	; 223
    165a:	87 b9       	out	0x07, r24	; 7
	#elif		LEFT_ADJUST_RESULT		==		LEFT_ADJUST
	SetBit(ADMUX,ADLAR);
	#endif				
	
	/* Step 3	->		Set Pin Used  */
	ClrBit(ADMUX,MUX4); ClrBit(ADMUX,MUX3); ClrBit(ADMUX,MUX2); ClrBit(ADMUX,MUX1); ClrBit(ADMUX,MUX0);
    165c:	87 b1       	in	r24, 0x07	; 7
    165e:	8f 7e       	andi	r24, 0xEF	; 239
    1660:	87 b9       	out	0x07, r24	; 7
    1662:	87 b1       	in	r24, 0x07	; 7
    1664:	87 7f       	andi	r24, 0xF7	; 247
    1666:	87 b9       	out	0x07, r24	; 7
    1668:	87 b1       	in	r24, 0x07	; 7
    166a:	8b 7f       	andi	r24, 0xFB	; 251
    166c:	87 b9       	out	0x07, r24	; 7
    166e:	87 b1       	in	r24, 0x07	; 7
    1670:	8d 7f       	andi	r24, 0xFD	; 253
    1672:	87 b9       	out	0x07, r24	; 7
    1674:	87 b1       	in	r24, 0x07	; 7
    1676:	8e 7f       	andi	r24, 0xFE	; 254
    1678:	87 b9       	out	0x07, r24	; 7
	
	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_64	
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	ClrBit(ADCSRA,ADPS0);

	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_128
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	SetBit(ADCSRA,ADPS0);
    167a:	86 b1       	in	r24, 0x06	; 6
    167c:	84 60       	ori	r24, 0x04	; 4
    167e:	86 b9       	out	0x06, r24	; 6
    1680:	86 b1       	in	r24, 0x06	; 6
    1682:	82 60       	ori	r24, 0x02	; 2
    1684:	86 b9       	out	0x06, r24	; 6
    1686:	86 b1       	in	r24, 0x06	; 6
    1688:	81 60       	ori	r24, 0x01	; 1
    168a:	86 b9       	out	0x06, r24	; 6
	#endif



	/* Step 5	->		set ADC Enable */
	SetBit(ADCSRA,ADEN);
    168c:	86 b1       	in	r24, 0x06	; 6
    168e:	80 68       	ori	r24, 0x80	; 128
    1690:	86 b9       	out	0x06, r24	; 6
	
	SetBit(ADCSRA,ADATE);
    1692:	86 b1       	in	r24, 0x06	; 6
    1694:	80 62       	ori	r24, 0x20	; 32
    1696:	86 b9       	out	0x06, r24	; 6
    1698:	08 95       	ret

0000169a <M_Adc_Read>:
}

u16 M_Adc_Read(void)
{
	u16 Local_u16_Data = 0;
	SetBit(ADCSRA,ADSC);
    169a:	86 b1       	in	r24, 0x06	; 6
    169c:	80 64       	ori	r24, 0x40	; 64
    169e:	86 b9       	out	0x06, r24	; 6
	while(GetBit(ADCSRA,ADIF) == 0);
    16a0:	34 9b       	sbis	0x06, 4	; 6
    16a2:	fe cf       	rjmp	.-4      	; 0x16a0 <M_Adc_Read+0x6>
	
	Local_u16_Data = (ADCL + (ADCH<<8));
    16a4:	24 b1       	in	r18, 0x04	; 4
    16a6:	85 b1       	in	r24, 0x05	; 5
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	98 2f       	mov	r25, r24
    16ac:	88 27       	eor	r24, r24
	
	//Local_u16_Data = ADCH;
	//ClrBit(ADCSRA,ADIF);
		
	return Local_u16_Data;
}
    16ae:	82 0f       	add	r24, r18
    16b0:	91 1d       	adc	r25, r1
    16b2:	08 95       	ret

000016b4 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin);		break;
		case 2: TogBit(PORTB,Local_u8_Pin);		break;
		case 3: TogBit(PORTC,Local_u8_Pin);		break;
		case 4: TogBit(PORTD,Local_u8_Pin);		break;
    16b4:	9d ec       	ldi	r25, 0xCD	; 205
    16b6:	89 9f       	mul	r24, r25
    16b8:	91 2d       	mov	r25, r1
    16ba:	11 24       	eor	r1, r1
    16bc:	29 2f       	mov	r18, r25
    16be:	26 95       	lsr	r18
    16c0:	26 95       	lsr	r18
    16c2:	26 95       	lsr	r18
    16c4:	22 0f       	add	r18, r18
    16c6:	32 2f       	mov	r19, r18
    16c8:	33 0f       	add	r19, r19
    16ca:	33 0f       	add	r19, r19
    16cc:	23 0f       	add	r18, r19
    16ce:	82 1b       	sub	r24, r18
    16d0:	28 2f       	mov	r18, r24
    16d2:	96 95       	lsr	r25
    16d4:	96 95       	lsr	r25
    16d6:	96 95       	lsr	r25
    16d8:	66 23       	and	r22, r22
    16da:	19 f0       	breq	.+6      	; 0x16e2 <M_Dio_PinMode+0x2e>
    16dc:	61 30       	cpi	r22, 0x01	; 1
    16de:	e1 f1       	breq	.+120    	; 0x1758 <M_Dio_PinMode+0xa4>
    16e0:	08 95       	ret
    16e2:	92 30       	cpi	r25, 0x02	; 2
    16e4:	a9 f0       	breq	.+42     	; 0x1710 <M_Dio_PinMode+0x5c>
    16e6:	18 f4       	brcc	.+6      	; 0x16ee <M_Dio_PinMode+0x3a>
    16e8:	91 30       	cpi	r25, 0x01	; 1
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <M_Dio_PinMode+0x44>
    16ec:	08 95       	ret
    16ee:	93 30       	cpi	r25, 0x03	; 3
    16f0:	d9 f0       	breq	.+54     	; 0x1728 <M_Dio_PinMode+0x74>
    16f2:	94 30       	cpi	r25, 0x04	; 4
    16f4:	29 f1       	breq	.+74     	; 0x1740 <M_Dio_PinMode+0x8c>
    16f6:	08 95       	ret
    16f8:	3a b3       	in	r19, 0x1a	; 26
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <M_Dio_PinMode+0x50>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	2a 95       	dec	r18
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <M_Dio_PinMode+0x4c>
    1708:	80 95       	com	r24
    170a:	83 23       	and	r24, r19
    170c:	8a bb       	out	0x1a, r24	; 26
    170e:	08 95       	ret
    1710:	37 b3       	in	r19, 0x17	; 23
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	02 c0       	rjmp	.+4      	; 0x171c <M_Dio_PinMode+0x68>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	2a 95       	dec	r18
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <M_Dio_PinMode+0x64>
    1720:	80 95       	com	r24
    1722:	83 23       	and	r24, r19
    1724:	87 bb       	out	0x17, r24	; 23
    1726:	08 95       	ret
    1728:	34 b3       	in	r19, 0x14	; 20
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <M_Dio_PinMode+0x80>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	2a 95       	dec	r18
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <M_Dio_PinMode+0x7c>
    1738:	80 95       	com	r24
    173a:	83 23       	and	r24, r19
    173c:	84 bb       	out	0x14, r24	; 20
    173e:	08 95       	ret
    1740:	31 b3       	in	r19, 0x11	; 17
    1742:	81 e0       	ldi	r24, 0x01	; 1
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	02 c0       	rjmp	.+4      	; 0x174c <M_Dio_PinMode+0x98>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	2a 95       	dec	r18
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <M_Dio_PinMode+0x94>
    1750:	80 95       	com	r24
    1752:	83 23       	and	r24, r19
    1754:	81 bb       	out	0x11, r24	; 17
    1756:	08 95       	ret
    1758:	92 30       	cpi	r25, 0x02	; 2
    175a:	a1 f0       	breq	.+40     	; 0x1784 <M_Dio_PinMode+0xd0>
    175c:	18 f4       	brcc	.+6      	; 0x1764 <M_Dio_PinMode+0xb0>
    175e:	91 30       	cpi	r25, 0x01	; 1
    1760:	31 f0       	breq	.+12     	; 0x176e <M_Dio_PinMode+0xba>
    1762:	08 95       	ret
    1764:	93 30       	cpi	r25, 0x03	; 3
    1766:	c9 f0       	breq	.+50     	; 0x179a <M_Dio_PinMode+0xe6>
    1768:	94 30       	cpi	r25, 0x04	; 4
    176a:	11 f1       	breq	.+68     	; 0x17b0 <M_Dio_PinMode+0xfc>
    176c:	08 95       	ret
    176e:	3a b3       	in	r19, 0x1a	; 26
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <M_Dio_PinMode+0xc6>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	2a 95       	dec	r18
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <M_Dio_PinMode+0xc2>
    177e:	83 2b       	or	r24, r19
    1780:	8a bb       	out	0x1a, r24	; 26
    1782:	08 95       	ret
    1784:	37 b3       	in	r19, 0x17	; 23
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <M_Dio_PinMode+0xdc>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	2a 95       	dec	r18
    1792:	e2 f7       	brpl	.-8      	; 0x178c <M_Dio_PinMode+0xd8>
    1794:	83 2b       	or	r24, r19
    1796:	87 bb       	out	0x17, r24	; 23
    1798:	08 95       	ret
    179a:	34 b3       	in	r19, 0x14	; 20
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <M_Dio_PinMode+0xf2>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	2a 95       	dec	r18
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <M_Dio_PinMode+0xee>
    17aa:	83 2b       	or	r24, r19
    17ac:	84 bb       	out	0x14, r24	; 20
    17ae:	08 95       	ret
    17b0:	31 b3       	in	r19, 0x11	; 17
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <M_Dio_PinMode+0x108>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	2a 95       	dec	r18
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <M_Dio_PinMode+0x104>
    17c0:	83 2b       	or	r24, r19
    17c2:	81 bb       	out	0x11, r24	; 17
    17c4:	08 95       	ret

000017c6 <M_Dio_PinWrite>:
    17c6:	9d ec       	ldi	r25, 0xCD	; 205
    17c8:	89 9f       	mul	r24, r25
    17ca:	91 2d       	mov	r25, r1
    17cc:	11 24       	eor	r1, r1
    17ce:	29 2f       	mov	r18, r25
    17d0:	26 95       	lsr	r18
    17d2:	26 95       	lsr	r18
    17d4:	26 95       	lsr	r18
    17d6:	22 0f       	add	r18, r18
    17d8:	32 2f       	mov	r19, r18
    17da:	33 0f       	add	r19, r19
    17dc:	33 0f       	add	r19, r19
    17de:	23 0f       	add	r18, r19
    17e0:	82 1b       	sub	r24, r18
    17e2:	28 2f       	mov	r18, r24
    17e4:	96 95       	lsr	r25
    17e6:	96 95       	lsr	r25
    17e8:	96 95       	lsr	r25
    17ea:	66 23       	and	r22, r22
    17ec:	19 f0       	breq	.+6      	; 0x17f4 <M_Dio_PinWrite+0x2e>
    17ee:	61 30       	cpi	r22, 0x01	; 1
    17f0:	e1 f1       	breq	.+120    	; 0x186a <M_Dio_PinWrite+0xa4>
    17f2:	08 95       	ret
    17f4:	92 30       	cpi	r25, 0x02	; 2
    17f6:	a9 f0       	breq	.+42     	; 0x1822 <M_Dio_PinWrite+0x5c>
    17f8:	18 f4       	brcc	.+6      	; 0x1800 <M_Dio_PinWrite+0x3a>
    17fa:	91 30       	cpi	r25, 0x01	; 1
    17fc:	31 f0       	breq	.+12     	; 0x180a <M_Dio_PinWrite+0x44>
    17fe:	08 95       	ret
    1800:	93 30       	cpi	r25, 0x03	; 3
    1802:	d9 f0       	breq	.+54     	; 0x183a <M_Dio_PinWrite+0x74>
    1804:	94 30       	cpi	r25, 0x04	; 4
    1806:	29 f1       	breq	.+74     	; 0x1852 <M_Dio_PinWrite+0x8c>
    1808:	08 95       	ret
    180a:	3b b3       	in	r19, 0x1b	; 27
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <M_Dio_PinWrite+0x50>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	2a 95       	dec	r18
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <M_Dio_PinWrite+0x4c>
    181a:	80 95       	com	r24
    181c:	83 23       	and	r24, r19
    181e:	8b bb       	out	0x1b, r24	; 27
    1820:	08 95       	ret
    1822:	38 b3       	in	r19, 0x18	; 24
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	02 c0       	rjmp	.+4      	; 0x182e <M_Dio_PinWrite+0x68>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	2a 95       	dec	r18
    1830:	e2 f7       	brpl	.-8      	; 0x182a <M_Dio_PinWrite+0x64>
    1832:	80 95       	com	r24
    1834:	83 23       	and	r24, r19
    1836:	88 bb       	out	0x18, r24	; 24
    1838:	08 95       	ret
    183a:	35 b3       	in	r19, 0x15	; 21
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 c0       	rjmp	.+4      	; 0x1846 <M_Dio_PinWrite+0x80>
    1842:	88 0f       	add	r24, r24
    1844:	99 1f       	adc	r25, r25
    1846:	2a 95       	dec	r18
    1848:	e2 f7       	brpl	.-8      	; 0x1842 <M_Dio_PinWrite+0x7c>
    184a:	80 95       	com	r24
    184c:	83 23       	and	r24, r19
    184e:	85 bb       	out	0x15, r24	; 21
    1850:	08 95       	ret
    1852:	32 b3       	in	r19, 0x12	; 18
    1854:	81 e0       	ldi	r24, 0x01	; 1
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	02 c0       	rjmp	.+4      	; 0x185e <M_Dio_PinWrite+0x98>
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	2a 95       	dec	r18
    1860:	e2 f7       	brpl	.-8      	; 0x185a <M_Dio_PinWrite+0x94>
    1862:	80 95       	com	r24
    1864:	83 23       	and	r24, r19
    1866:	82 bb       	out	0x12, r24	; 18
    1868:	08 95       	ret
    186a:	92 30       	cpi	r25, 0x02	; 2
    186c:	a1 f0       	breq	.+40     	; 0x1896 <M_Dio_PinWrite+0xd0>
    186e:	18 f4       	brcc	.+6      	; 0x1876 <M_Dio_PinWrite+0xb0>
    1870:	91 30       	cpi	r25, 0x01	; 1
    1872:	31 f0       	breq	.+12     	; 0x1880 <M_Dio_PinWrite+0xba>
    1874:	08 95       	ret
    1876:	93 30       	cpi	r25, 0x03	; 3
    1878:	c9 f0       	breq	.+50     	; 0x18ac <M_Dio_PinWrite+0xe6>
    187a:	94 30       	cpi	r25, 0x04	; 4
    187c:	11 f1       	breq	.+68     	; 0x18c2 <M_Dio_PinWrite+0xfc>
    187e:	08 95       	ret
    1880:	3b b3       	in	r19, 0x1b	; 27
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <M_Dio_PinWrite+0xc6>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	2a 95       	dec	r18
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <M_Dio_PinWrite+0xc2>
    1890:	83 2b       	or	r24, r19
    1892:	8b bb       	out	0x1b, r24	; 27
    1894:	08 95       	ret
    1896:	38 b3       	in	r19, 0x18	; 24
    1898:	81 e0       	ldi	r24, 0x01	; 1
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <M_Dio_PinWrite+0xdc>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	2a 95       	dec	r18
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <M_Dio_PinWrite+0xd8>
    18a6:	83 2b       	or	r24, r19
    18a8:	88 bb       	out	0x18, r24	; 24
    18aa:	08 95       	ret
    18ac:	35 b3       	in	r19, 0x15	; 21
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	02 c0       	rjmp	.+4      	; 0x18b8 <M_Dio_PinWrite+0xf2>
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	2a 95       	dec	r18
    18ba:	e2 f7       	brpl	.-8      	; 0x18b4 <M_Dio_PinWrite+0xee>
    18bc:	83 2b       	or	r24, r19
    18be:	85 bb       	out	0x15, r24	; 21
    18c0:	08 95       	ret
    18c2:	32 b3       	in	r19, 0x12	; 18
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 c0       	rjmp	.+4      	; 0x18ce <M_Dio_PinWrite+0x108>
    18ca:	88 0f       	add	r24, r24
    18cc:	99 1f       	adc	r25, r25
    18ce:	2a 95       	dec	r18
    18d0:	e2 f7       	brpl	.-8      	; 0x18ca <M_Dio_PinWrite+0x104>
    18d2:	83 2b       	or	r24, r19
    18d4:	82 bb       	out	0x12, r24	; 18
    18d6:	08 95       	ret

000018d8 <M_Dio_PinRead>:
	
}

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
    18d8:	9d ec       	ldi	r25, 0xCD	; 205
    18da:	89 9f       	mul	r24, r25
    18dc:	91 2d       	mov	r25, r1
    18de:	11 24       	eor	r1, r1
    18e0:	29 2f       	mov	r18, r25
    18e2:	26 95       	lsr	r18
    18e4:	26 95       	lsr	r18
    18e6:	26 95       	lsr	r18
    18e8:	22 0f       	add	r18, r18
    18ea:	32 2f       	mov	r19, r18
    18ec:	33 0f       	add	r19, r19
    18ee:	33 0f       	add	r19, r19
    18f0:	23 0f       	add	r18, r19
    18f2:	82 1b       	sub	r24, r18
    18f4:	28 2f       	mov	r18, r24
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
    18f6:	89 2f       	mov	r24, r25
    18f8:	86 95       	lsr	r24
    18fa:	86 95       	lsr	r24
    18fc:	86 95       	lsr	r24
	u8 Local_u8_Pin_Value	=	0;
	
	switch(Local_u8_Port)
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	91 f0       	breq	.+36     	; 0x1926 <M_Dio_PinRead+0x4e>
    1902:	18 f4       	brcc	.+6      	; 0x190a <M_Dio_PinRead+0x32>
    1904:	81 30       	cpi	r24, 0x01	; 1
    1906:	31 f0       	breq	.+12     	; 0x1914 <M_Dio_PinRead+0x3c>
    1908:	29 c0       	rjmp	.+82     	; 0x195c <M_Dio_PinRead+0x84>
    190a:	83 30       	cpi	r24, 0x03	; 3
    190c:	a9 f0       	breq	.+42     	; 0x1938 <M_Dio_PinRead+0x60>
    190e:	84 30       	cpi	r24, 0x04	; 4
    1910:	e1 f0       	breq	.+56     	; 0x194a <M_Dio_PinRead+0x72>
    1912:	24 c0       	rjmp	.+72     	; 0x195c <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_Pin_Value = GetBit(PINA,Local_u8_Pin);		break;
    1914:	89 b3       	in	r24, 0x19	; 25
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 c0       	rjmp	.+4      	; 0x191e <M_Dio_PinRead+0x46>
    191a:	95 95       	asr	r25
    191c:	87 95       	ror	r24
    191e:	2a 95       	dec	r18
    1920:	e2 f7       	brpl	.-8      	; 0x191a <M_Dio_PinRead+0x42>
    1922:	81 70       	andi	r24, 0x01	; 1
    1924:	08 95       	ret
		case 2: Local_u8_Pin_Value = GetBit(PINB,Local_u8_Pin);		break;
    1926:	86 b3       	in	r24, 0x16	; 22
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <M_Dio_PinRead+0x58>
    192c:	95 95       	asr	r25
    192e:	87 95       	ror	r24
    1930:	2a 95       	dec	r18
    1932:	e2 f7       	brpl	.-8      	; 0x192c <M_Dio_PinRead+0x54>
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	08 95       	ret
		case 3: Local_u8_Pin_Value = GetBit(PINC,Local_u8_Pin);		break;
    1938:	83 b3       	in	r24, 0x13	; 19
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <M_Dio_PinRead+0x6a>
    193e:	95 95       	asr	r25
    1940:	87 95       	ror	r24
    1942:	2a 95       	dec	r18
    1944:	e2 f7       	brpl	.-8      	; 0x193e <M_Dio_PinRead+0x66>
    1946:	81 70       	andi	r24, 0x01	; 1
    1948:	08 95       	ret
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
    194a:	80 b3       	in	r24, 0x10	; 16
    194c:	90 e0       	ldi	r25, 0x00	; 0
    194e:	02 c0       	rjmp	.+4      	; 0x1954 <M_Dio_PinRead+0x7c>
    1950:	95 95       	asr	r25
    1952:	87 95       	ror	r24
    1954:	2a 95       	dec	r18
    1956:	e2 f7       	brpl	.-8      	; 0x1950 <M_Dio_PinRead+0x78>
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	08 95       	ret

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
	u8 Local_u8_Pin_Value	=	0;
    195c:	80 e0       	ldi	r24, 0x00	; 0
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
		default:								break;
	}
	
	return Local_u8_Pin_Value;
}
    195e:	08 95       	ret

00001960 <M_Dio_PinPullUp>:

void M_Dio_PinPullUp	(u8 Local_u8_PinNumber, u8 Local_u8_PullUpState)
{
	u8 Local_u8_Pin		=	Local_u8_PinNumber % 10;
    1960:	9d ec       	ldi	r25, 0xCD	; 205
    1962:	89 9f       	mul	r24, r25
    1964:	91 2d       	mov	r25, r1
    1966:	11 24       	eor	r1, r1
    1968:	29 2f       	mov	r18, r25
    196a:	26 95       	lsr	r18
    196c:	26 95       	lsr	r18
    196e:	26 95       	lsr	r18
    1970:	22 0f       	add	r18, r18
    1972:	32 2f       	mov	r19, r18
    1974:	33 0f       	add	r19, r19
    1976:	33 0f       	add	r19, r19
    1978:	23 0f       	add	r18, r19
    197a:	82 1b       	sub	r24, r18
    197c:	28 2f       	mov	r18, r24
	u8 Local_u8_Port	=	Local_u8_PinNumber / 10;
    197e:	96 95       	lsr	r25
    1980:	96 95       	lsr	r25
    1982:	96 95       	lsr	r25
	
	switch(Local_u8_PullUpState)
    1984:	66 23       	and	r22, r22
    1986:	19 f0       	breq	.+6      	; 0x198e <M_Dio_PinPullUp+0x2e>
    1988:	61 30       	cpi	r22, 0x01	; 1
    198a:	e1 f1       	breq	.+120    	; 0x1a04 <M_Dio_PinPullUp+0xa4>
    198c:	08 95       	ret
	{
		case PULLUP_DISABLE:
		switch(Local_u8_Port)
    198e:	92 30       	cpi	r25, 0x02	; 2
    1990:	a9 f0       	breq	.+42     	; 0x19bc <M_Dio_PinPullUp+0x5c>
    1992:	18 f4       	brcc	.+6      	; 0x199a <M_Dio_PinPullUp+0x3a>
    1994:	91 30       	cpi	r25, 0x01	; 1
    1996:	31 f0       	breq	.+12     	; 0x19a4 <M_Dio_PinPullUp+0x44>
    1998:	08 95       	ret
    199a:	93 30       	cpi	r25, 0x03	; 3
    199c:	d9 f0       	breq	.+54     	; 0x19d4 <M_Dio_PinPullUp+0x74>
    199e:	94 30       	cpi	r25, 0x04	; 4
    19a0:	29 f1       	breq	.+74     	; 0x19ec <M_Dio_PinPullUp+0x8c>
    19a2:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin);		break;
    19a4:	3b b3       	in	r19, 0x1b	; 27
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <M_Dio_PinPullUp+0x50>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	2a 95       	dec	r18
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <M_Dio_PinPullUp+0x4c>
    19b4:	80 95       	com	r24
    19b6:	83 23       	and	r24, r19
    19b8:	8b bb       	out	0x1b, r24	; 27
    19ba:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin);		break;
    19bc:	38 b3       	in	r19, 0x18	; 24
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	02 c0       	rjmp	.+4      	; 0x19c8 <M_Dio_PinPullUp+0x68>
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	2a 95       	dec	r18
    19ca:	e2 f7       	brpl	.-8      	; 0x19c4 <M_Dio_PinPullUp+0x64>
    19cc:	80 95       	com	r24
    19ce:	83 23       	and	r24, r19
    19d0:	88 bb       	out	0x18, r24	; 24
    19d2:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin);		break;
    19d4:	35 b3       	in	r19, 0x15	; 21
    19d6:	81 e0       	ldi	r24, 0x01	; 1
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <M_Dio_PinPullUp+0x80>
    19dc:	88 0f       	add	r24, r24
    19de:	99 1f       	adc	r25, r25
    19e0:	2a 95       	dec	r18
    19e2:	e2 f7       	brpl	.-8      	; 0x19dc <M_Dio_PinPullUp+0x7c>
    19e4:	80 95       	com	r24
    19e6:	83 23       	and	r24, r19
    19e8:	85 bb       	out	0x15, r24	; 21
    19ea:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin);		break;
    19ec:	32 b3       	in	r19, 0x12	; 18
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <M_Dio_PinPullUp+0x98>
    19f4:	88 0f       	add	r24, r24
    19f6:	99 1f       	adc	r25, r25
    19f8:	2a 95       	dec	r18
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <M_Dio_PinPullUp+0x94>
    19fc:	80 95       	com	r24
    19fe:	83 23       	and	r24, r19
    1a00:	82 bb       	out	0x12, r24	; 18
    1a02:	08 95       	ret
			default:								break;
		}
		break;
		
		case PULLUP_ENABLE:
		switch(Local_u8_Port)
    1a04:	92 30       	cpi	r25, 0x02	; 2
    1a06:	a1 f0       	breq	.+40     	; 0x1a30 <M_Dio_PinPullUp+0xd0>
    1a08:	18 f4       	brcc	.+6      	; 0x1a10 <M_Dio_PinPullUp+0xb0>
    1a0a:	91 30       	cpi	r25, 0x01	; 1
    1a0c:	31 f0       	breq	.+12     	; 0x1a1a <M_Dio_PinPullUp+0xba>
    1a0e:	08 95       	ret
    1a10:	93 30       	cpi	r25, 0x03	; 3
    1a12:	c9 f0       	breq	.+50     	; 0x1a46 <M_Dio_PinPullUp+0xe6>
    1a14:	94 30       	cpi	r25, 0x04	; 4
    1a16:	11 f1       	breq	.+68     	; 0x1a5c <M_Dio_PinPullUp+0xfc>
    1a18:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin);		break;
    1a1a:	3b b3       	in	r19, 0x1b	; 27
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <M_Dio_PinPullUp+0xc6>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	2a 95       	dec	r18
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <M_Dio_PinPullUp+0xc2>
    1a2a:	83 2b       	or	r24, r19
    1a2c:	8b bb       	out	0x1b, r24	; 27
    1a2e:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin);		break;
    1a30:	38 b3       	in	r19, 0x18	; 24
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <M_Dio_PinPullUp+0xdc>
    1a38:	88 0f       	add	r24, r24
    1a3a:	99 1f       	adc	r25, r25
    1a3c:	2a 95       	dec	r18
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <M_Dio_PinPullUp+0xd8>
    1a40:	83 2b       	or	r24, r19
    1a42:	88 bb       	out	0x18, r24	; 24
    1a44:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin);		break;
    1a46:	35 b3       	in	r19, 0x15	; 21
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	02 c0       	rjmp	.+4      	; 0x1a52 <M_Dio_PinPullUp+0xf2>
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	2a 95       	dec	r18
    1a54:	e2 f7       	brpl	.-8      	; 0x1a4e <M_Dio_PinPullUp+0xee>
    1a56:	83 2b       	or	r24, r19
    1a58:	85 bb       	out	0x15, r24	; 21
    1a5a:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin);		break;
    1a5c:	32 b3       	in	r19, 0x12	; 18
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	02 c0       	rjmp	.+4      	; 0x1a68 <M_Dio_PinPullUp+0x108>
    1a64:	88 0f       	add	r24, r24
    1a66:	99 1f       	adc	r25, r25
    1a68:	2a 95       	dec	r18
    1a6a:	e2 f7       	brpl	.-8      	; 0x1a64 <M_Dio_PinPullUp+0x104>
    1a6c:	83 2b       	or	r24, r19
    1a6e:	82 bb       	out	0x12, r24	; 18
    1a70:	08 95       	ret

00001a72 <M_I2c_Init>:
//     SetBit(TWCR,6);					 //   later
// 	SetBit(TWCR,7);                  //   to clear the flag bit
// 	while(GetBit(TWCR,7) == 0);
// 	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
// 	return TWDR;
}
    1a72:	86 b7       	in	r24, 0x36	; 54
    1a74:	8b 7f       	andi	r24, 0xFB	; 251
    1a76:	86 bf       	out	0x36, r24	; 54
    1a78:	8c e0       	ldi	r24, 0x0C	; 12
    1a7a:	80 b9       	out	0x00, r24	; 0
    1a7c:	86 b7       	in	r24, 0x36	; 54
    1a7e:	84 60       	ori	r24, 0x04	; 4
    1a80:	86 bf       	out	0x36, r24	; 54
    1a82:	8f e3       	ldi	r24, 0x3F	; 63
    1a84:	9c e9       	ldi	r25, 0x9C	; 156
    1a86:	01 97       	sbiw	r24, 0x01	; 1
    1a88:	f1 f7       	brne	.-4      	; 0x1a86 <M_I2c_Init+0x14>
    1a8a:	00 c0       	rjmp	.+0      	; 0x1a8c <M_I2c_Init+0x1a>
    1a8c:	00 00       	nop
    1a8e:	08 95       	ret

00001a90 <M_I2c_StartCondition>:
    1a90:	86 b7       	in	r24, 0x36	; 54
    1a92:	80 62       	ori	r24, 0x20	; 32
    1a94:	86 bf       	out	0x36, r24	; 54
    1a96:	86 b7       	in	r24, 0x36	; 54
    1a98:	80 68       	ori	r24, 0x80	; 128
    1a9a:	86 bf       	out	0x36, r24	; 54
    1a9c:	06 b6       	in	r0, 0x36	; 54
    1a9e:	07 fe       	sbrs	r0, 7
    1aa0:	fd cf       	rjmp	.-6      	; 0x1a9c <M_I2c_StartCondition+0xc>
    1aa2:	81 b1       	in	r24, 0x01	; 1
    1aa4:	88 7f       	andi	r24, 0xF8	; 248
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	e1 f7       	brne	.-8      	; 0x1aa2 <M_I2c_StartCondition+0x12>
    1aaa:	8f e3       	ldi	r24, 0x3F	; 63
    1aac:	9c e9       	ldi	r25, 0x9C	; 156
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <M_I2c_StartCondition+0x1e>
    1ab2:	00 c0       	rjmp	.+0      	; 0x1ab4 <M_I2c_StartCondition+0x24>
    1ab4:	00 00       	nop
    1ab6:	08 95       	ret

00001ab8 <M_I2c_SendSlaveAddressWrite>:
    1ab8:	88 0f       	add	r24, r24
    1aba:	83 b9       	out	0x03, r24	; 3
    1abc:	86 b7       	in	r24, 0x36	; 54
    1abe:	80 68       	ori	r24, 0x80	; 128
    1ac0:	86 bf       	out	0x36, r24	; 54
    1ac2:	06 b6       	in	r0, 0x36	; 54
    1ac4:	07 fe       	sbrs	r0, 7
    1ac6:	fd cf       	rjmp	.-6      	; 0x1ac2 <M_I2c_SendSlaveAddressWrite+0xa>
    1ac8:	81 b1       	in	r24, 0x01	; 1
    1aca:	88 7f       	andi	r24, 0xF8	; 248
    1acc:	88 31       	cpi	r24, 0x18	; 24
    1ace:	e1 f7       	brne	.-8      	; 0x1ac8 <M_I2c_SendSlaveAddressWrite+0x10>
    1ad0:	8f e3       	ldi	r24, 0x3F	; 63
    1ad2:	9c e9       	ldi	r25, 0x9C	; 156
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <M_I2c_SendSlaveAddressWrite+0x1c>
    1ad8:	00 c0       	rjmp	.+0      	; 0x1ada <M_I2c_SendSlaveAddressWrite+0x22>
    1ada:	00 00       	nop
    1adc:	08 95       	ret

00001ade <M_I2c_SendSlaveAddressRead>:
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	81 60       	ori	r24, 0x01	; 1
    1ae6:	83 b9       	out	0x03, r24	; 3
    1ae8:	86 b7       	in	r24, 0x36	; 54
    1aea:	80 68       	ori	r24, 0x80	; 128
    1aec:	86 bf       	out	0x36, r24	; 54
    1aee:	06 b6       	in	r0, 0x36	; 54
    1af0:	07 fe       	sbrs	r0, 7
    1af2:	fd cf       	rjmp	.-6      	; 0x1aee <M_I2c_SendSlaveAddressRead+0x10>
    1af4:	81 b1       	in	r24, 0x01	; 1
    1af6:	88 7f       	andi	r24, 0xF8	; 248
    1af8:	80 34       	cpi	r24, 0x40	; 64
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <M_I2c_SendSlaveAddressRead+0x16>
    1afc:	8f e3       	ldi	r24, 0x3F	; 63
    1afe:	9c e9       	ldi	r25, 0x9C	; 156
    1b00:	01 97       	sbiw	r24, 0x01	; 1
    1b02:	f1 f7       	brne	.-4      	; 0x1b00 <M_I2c_SendSlaveAddressRead+0x22>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <M_I2c_SendSlaveAddressRead+0x28>
    1b06:	00 00       	nop
    1b08:	08 95       	ret

00001b0a <M_I2c_SendSByte>:
    1b0a:	83 b9       	out	0x03, r24	; 3
    1b0c:	86 b7       	in	r24, 0x36	; 54
    1b0e:	8f 7d       	andi	r24, 0xDF	; 223
    1b10:	86 bf       	out	0x36, r24	; 54
    1b12:	86 b7       	in	r24, 0x36	; 54
    1b14:	80 68       	ori	r24, 0x80	; 128
    1b16:	86 bf       	out	0x36, r24	; 54
    1b18:	06 b6       	in	r0, 0x36	; 54
    1b1a:	07 fe       	sbrs	r0, 7
    1b1c:	fd cf       	rjmp	.-6      	; 0x1b18 <M_I2c_SendSByte+0xe>
    1b1e:	81 b1       	in	r24, 0x01	; 1
    1b20:	88 7f       	andi	r24, 0xF8	; 248
    1b22:	88 32       	cpi	r24, 0x28	; 40
    1b24:	e1 f7       	brne	.-8      	; 0x1b1e <M_I2c_SendSByte+0x14>
    1b26:	2f ef       	ldi	r18, 0xFF	; 255
    1b28:	81 ee       	ldi	r24, 0xE1	; 225
    1b2a:	94 e0       	ldi	r25, 0x04	; 4
    1b2c:	21 50       	subi	r18, 0x01	; 1
    1b2e:	80 40       	sbci	r24, 0x00	; 0
    1b30:	90 40       	sbci	r25, 0x00	; 0
    1b32:	e1 f7       	brne	.-8      	; 0x1b2c <M_I2c_SendSByte+0x22>
    1b34:	00 c0       	rjmp	.+0      	; 0x1b36 <M_I2c_SendSByte+0x2c>
    1b36:	00 00       	nop
    1b38:	08 95       	ret

00001b3a <M_I2c_ReadByteNoAck>:
u8 M_I2c_ReadByteNoAck()
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    1b3a:	84 e8       	ldi	r24, 0x84	; 132
    1b3c:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,TWINT) == 0);
    1b3e:	06 b6       	in	r0, 0x36	; 54
    1b40:	07 fe       	sbrs	r0, 7
    1b42:	fd cf       	rjmp	.-6      	; 0x1b3e <M_I2c_ReadByteNoAck+0x4>
	return TWDR;
    1b44:	83 b1       	in	r24, 0x03	; 3
}
    1b46:	08 95       	ret

00001b48 <M_I2c_RepeatedStart>:
void M_I2c_RepeatedStart(void)
{
	SetBit(TWCR,5);
    1b48:	86 b7       	in	r24, 0x36	; 54
    1b4a:	80 62       	ori	r24, 0x20	; 32
    1b4c:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);                  //   to clear the flag bit
    1b4e:	86 b7       	in	r24, 0x36	; 54
    1b50:	80 68       	ori	r24, 0x80	; 128
    1b52:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,7) == 0);
    1b54:	06 b6       	in	r0, 0x36	; 54
    1b56:	07 fe       	sbrs	r0, 7
    1b58:	fd cf       	rjmp	.-6      	; 0x1b54 <M_I2c_RepeatedStart+0xc>
	while((TWSR & 0xF8) != REP_START_ACK);
    1b5a:	81 b1       	in	r24, 0x01	; 1
    1b5c:	88 7f       	andi	r24, 0xF8	; 248
    1b5e:	80 31       	cpi	r24, 0x10	; 16
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <M_I2c_RepeatedStart+0x12>
}
    1b62:	08 95       	ret

00001b64 <M_I2c_StopCondition>:
//  	SetBit(TWCR,7);                  //   to clear the flag bit
//  	SetBit(TWCR,4);
// // 	SetBit(TWCR,2);	
	//while(GetBit(TWCR,7) == 0);
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	SetBit(TWCR,4);
    1b64:	86 b7       	in	r24, 0x36	; 54
    1b66:	80 61       	ori	r24, 0x10	; 16
    1b68:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);
    1b6a:	86 b7       	in	r24, 0x36	; 54
    1b6c:	80 68       	ori	r24, 0x80	; 128
    1b6e:	86 bf       	out	0x36, r24	; 54
    1b70:	8f e9       	ldi	r24, 0x9F	; 159
    1b72:	9f e0       	ldi	r25, 0x0F	; 15
    1b74:	01 97       	sbiw	r24, 0x01	; 1
    1b76:	f1 f7       	brne	.-4      	; 0x1b74 <M_I2c_StopCondition+0x10>
    1b78:	00 c0       	rjmp	.+0      	; 0x1b7a <M_I2c_StopCondition+0x16>
    1b7a:	00 00       	nop
    1b7c:	08 95       	ret

00001b7e <M_Pwm1_Init>:
#include "Timer1.h"

void M_Pwm1_Init				(void)
{
	
 	SetBit(DDRD,5);	
    1b7e:	81 b3       	in	r24, 0x11	; 17
    1b80:	80 62       	ori	r24, 0x20	; 32
    1b82:	81 bb       	out	0x11, r24	; 17
 	
 	SetBit(TCCR1A,COM1A1);
    1b84:	8f b5       	in	r24, 0x2f	; 47
    1b86:	80 68       	ori	r24, 0x80	; 128
    1b88:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,COM1A0);
    1b8a:	8f b5       	in	r24, 0x2f	; 47
    1b8c:	8f 7b       	andi	r24, 0xBF	; 191
    1b8e:	8f bd       	out	0x2f, r24	; 47
	
	SetBit(TCCR1B,WGM13);
    1b90:	8e b5       	in	r24, 0x2e	; 46
    1b92:	80 61       	ori	r24, 0x10	; 16
    1b94:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,WGM12);
    1b96:	8e b5       	in	r24, 0x2e	; 46
    1b98:	88 60       	ori	r24, 0x08	; 8
    1b9a:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1A,WGM11);
    1b9c:	8f b5       	in	r24, 0x2f	; 47
    1b9e:	82 60       	ori	r24, 0x02	; 2
    1ba0:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,WGM10);
    1ba2:	8f b5       	in	r24, 0x2f	; 47
    1ba4:	8e 7f       	andi	r24, 0xFE	; 254
    1ba6:	8f bd       	out	0x2f, r24	; 47
    1ba8:	08 95       	ret

00001baa <M_Pwm1_SetDutyCycle>:
	

	
}
void M_Pwm1_SetDutyCycle		(f32 Local_f32_DesiredDutyCycle)
{
    1baa:	cf 92       	push	r12
    1bac:	df 92       	push	r13
    1bae:	ef 92       	push	r14
    1bb0:	ff 92       	push	r15
    1bb2:	6b 01       	movw	r12, r22
    1bb4:	7c 01       	movw	r14, r24
	OCR1A = (((Local_f32_DesiredDutyCycle * ICR1)/100)-1);
    1bb6:	66 b5       	in	r22, 0x26	; 38
    1bb8:	77 b5       	in	r23, 0x27	; 39
    1bba:	80 e0       	ldi	r24, 0x00	; 0
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <__floatunsisf>
    1bc2:	a7 01       	movw	r20, r14
    1bc4:	96 01       	movw	r18, r12
    1bc6:	0e 94 08 10 	call	0x2010	; 0x2010 <__mulsf3>
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	30 e0       	ldi	r19, 0x00	; 0
    1bce:	48 ec       	ldi	r20, 0xC8	; 200
    1bd0:	52 e4       	ldi	r21, 0x42	; 66
    1bd2:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <__divsf3>
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__subsf3>
    1be2:	0e 94 4b 0f 	call	0x1e96	; 0x1e96 <__fixunssfsi>
    1be6:	7b bd       	out	0x2b, r23	; 43
    1be8:	6a bd       	out	0x2a, r22	; 42
}
    1bea:	ff 90       	pop	r15
    1bec:	ef 90       	pop	r14
    1bee:	df 90       	pop	r13
    1bf0:	cf 90       	pop	r12
    1bf2:	08 95       	ret

00001bf4 <M_Pwm1_SetFrequency>:
void M_Pwm1_SetFrequency		(u16 Local_u16_DesiredFrequency)
{
	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Local_u16_DesiredFrequency * TIMER1_PRESCALER));
    1bf4:	00 24       	eor	r0, r0
    1bf6:	96 95       	lsr	r25
    1bf8:	87 95       	ror	r24
    1bfa:	07 94       	ror	r0
    1bfc:	96 95       	lsr	r25
    1bfe:	87 95       	ror	r24
    1c00:	07 94       	ror	r0
    1c02:	98 2f       	mov	r25, r24
    1c04:	80 2d       	mov	r24, r0
    1c06:	9c 01       	movw	r18, r24
    1c08:	40 e0       	ldi	r20, 0x00	; 0
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	74 e2       	ldi	r23, 0x24	; 36
    1c10:	84 ef       	ldi	r24, 0xF4	; 244
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 ab 10 	call	0x2156	; 0x2156 <__divmodsi4>
    1c18:	37 bd       	out	0x27, r19	; 39
    1c1a:	26 bd       	out	0x26, r18	; 38
    1c1c:	08 95       	ret

00001c1e <M_Pwm1_Start>:
}
void M_Pwm1_Start				(void)
{
	#if		TIMER1_PRESCALER == PRESCLNG_64
	ClrBit(TCCR1B,CS12);
    1c1e:	8e b5       	in	r24, 0x2e	; 46
    1c20:	8b 7f       	andi	r24, 0xFB	; 251
    1c22:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS11);
    1c24:	8e b5       	in	r24, 0x2e	; 46
    1c26:	82 60       	ori	r24, 0x02	; 2
    1c28:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS10);
    1c2a:	8e b5       	in	r24, 0x2e	; 46
    1c2c:	81 60       	ori	r24, 0x01	; 1
    1c2e:	8e bd       	out	0x2e, r24	; 46
    1c30:	08 95       	ret

00001c32 <M_Timer2_Start>:
	#elif		TIMER2_PRESCALER	==		PRESCLNG_64		   
	ClrBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_256	   
	SetBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_1024	   
	SetBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
    1c32:	85 b5       	in	r24, 0x25	; 37
    1c34:	84 60       	ori	r24, 0x04	; 4
    1c36:	85 bd       	out	0x25, r24	; 37
    1c38:	85 b5       	in	r24, 0x25	; 37
    1c3a:	82 60       	ori	r24, 0x02	; 2
    1c3c:	85 bd       	out	0x25, r24	; 37
    1c3e:	85 b5       	in	r24, 0x25	; 37
    1c40:	81 60       	ori	r24, 0x01	; 1
    1c42:	85 bd       	out	0x25, r24	; 37
    1c44:	08 95       	ret

00001c46 <M_Timer2_Stop>:
	#endif
}

void M_Timer2_Stop			(void)
{
	ClrBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	ClrBit(TCCR2,CS20);
    1c46:	85 b5       	in	r24, 0x25	; 37
    1c48:	8b 7f       	andi	r24, 0xFB	; 251
    1c4a:	85 bd       	out	0x25, r24	; 37
    1c4c:	85 b5       	in	r24, 0x25	; 37
    1c4e:	8d 7f       	andi	r24, 0xFD	; 253
    1c50:	85 bd       	out	0x25, r24	; 37
    1c52:	85 b5       	in	r24, 0x25	; 37
    1c54:	8e 7f       	andi	r24, 0xFE	; 254
    1c56:	85 bd       	out	0x25, r24	; 37
    1c58:	08 95       	ret

00001c5a <M_Pwm2_Init>:
}


void M_Pwm2_Init				(void)
{
	M_Dio_PinMode(PD7,OUTPUT);
    1c5a:	61 e0       	ldi	r22, 0x01	; 1
    1c5c:	8f e2       	ldi	r24, 0x2F	; 47
    1c5e:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>

	#if			PWM2_MODE		==		FAST_PWM
	SetBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
    1c62:	85 b5       	in	r24, 0x25	; 37
    1c64:	88 60       	ori	r24, 0x08	; 8
    1c66:	85 bd       	out	0x25, r24	; 37
    1c68:	85 b5       	in	r24, 0x25	; 37
    1c6a:	80 64       	ori	r24, 0x40	; 64
    1c6c:	85 bd       	out	0x25, r24	; 37
	#elif		PWM2_MODE		==		PHASE_CORRECT
	ClrBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
	#endif
	
	#if			OUTPUT_MODE		==		NON_INVERTED
	SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
    1c6e:	85 b5       	in	r24, 0x25	; 37
    1c70:	80 62       	ori	r24, 0x20	; 32
    1c72:	85 bd       	out	0x25, r24	; 37
    1c74:	85 b5       	in	r24, 0x25	; 37
    1c76:	8f 7e       	andi	r24, 0xEF	; 239
    1c78:	85 bd       	out	0x25, r24	; 37
    1c7a:	08 95       	ret

00001c7c <M_Pwm2_SetDutyCycle>:

void M_Pwm2_SetDutyCycle		(u8 Local_u8_DesiredDutyCycle)
{
	#if			OUTPUT_MODE		==		NON_INVERTED
	
	if(Local_u8_DesiredDutyCycle == 0)
    1c7c:	81 11       	cpse	r24, r1
    1c7e:	0f c0       	rjmp	.+30     	; 0x1c9e <M_Pwm2_SetDutyCycle+0x22>
	{
		SetBit(TCCR2,COM21); SetBit(TCCR2,COM20);
    1c80:	95 b5       	in	r25, 0x25	; 37
    1c82:	90 62       	ori	r25, 0x20	; 32
    1c84:	95 bd       	out	0x25, r25	; 37
    1c86:	95 b5       	in	r25, 0x25	; 37
    1c88:	90 61       	ori	r25, 0x10	; 16
    1c8a:	95 bd       	out	0x25, r25	; 37
		OCR2 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
    1c8c:	98 2f       	mov	r25, r24
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	64 e6       	ldi	r22, 0x64	; 100
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	0e 94 75 10 	call	0x20ea	; 0x20ea <__divmodhi4>
    1c98:	60 95       	com	r22
    1c9a:	63 bd       	out	0x23, r22	; 35
    1c9c:	08 95       	ret
	}
	else
	{
		SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
    1c9e:	95 b5       	in	r25, 0x25	; 37
    1ca0:	90 62       	ori	r25, 0x20	; 32
    1ca2:	95 bd       	out	0x25, r25	; 37
    1ca4:	95 b5       	in	r25, 0x25	; 37
    1ca6:	9f 7e       	andi	r25, 0xEF	; 239
    1ca8:	95 bd       	out	0x25, r25	; 37
		OCR2 = (((Local_u8_DesiredDutyCycle * 256) / 100) - 1);
    1caa:	98 2f       	mov	r25, r24
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	64 e6       	ldi	r22, 0x64	; 100
    1cb0:	70 e0       	ldi	r23, 0x00	; 0
    1cb2:	0e 94 75 10 	call	0x20ea	; 0x20ea <__divmodhi4>
    1cb6:	61 50       	subi	r22, 0x01	; 1
    1cb8:	63 bd       	out	0x23, r22	; 35
    1cba:	08 95       	ret

00001cbc <M_Pwm2_Start>:
	
}

void M_Pwm2_Start				(void)
{
	M_Timer2_Start();
    1cbc:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <M_Timer2_Start>
	M_Dio_PinMode(PD7,OUTPUT);
    1cc0:	61 e0       	ldi	r22, 0x01	; 1
    1cc2:	8f e2       	ldi	r24, 0x2F	; 47
    1cc4:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
    1cc8:	08 95       	ret

00001cca <M_Pwm2_Stop>:
}

void M_Pwm2_Stop				(void)
{
	M_Timer2_Stop();
    1cca:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <M_Timer2_Stop>
	M_Dio_PinMode(PD7,INPUT);
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	8f e2       	ldi	r24, 0x2F	; 47
    1cd2:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <M_Dio_PinMode>
    1cd6:	08 95       	ret

00001cd8 <__subsf3>:
    1cd8:	50 58       	subi	r21, 0x80	; 128

00001cda <__addsf3>:
    1cda:	bb 27       	eor	r27, r27
    1cdc:	aa 27       	eor	r26, r26
    1cde:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__addsf3x>
    1ce2:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__fp_round>
    1ce6:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__fp_pscA>
    1cea:	38 f0       	brcs	.+14     	; 0x1cfa <__addsf3+0x20>
    1cec:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_pscB>
    1cf0:	20 f0       	brcs	.+8      	; 0x1cfa <__addsf3+0x20>
    1cf2:	39 f4       	brne	.+14     	; 0x1d02 <__addsf3+0x28>
    1cf4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <__addsf3+0x24>
    1cf8:	26 f4       	brtc	.+8      	; 0x1d02 <__addsf3+0x28>
    1cfa:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__fp_nan>
    1cfe:	0e f4       	brtc	.+2      	; 0x1d02 <__addsf3+0x28>
    1d00:	e0 95       	com	r30
    1d02:	e7 fb       	bst	r30, 7
    1d04:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_inf>

00001d08 <__addsf3x>:
    1d08:	e9 2f       	mov	r30, r25
    1d0a:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fp_split3>
    1d0e:	58 f3       	brcs	.-42     	; 0x1ce6 <__addsf3+0xc>
    1d10:	ba 17       	cp	r27, r26
    1d12:	62 07       	cpc	r22, r18
    1d14:	73 07       	cpc	r23, r19
    1d16:	84 07       	cpc	r24, r20
    1d18:	95 07       	cpc	r25, r21
    1d1a:	20 f0       	brcs	.+8      	; 0x1d24 <__addsf3x+0x1c>
    1d1c:	79 f4       	brne	.+30     	; 0x1d3c <__addsf3x+0x34>
    1d1e:	a6 f5       	brtc	.+104    	; 0x1d88 <__addsf3x+0x80>
    1d20:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_zero>
    1d24:	0e f4       	brtc	.+2      	; 0x1d28 <__addsf3x+0x20>
    1d26:	e0 95       	com	r30
    1d28:	0b 2e       	mov	r0, r27
    1d2a:	ba 2f       	mov	r27, r26
    1d2c:	a0 2d       	mov	r26, r0
    1d2e:	0b 01       	movw	r0, r22
    1d30:	b9 01       	movw	r22, r18
    1d32:	90 01       	movw	r18, r0
    1d34:	0c 01       	movw	r0, r24
    1d36:	ca 01       	movw	r24, r20
    1d38:	a0 01       	movw	r20, r0
    1d3a:	11 24       	eor	r1, r1
    1d3c:	ff 27       	eor	r31, r31
    1d3e:	59 1b       	sub	r21, r25
    1d40:	99 f0       	breq	.+38     	; 0x1d68 <__addsf3x+0x60>
    1d42:	59 3f       	cpi	r21, 0xF9	; 249
    1d44:	50 f4       	brcc	.+20     	; 0x1d5a <__addsf3x+0x52>
    1d46:	50 3e       	cpi	r21, 0xE0	; 224
    1d48:	68 f1       	brcs	.+90     	; 0x1da4 <__addsf3x+0x9c>
    1d4a:	1a 16       	cp	r1, r26
    1d4c:	f0 40       	sbci	r31, 0x00	; 0
    1d4e:	a2 2f       	mov	r26, r18
    1d50:	23 2f       	mov	r18, r19
    1d52:	34 2f       	mov	r19, r20
    1d54:	44 27       	eor	r20, r20
    1d56:	58 5f       	subi	r21, 0xF8	; 248
    1d58:	f3 cf       	rjmp	.-26     	; 0x1d40 <__addsf3x+0x38>
    1d5a:	46 95       	lsr	r20
    1d5c:	37 95       	ror	r19
    1d5e:	27 95       	ror	r18
    1d60:	a7 95       	ror	r26
    1d62:	f0 40       	sbci	r31, 0x00	; 0
    1d64:	53 95       	inc	r21
    1d66:	c9 f7       	brne	.-14     	; 0x1d5a <__addsf3x+0x52>
    1d68:	7e f4       	brtc	.+30     	; 0x1d88 <__addsf3x+0x80>
    1d6a:	1f 16       	cp	r1, r31
    1d6c:	ba 0b       	sbc	r27, r26
    1d6e:	62 0b       	sbc	r22, r18
    1d70:	73 0b       	sbc	r23, r19
    1d72:	84 0b       	sbc	r24, r20
    1d74:	ba f0       	brmi	.+46     	; 0x1da4 <__addsf3x+0x9c>
    1d76:	91 50       	subi	r25, 0x01	; 1
    1d78:	a1 f0       	breq	.+40     	; 0x1da2 <__addsf3x+0x9a>
    1d7a:	ff 0f       	add	r31, r31
    1d7c:	bb 1f       	adc	r27, r27
    1d7e:	66 1f       	adc	r22, r22
    1d80:	77 1f       	adc	r23, r23
    1d82:	88 1f       	adc	r24, r24
    1d84:	c2 f7       	brpl	.-16     	; 0x1d76 <__addsf3x+0x6e>
    1d86:	0e c0       	rjmp	.+28     	; 0x1da4 <__addsf3x+0x9c>
    1d88:	ba 0f       	add	r27, r26
    1d8a:	62 1f       	adc	r22, r18
    1d8c:	73 1f       	adc	r23, r19
    1d8e:	84 1f       	adc	r24, r20
    1d90:	48 f4       	brcc	.+18     	; 0x1da4 <__addsf3x+0x9c>
    1d92:	87 95       	ror	r24
    1d94:	77 95       	ror	r23
    1d96:	67 95       	ror	r22
    1d98:	b7 95       	ror	r27
    1d9a:	f7 95       	ror	r31
    1d9c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d9e:	08 f0       	brcs	.+2      	; 0x1da2 <__addsf3x+0x9a>
    1da0:	b0 cf       	rjmp	.-160    	; 0x1d02 <__addsf3+0x28>
    1da2:	93 95       	inc	r25
    1da4:	88 0f       	add	r24, r24
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <__addsf3x+0xa2>
    1da8:	99 27       	eor	r25, r25
    1daa:	ee 0f       	add	r30, r30
    1dac:	97 95       	ror	r25
    1dae:	87 95       	ror	r24
    1db0:	08 95       	ret

00001db2 <__divsf3>:
    1db2:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <__divsf3x>
    1db6:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__fp_round>
    1dba:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_pscB>
    1dbe:	58 f0       	brcs	.+22     	; 0x1dd6 <__divsf3+0x24>
    1dc0:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__fp_pscA>
    1dc4:	40 f0       	brcs	.+16     	; 0x1dd6 <__divsf3+0x24>
    1dc6:	29 f4       	brne	.+10     	; 0x1dd2 <__divsf3+0x20>
    1dc8:	5f 3f       	cpi	r21, 0xFF	; 255
    1dca:	29 f0       	breq	.+10     	; 0x1dd6 <__divsf3+0x24>
    1dcc:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_inf>
    1dd0:	51 11       	cpse	r21, r1
    1dd2:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__fp_szero>
    1dd6:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__fp_nan>

00001dda <__divsf3x>:
    1dda:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fp_split3>
    1dde:	68 f3       	brcs	.-38     	; 0x1dba <__divsf3+0x8>

00001de0 <__divsf3_pse>:
    1de0:	99 23       	and	r25, r25
    1de2:	b1 f3       	breq	.-20     	; 0x1dd0 <__divsf3+0x1e>
    1de4:	55 23       	and	r21, r21
    1de6:	91 f3       	breq	.-28     	; 0x1dcc <__divsf3+0x1a>
    1de8:	95 1b       	sub	r25, r21
    1dea:	55 0b       	sbc	r21, r21
    1dec:	bb 27       	eor	r27, r27
    1dee:	aa 27       	eor	r26, r26
    1df0:	62 17       	cp	r22, r18
    1df2:	73 07       	cpc	r23, r19
    1df4:	84 07       	cpc	r24, r20
    1df6:	38 f0       	brcs	.+14     	; 0x1e06 <__divsf3_pse+0x26>
    1df8:	9f 5f       	subi	r25, 0xFF	; 255
    1dfa:	5f 4f       	sbci	r21, 0xFF	; 255
    1dfc:	22 0f       	add	r18, r18
    1dfe:	33 1f       	adc	r19, r19
    1e00:	44 1f       	adc	r20, r20
    1e02:	aa 1f       	adc	r26, r26
    1e04:	a9 f3       	breq	.-22     	; 0x1df0 <__divsf3_pse+0x10>
    1e06:	35 d0       	rcall	.+106    	; 0x1e72 <__divsf3_pse+0x92>
    1e08:	0e 2e       	mov	r0, r30
    1e0a:	3a f0       	brmi	.+14     	; 0x1e1a <__divsf3_pse+0x3a>
    1e0c:	e0 e8       	ldi	r30, 0x80	; 128
    1e0e:	32 d0       	rcall	.+100    	; 0x1e74 <__divsf3_pse+0x94>
    1e10:	91 50       	subi	r25, 0x01	; 1
    1e12:	50 40       	sbci	r21, 0x00	; 0
    1e14:	e6 95       	lsr	r30
    1e16:	00 1c       	adc	r0, r0
    1e18:	ca f7       	brpl	.-14     	; 0x1e0c <__divsf3_pse+0x2c>
    1e1a:	2b d0       	rcall	.+86     	; 0x1e72 <__divsf3_pse+0x92>
    1e1c:	fe 2f       	mov	r31, r30
    1e1e:	29 d0       	rcall	.+82     	; 0x1e72 <__divsf3_pse+0x92>
    1e20:	66 0f       	add	r22, r22
    1e22:	77 1f       	adc	r23, r23
    1e24:	88 1f       	adc	r24, r24
    1e26:	bb 1f       	adc	r27, r27
    1e28:	26 17       	cp	r18, r22
    1e2a:	37 07       	cpc	r19, r23
    1e2c:	48 07       	cpc	r20, r24
    1e2e:	ab 07       	cpc	r26, r27
    1e30:	b0 e8       	ldi	r27, 0x80	; 128
    1e32:	09 f0       	breq	.+2      	; 0x1e36 <__divsf3_pse+0x56>
    1e34:	bb 0b       	sbc	r27, r27
    1e36:	80 2d       	mov	r24, r0
    1e38:	bf 01       	movw	r22, r30
    1e3a:	ff 27       	eor	r31, r31
    1e3c:	93 58       	subi	r25, 0x83	; 131
    1e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e40:	3a f0       	brmi	.+14     	; 0x1e50 <__divsf3_pse+0x70>
    1e42:	9e 3f       	cpi	r25, 0xFE	; 254
    1e44:	51 05       	cpc	r21, r1
    1e46:	78 f0       	brcs	.+30     	; 0x1e66 <__divsf3_pse+0x86>
    1e48:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_inf>
    1e4c:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__fp_szero>
    1e50:	5f 3f       	cpi	r21, 0xFF	; 255
    1e52:	e4 f3       	brlt	.-8      	; 0x1e4c <__divsf3_pse+0x6c>
    1e54:	98 3e       	cpi	r25, 0xE8	; 232
    1e56:	d4 f3       	brlt	.-12     	; 0x1e4c <__divsf3_pse+0x6c>
    1e58:	86 95       	lsr	r24
    1e5a:	77 95       	ror	r23
    1e5c:	67 95       	ror	r22
    1e5e:	b7 95       	ror	r27
    1e60:	f7 95       	ror	r31
    1e62:	9f 5f       	subi	r25, 0xFF	; 255
    1e64:	c9 f7       	brne	.-14     	; 0x1e58 <__divsf3_pse+0x78>
    1e66:	88 0f       	add	r24, r24
    1e68:	91 1d       	adc	r25, r1
    1e6a:	96 95       	lsr	r25
    1e6c:	87 95       	ror	r24
    1e6e:	97 f9       	bld	r25, 7
    1e70:	08 95       	ret
    1e72:	e1 e0       	ldi	r30, 0x01	; 1
    1e74:	66 0f       	add	r22, r22
    1e76:	77 1f       	adc	r23, r23
    1e78:	88 1f       	adc	r24, r24
    1e7a:	bb 1f       	adc	r27, r27
    1e7c:	62 17       	cp	r22, r18
    1e7e:	73 07       	cpc	r23, r19
    1e80:	84 07       	cpc	r24, r20
    1e82:	ba 07       	cpc	r27, r26
    1e84:	20 f0       	brcs	.+8      	; 0x1e8e <__divsf3_pse+0xae>
    1e86:	62 1b       	sub	r22, r18
    1e88:	73 0b       	sbc	r23, r19
    1e8a:	84 0b       	sbc	r24, r20
    1e8c:	ba 0b       	sbc	r27, r26
    1e8e:	ee 1f       	adc	r30, r30
    1e90:	88 f7       	brcc	.-30     	; 0x1e74 <__divsf3_pse+0x94>
    1e92:	e0 95       	com	r30
    1e94:	08 95       	ret

00001e96 <__fixunssfsi>:
    1e96:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <__fp_splitA>
    1e9a:	88 f0       	brcs	.+34     	; 0x1ebe <__fixunssfsi+0x28>
    1e9c:	9f 57       	subi	r25, 0x7F	; 127
    1e9e:	98 f0       	brcs	.+38     	; 0x1ec6 <__fixunssfsi+0x30>
    1ea0:	b9 2f       	mov	r27, r25
    1ea2:	99 27       	eor	r25, r25
    1ea4:	b7 51       	subi	r27, 0x17	; 23
    1ea6:	b0 f0       	brcs	.+44     	; 0x1ed4 <__fixunssfsi+0x3e>
    1ea8:	e1 f0       	breq	.+56     	; 0x1ee2 <__fixunssfsi+0x4c>
    1eaa:	66 0f       	add	r22, r22
    1eac:	77 1f       	adc	r23, r23
    1eae:	88 1f       	adc	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	1a f0       	brmi	.+6      	; 0x1eba <__fixunssfsi+0x24>
    1eb4:	ba 95       	dec	r27
    1eb6:	c9 f7       	brne	.-14     	; 0x1eaa <__fixunssfsi+0x14>
    1eb8:	14 c0       	rjmp	.+40     	; 0x1ee2 <__fixunssfsi+0x4c>
    1eba:	b1 30       	cpi	r27, 0x01	; 1
    1ebc:	91 f0       	breq	.+36     	; 0x1ee2 <__fixunssfsi+0x4c>
    1ebe:	0e 94 01 10 	call	0x2002	; 0x2002 <__fp_zero>
    1ec2:	b1 e0       	ldi	r27, 0x01	; 1
    1ec4:	08 95       	ret
    1ec6:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__fp_zero>
    1eca:	67 2f       	mov	r22, r23
    1ecc:	78 2f       	mov	r23, r24
    1ece:	88 27       	eor	r24, r24
    1ed0:	b8 5f       	subi	r27, 0xF8	; 248
    1ed2:	39 f0       	breq	.+14     	; 0x1ee2 <__fixunssfsi+0x4c>
    1ed4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ed6:	cc f3       	brlt	.-14     	; 0x1eca <__fixunssfsi+0x34>
    1ed8:	86 95       	lsr	r24
    1eda:	77 95       	ror	r23
    1edc:	67 95       	ror	r22
    1ede:	b3 95       	inc	r27
    1ee0:	d9 f7       	brne	.-10     	; 0x1ed8 <__fixunssfsi+0x42>
    1ee2:	3e f4       	brtc	.+14     	; 0x1ef2 <__fixunssfsi+0x5c>
    1ee4:	90 95       	com	r25
    1ee6:	80 95       	com	r24
    1ee8:	70 95       	com	r23
    1eea:	61 95       	neg	r22
    1eec:	7f 4f       	sbci	r23, 0xFF	; 255
    1eee:	8f 4f       	sbci	r24, 0xFF	; 255
    1ef0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ef2:	08 95       	ret

00001ef4 <__floatunsisf>:
    1ef4:	e8 94       	clt
    1ef6:	09 c0       	rjmp	.+18     	; 0x1f0a <__floatsisf+0x12>

00001ef8 <__floatsisf>:
    1ef8:	97 fb       	bst	r25, 7
    1efa:	3e f4       	brtc	.+14     	; 0x1f0a <__floatsisf+0x12>
    1efc:	90 95       	com	r25
    1efe:	80 95       	com	r24
    1f00:	70 95       	com	r23
    1f02:	61 95       	neg	r22
    1f04:	7f 4f       	sbci	r23, 0xFF	; 255
    1f06:	8f 4f       	sbci	r24, 0xFF	; 255
    1f08:	9f 4f       	sbci	r25, 0xFF	; 255
    1f0a:	99 23       	and	r25, r25
    1f0c:	a9 f0       	breq	.+42     	; 0x1f38 <__floatsisf+0x40>
    1f0e:	f9 2f       	mov	r31, r25
    1f10:	96 e9       	ldi	r25, 0x96	; 150
    1f12:	bb 27       	eor	r27, r27
    1f14:	93 95       	inc	r25
    1f16:	f6 95       	lsr	r31
    1f18:	87 95       	ror	r24
    1f1a:	77 95       	ror	r23
    1f1c:	67 95       	ror	r22
    1f1e:	b7 95       	ror	r27
    1f20:	f1 11       	cpse	r31, r1
    1f22:	f8 cf       	rjmp	.-16     	; 0x1f14 <__floatsisf+0x1c>
    1f24:	fa f4       	brpl	.+62     	; 0x1f64 <__floatsisf+0x6c>
    1f26:	bb 0f       	add	r27, r27
    1f28:	11 f4       	brne	.+4      	; 0x1f2e <__floatsisf+0x36>
    1f2a:	60 ff       	sbrs	r22, 0
    1f2c:	1b c0       	rjmp	.+54     	; 0x1f64 <__floatsisf+0x6c>
    1f2e:	6f 5f       	subi	r22, 0xFF	; 255
    1f30:	7f 4f       	sbci	r23, 0xFF	; 255
    1f32:	8f 4f       	sbci	r24, 0xFF	; 255
    1f34:	9f 4f       	sbci	r25, 0xFF	; 255
    1f36:	16 c0       	rjmp	.+44     	; 0x1f64 <__floatsisf+0x6c>
    1f38:	88 23       	and	r24, r24
    1f3a:	11 f0       	breq	.+4      	; 0x1f40 <__floatsisf+0x48>
    1f3c:	96 e9       	ldi	r25, 0x96	; 150
    1f3e:	11 c0       	rjmp	.+34     	; 0x1f62 <__floatsisf+0x6a>
    1f40:	77 23       	and	r23, r23
    1f42:	21 f0       	breq	.+8      	; 0x1f4c <__floatsisf+0x54>
    1f44:	9e e8       	ldi	r25, 0x8E	; 142
    1f46:	87 2f       	mov	r24, r23
    1f48:	76 2f       	mov	r23, r22
    1f4a:	05 c0       	rjmp	.+10     	; 0x1f56 <__floatsisf+0x5e>
    1f4c:	66 23       	and	r22, r22
    1f4e:	71 f0       	breq	.+28     	; 0x1f6c <__floatsisf+0x74>
    1f50:	96 e8       	ldi	r25, 0x86	; 134
    1f52:	86 2f       	mov	r24, r22
    1f54:	70 e0       	ldi	r23, 0x00	; 0
    1f56:	60 e0       	ldi	r22, 0x00	; 0
    1f58:	2a f0       	brmi	.+10     	; 0x1f64 <__floatsisf+0x6c>
    1f5a:	9a 95       	dec	r25
    1f5c:	66 0f       	add	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	da f7       	brpl	.-10     	; 0x1f5a <__floatsisf+0x62>
    1f64:	88 0f       	add	r24, r24
    1f66:	96 95       	lsr	r25
    1f68:	87 95       	ror	r24
    1f6a:	97 f9       	bld	r25, 7
    1f6c:	08 95       	ret

00001f6e <__fp_inf>:
    1f6e:	97 f9       	bld	r25, 7
    1f70:	9f 67       	ori	r25, 0x7F	; 127
    1f72:	80 e8       	ldi	r24, 0x80	; 128
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	60 e0       	ldi	r22, 0x00	; 0
    1f78:	08 95       	ret

00001f7a <__fp_nan>:
    1f7a:	9f ef       	ldi	r25, 0xFF	; 255
    1f7c:	80 ec       	ldi	r24, 0xC0	; 192
    1f7e:	08 95       	ret

00001f80 <__fp_pscA>:
    1f80:	00 24       	eor	r0, r0
    1f82:	0a 94       	dec	r0
    1f84:	16 16       	cp	r1, r22
    1f86:	17 06       	cpc	r1, r23
    1f88:	18 06       	cpc	r1, r24
    1f8a:	09 06       	cpc	r0, r25
    1f8c:	08 95       	ret

00001f8e <__fp_pscB>:
    1f8e:	00 24       	eor	r0, r0
    1f90:	0a 94       	dec	r0
    1f92:	12 16       	cp	r1, r18
    1f94:	13 06       	cpc	r1, r19
    1f96:	14 06       	cpc	r1, r20
    1f98:	05 06       	cpc	r0, r21
    1f9a:	08 95       	ret

00001f9c <__fp_round>:
    1f9c:	09 2e       	mov	r0, r25
    1f9e:	03 94       	inc	r0
    1fa0:	00 0c       	add	r0, r0
    1fa2:	11 f4       	brne	.+4      	; 0x1fa8 <__fp_round+0xc>
    1fa4:	88 23       	and	r24, r24
    1fa6:	52 f0       	brmi	.+20     	; 0x1fbc <__fp_round+0x20>
    1fa8:	bb 0f       	add	r27, r27
    1faa:	40 f4       	brcc	.+16     	; 0x1fbc <__fp_round+0x20>
    1fac:	bf 2b       	or	r27, r31
    1fae:	11 f4       	brne	.+4      	; 0x1fb4 <__fp_round+0x18>
    1fb0:	60 ff       	sbrs	r22, 0
    1fb2:	04 c0       	rjmp	.+8      	; 0x1fbc <__fp_round+0x20>
    1fb4:	6f 5f       	subi	r22, 0xFF	; 255
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	08 95       	ret

00001fbe <__fp_split3>:
    1fbe:	57 fd       	sbrc	r21, 7
    1fc0:	90 58       	subi	r25, 0x80	; 128
    1fc2:	44 0f       	add	r20, r20
    1fc4:	55 1f       	adc	r21, r21
    1fc6:	59 f0       	breq	.+22     	; 0x1fde <__fp_splitA+0x10>
    1fc8:	5f 3f       	cpi	r21, 0xFF	; 255
    1fca:	71 f0       	breq	.+28     	; 0x1fe8 <__fp_splitA+0x1a>
    1fcc:	47 95       	ror	r20

00001fce <__fp_splitA>:
    1fce:	88 0f       	add	r24, r24
    1fd0:	97 fb       	bst	r25, 7
    1fd2:	99 1f       	adc	r25, r25
    1fd4:	61 f0       	breq	.+24     	; 0x1fee <__fp_splitA+0x20>
    1fd6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fd8:	79 f0       	breq	.+30     	; 0x1ff8 <__fp_splitA+0x2a>
    1fda:	87 95       	ror	r24
    1fdc:	08 95       	ret
    1fde:	12 16       	cp	r1, r18
    1fe0:	13 06       	cpc	r1, r19
    1fe2:	14 06       	cpc	r1, r20
    1fe4:	55 1f       	adc	r21, r21
    1fe6:	f2 cf       	rjmp	.-28     	; 0x1fcc <__fp_split3+0xe>
    1fe8:	46 95       	lsr	r20
    1fea:	f1 df       	rcall	.-30     	; 0x1fce <__fp_splitA>
    1fec:	08 c0       	rjmp	.+16     	; 0x1ffe <__fp_splitA+0x30>
    1fee:	16 16       	cp	r1, r22
    1ff0:	17 06       	cpc	r1, r23
    1ff2:	18 06       	cpc	r1, r24
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	f1 cf       	rjmp	.-30     	; 0x1fda <__fp_splitA+0xc>
    1ff8:	86 95       	lsr	r24
    1ffa:	71 05       	cpc	r23, r1
    1ffc:	61 05       	cpc	r22, r1
    1ffe:	08 94       	sec
    2000:	08 95       	ret

00002002 <__fp_zero>:
    2002:	e8 94       	clt

00002004 <__fp_szero>:
    2004:	bb 27       	eor	r27, r27
    2006:	66 27       	eor	r22, r22
    2008:	77 27       	eor	r23, r23
    200a:	cb 01       	movw	r24, r22
    200c:	97 f9       	bld	r25, 7
    200e:	08 95       	ret

00002010 <__mulsf3>:
    2010:	0e 94 1b 10 	call	0x2036	; 0x2036 <__mulsf3x>
    2014:	0c 94 ce 0f 	jmp	0x1f9c	; 0x1f9c <__fp_round>
    2018:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__fp_pscA>
    201c:	38 f0       	brcs	.+14     	; 0x202c <__mulsf3+0x1c>
    201e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_pscB>
    2022:	20 f0       	brcs	.+8      	; 0x202c <__mulsf3+0x1c>
    2024:	95 23       	and	r25, r21
    2026:	11 f0       	breq	.+4      	; 0x202c <__mulsf3+0x1c>
    2028:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_inf>
    202c:	0c 94 bd 0f 	jmp	0x1f7a	; 0x1f7a <__fp_nan>
    2030:	11 24       	eor	r1, r1
    2032:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__fp_szero>

00002036 <__mulsf3x>:
    2036:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <__fp_split3>
    203a:	70 f3       	brcs	.-36     	; 0x2018 <__mulsf3+0x8>

0000203c <__mulsf3_pse>:
    203c:	95 9f       	mul	r25, r21
    203e:	c1 f3       	breq	.-16     	; 0x2030 <__mulsf3+0x20>
    2040:	95 0f       	add	r25, r21
    2042:	50 e0       	ldi	r21, 0x00	; 0
    2044:	55 1f       	adc	r21, r21
    2046:	62 9f       	mul	r22, r18
    2048:	f0 01       	movw	r30, r0
    204a:	72 9f       	mul	r23, r18
    204c:	bb 27       	eor	r27, r27
    204e:	f0 0d       	add	r31, r0
    2050:	b1 1d       	adc	r27, r1
    2052:	63 9f       	mul	r22, r19
    2054:	aa 27       	eor	r26, r26
    2056:	f0 0d       	add	r31, r0
    2058:	b1 1d       	adc	r27, r1
    205a:	aa 1f       	adc	r26, r26
    205c:	64 9f       	mul	r22, r20
    205e:	66 27       	eor	r22, r22
    2060:	b0 0d       	add	r27, r0
    2062:	a1 1d       	adc	r26, r1
    2064:	66 1f       	adc	r22, r22
    2066:	82 9f       	mul	r24, r18
    2068:	22 27       	eor	r18, r18
    206a:	b0 0d       	add	r27, r0
    206c:	a1 1d       	adc	r26, r1
    206e:	62 1f       	adc	r22, r18
    2070:	73 9f       	mul	r23, r19
    2072:	b0 0d       	add	r27, r0
    2074:	a1 1d       	adc	r26, r1
    2076:	62 1f       	adc	r22, r18
    2078:	83 9f       	mul	r24, r19
    207a:	a0 0d       	add	r26, r0
    207c:	61 1d       	adc	r22, r1
    207e:	22 1f       	adc	r18, r18
    2080:	74 9f       	mul	r23, r20
    2082:	33 27       	eor	r19, r19
    2084:	a0 0d       	add	r26, r0
    2086:	61 1d       	adc	r22, r1
    2088:	23 1f       	adc	r18, r19
    208a:	84 9f       	mul	r24, r20
    208c:	60 0d       	add	r22, r0
    208e:	21 1d       	adc	r18, r1
    2090:	82 2f       	mov	r24, r18
    2092:	76 2f       	mov	r23, r22
    2094:	6a 2f       	mov	r22, r26
    2096:	11 24       	eor	r1, r1
    2098:	9f 57       	subi	r25, 0x7F	; 127
    209a:	50 40       	sbci	r21, 0x00	; 0
    209c:	9a f0       	brmi	.+38     	; 0x20c4 <__mulsf3_pse+0x88>
    209e:	f1 f0       	breq	.+60     	; 0x20dc <__mulsf3_pse+0xa0>
    20a0:	88 23       	and	r24, r24
    20a2:	4a f0       	brmi	.+18     	; 0x20b6 <__mulsf3_pse+0x7a>
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	bb 1f       	adc	r27, r27
    20aa:	66 1f       	adc	r22, r22
    20ac:	77 1f       	adc	r23, r23
    20ae:	88 1f       	adc	r24, r24
    20b0:	91 50       	subi	r25, 0x01	; 1
    20b2:	50 40       	sbci	r21, 0x00	; 0
    20b4:	a9 f7       	brne	.-22     	; 0x20a0 <__mulsf3_pse+0x64>
    20b6:	9e 3f       	cpi	r25, 0xFE	; 254
    20b8:	51 05       	cpc	r21, r1
    20ba:	80 f0       	brcs	.+32     	; 0x20dc <__mulsf3_pse+0xa0>
    20bc:	0c 94 b7 0f 	jmp	0x1f6e	; 0x1f6e <__fp_inf>
    20c0:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__fp_szero>
    20c4:	5f 3f       	cpi	r21, 0xFF	; 255
    20c6:	e4 f3       	brlt	.-8      	; 0x20c0 <__mulsf3_pse+0x84>
    20c8:	98 3e       	cpi	r25, 0xE8	; 232
    20ca:	d4 f3       	brlt	.-12     	; 0x20c0 <__mulsf3_pse+0x84>
    20cc:	86 95       	lsr	r24
    20ce:	77 95       	ror	r23
    20d0:	67 95       	ror	r22
    20d2:	b7 95       	ror	r27
    20d4:	f7 95       	ror	r31
    20d6:	e7 95       	ror	r30
    20d8:	9f 5f       	subi	r25, 0xFF	; 255
    20da:	c1 f7       	brne	.-16     	; 0x20cc <__mulsf3_pse+0x90>
    20dc:	fe 2b       	or	r31, r30
    20de:	88 0f       	add	r24, r24
    20e0:	91 1d       	adc	r25, r1
    20e2:	96 95       	lsr	r25
    20e4:	87 95       	ror	r24
    20e6:	97 f9       	bld	r25, 7
    20e8:	08 95       	ret

000020ea <__divmodhi4>:
    20ea:	97 fb       	bst	r25, 7
    20ec:	07 2e       	mov	r0, r23
    20ee:	16 f4       	brtc	.+4      	; 0x20f4 <__divmodhi4+0xa>
    20f0:	00 94       	com	r0
    20f2:	07 d0       	rcall	.+14     	; 0x2102 <__divmodhi4_neg1>
    20f4:	77 fd       	sbrc	r23, 7
    20f6:	09 d0       	rcall	.+18     	; 0x210a <__divmodhi4_neg2>
    20f8:	0e 94 ea 10 	call	0x21d4	; 0x21d4 <__udivmodhi4>
    20fc:	07 fc       	sbrc	r0, 7
    20fe:	05 d0       	rcall	.+10     	; 0x210a <__divmodhi4_neg2>
    2100:	3e f4       	brtc	.+14     	; 0x2110 <__divmodhi4_exit>

00002102 <__divmodhi4_neg1>:
    2102:	90 95       	com	r25
    2104:	81 95       	neg	r24
    2106:	9f 4f       	sbci	r25, 0xFF	; 255
    2108:	08 95       	ret

0000210a <__divmodhi4_neg2>:
    210a:	70 95       	com	r23
    210c:	61 95       	neg	r22
    210e:	7f 4f       	sbci	r23, 0xFF	; 255

00002110 <__divmodhi4_exit>:
    2110:	08 95       	ret

00002112 <__udivmodsi4>:
    2112:	a1 e2       	ldi	r26, 0x21	; 33
    2114:	1a 2e       	mov	r1, r26
    2116:	aa 1b       	sub	r26, r26
    2118:	bb 1b       	sub	r27, r27
    211a:	fd 01       	movw	r30, r26
    211c:	0d c0       	rjmp	.+26     	; 0x2138 <__udivmodsi4_ep>

0000211e <__udivmodsi4_loop>:
    211e:	aa 1f       	adc	r26, r26
    2120:	bb 1f       	adc	r27, r27
    2122:	ee 1f       	adc	r30, r30
    2124:	ff 1f       	adc	r31, r31
    2126:	a2 17       	cp	r26, r18
    2128:	b3 07       	cpc	r27, r19
    212a:	e4 07       	cpc	r30, r20
    212c:	f5 07       	cpc	r31, r21
    212e:	20 f0       	brcs	.+8      	; 0x2138 <__udivmodsi4_ep>
    2130:	a2 1b       	sub	r26, r18
    2132:	b3 0b       	sbc	r27, r19
    2134:	e4 0b       	sbc	r30, r20
    2136:	f5 0b       	sbc	r31, r21

00002138 <__udivmodsi4_ep>:
    2138:	66 1f       	adc	r22, r22
    213a:	77 1f       	adc	r23, r23
    213c:	88 1f       	adc	r24, r24
    213e:	99 1f       	adc	r25, r25
    2140:	1a 94       	dec	r1
    2142:	69 f7       	brne	.-38     	; 0x211e <__udivmodsi4_loop>
    2144:	60 95       	com	r22
    2146:	70 95       	com	r23
    2148:	80 95       	com	r24
    214a:	90 95       	com	r25
    214c:	9b 01       	movw	r18, r22
    214e:	ac 01       	movw	r20, r24
    2150:	bd 01       	movw	r22, r26
    2152:	cf 01       	movw	r24, r30
    2154:	08 95       	ret

00002156 <__divmodsi4>:
    2156:	05 2e       	mov	r0, r21
    2158:	97 fb       	bst	r25, 7
    215a:	1e f4       	brtc	.+6      	; 0x2162 <__divmodsi4+0xc>
    215c:	00 94       	com	r0
    215e:	0e 94 c2 10 	call	0x2184	; 0x2184 <__negsi2>
    2162:	57 fd       	sbrc	r21, 7
    2164:	07 d0       	rcall	.+14     	; 0x2174 <__divmodsi4_neg2>
    2166:	0e 94 89 10 	call	0x2112	; 0x2112 <__udivmodsi4>
    216a:	07 fc       	sbrc	r0, 7
    216c:	03 d0       	rcall	.+6      	; 0x2174 <__divmodsi4_neg2>
    216e:	4e f4       	brtc	.+18     	; 0x2182 <__divmodsi4_exit>
    2170:	0c 94 c2 10 	jmp	0x2184	; 0x2184 <__negsi2>

00002174 <__divmodsi4_neg2>:
    2174:	50 95       	com	r21
    2176:	40 95       	com	r20
    2178:	30 95       	com	r19
    217a:	21 95       	neg	r18
    217c:	3f 4f       	sbci	r19, 0xFF	; 255
    217e:	4f 4f       	sbci	r20, 0xFF	; 255
    2180:	5f 4f       	sbci	r21, 0xFF	; 255

00002182 <__divmodsi4_exit>:
    2182:	08 95       	ret

00002184 <__negsi2>:
    2184:	90 95       	com	r25
    2186:	80 95       	com	r24
    2188:	70 95       	com	r23
    218a:	61 95       	neg	r22
    218c:	7f 4f       	sbci	r23, 0xFF	; 255
    218e:	8f 4f       	sbci	r24, 0xFF	; 255
    2190:	9f 4f       	sbci	r25, 0xFF	; 255
    2192:	08 95       	ret

00002194 <__tablejump2__>:
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	05 90       	lpm	r0, Z+
    219a:	f4 91       	lpm	r31, Z
    219c:	e0 2d       	mov	r30, r0
    219e:	09 94       	ijmp

000021a0 <__umulhisi3>:
    21a0:	a2 9f       	mul	r26, r18
    21a2:	b0 01       	movw	r22, r0
    21a4:	b3 9f       	mul	r27, r19
    21a6:	c0 01       	movw	r24, r0
    21a8:	a3 9f       	mul	r26, r19
    21aa:	70 0d       	add	r23, r0
    21ac:	81 1d       	adc	r24, r1
    21ae:	11 24       	eor	r1, r1
    21b0:	91 1d       	adc	r25, r1
    21b2:	b2 9f       	mul	r27, r18
    21b4:	70 0d       	add	r23, r0
    21b6:	81 1d       	adc	r24, r1
    21b8:	11 24       	eor	r1, r1
    21ba:	91 1d       	adc	r25, r1
    21bc:	08 95       	ret

000021be <__muluhisi3>:
    21be:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <__umulhisi3>
    21c2:	a5 9f       	mul	r26, r21
    21c4:	90 0d       	add	r25, r0
    21c6:	b4 9f       	mul	r27, r20
    21c8:	90 0d       	add	r25, r0
    21ca:	a4 9f       	mul	r26, r20
    21cc:	80 0d       	add	r24, r0
    21ce:	91 1d       	adc	r25, r1
    21d0:	11 24       	eor	r1, r1
    21d2:	08 95       	ret

000021d4 <__udivmodhi4>:
    21d4:	aa 1b       	sub	r26, r26
    21d6:	bb 1b       	sub	r27, r27
    21d8:	51 e1       	ldi	r21, 0x11	; 17
    21da:	07 c0       	rjmp	.+14     	; 0x21ea <__udivmodhi4_ep>

000021dc <__udivmodhi4_loop>:
    21dc:	aa 1f       	adc	r26, r26
    21de:	bb 1f       	adc	r27, r27
    21e0:	a6 17       	cp	r26, r22
    21e2:	b7 07       	cpc	r27, r23
    21e4:	10 f0       	brcs	.+4      	; 0x21ea <__udivmodhi4_ep>
    21e6:	a6 1b       	sub	r26, r22
    21e8:	b7 0b       	sbc	r27, r23

000021ea <__udivmodhi4_ep>:
    21ea:	88 1f       	adc	r24, r24
    21ec:	99 1f       	adc	r25, r25
    21ee:	5a 95       	dec	r21
    21f0:	a9 f7       	brne	.-22     	; 0x21dc <__udivmodhi4_loop>
    21f2:	80 95       	com	r24
    21f4:	90 95       	com	r25
    21f6:	bc 01       	movw	r22, r24
    21f8:	cd 01       	movw	r24, r26
    21fa:	08 95       	ret

000021fc <_exit>:
    21fc:	f8 94       	cli

000021fe <__stop_program>:
    21fe:	ff cf       	rjmp	.-2      	; 0x21fe <__stop_program>
