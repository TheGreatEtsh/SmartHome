
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b4  00800060  000021d0  00002264  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800214  00800214  00002418  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000430  00000000  00000000  00002484  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005131  00000000  00000000  000028b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000158a  00000000  00000000  000079e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000286e  00000000  00000000  00008f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  0000b7e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e7d  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002e38  00000000  00000000  0000cedd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000378  00000000  00000000  0000fd15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 5d 00 	jmp	0xba	; 0xba <__ctors_end>
       4:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
       c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      10:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      14:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      18:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      1c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      20:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      24:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      28:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      2c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      30:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      34:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      38:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      3c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      40:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      44:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      48:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      4c:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      50:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__bad_interrupt>
      54:	a3 04       	cpc	r10, r3
      56:	5a 05       	cpc	r21, r10
      58:	97 04       	cpc	r9, r7
      5a:	9c 05       	cpc	r25, r12
      5c:	d4 05       	cpc	r29, r4
      5e:	fe 05       	cpc	r31, r14
      60:	97 04       	cpc	r9, r7
      62:	97 04       	cpc	r9, r7
      64:	97 04       	cpc	r9, r7
      66:	97 04       	cpc	r9, r7
      68:	97 04       	cpc	r9, r7
      6a:	97 04       	cpc	r9, r7
      6c:	97 04       	cpc	r9, r7
      6e:	97 04       	cpc	r9, r7
      70:	97 04       	cpc	r9, r7
      72:	97 04       	cpc	r9, r7
      74:	97 04       	cpc	r9, r7
      76:	97 04       	cpc	r9, r7
      78:	97 04       	cpc	r9, r7
      7a:	97 04       	cpc	r9, r7
      7c:	97 04       	cpc	r9, r7
      7e:	97 04       	cpc	r9, r7
      80:	97 04       	cpc	r9, r7
      82:	97 04       	cpc	r9, r7
      84:	97 04       	cpc	r9, r7
      86:	97 04       	cpc	r9, r7
      88:	97 04       	cpc	r9, r7
      8a:	97 04       	cpc	r9, r7
      8c:	97 04       	cpc	r9, r7
      8e:	97 04       	cpc	r9, r7
      90:	97 04       	cpc	r9, r7
      92:	97 04       	cpc	r9, r7
      94:	97 04       	cpc	r9, r7
      96:	97 04       	cpc	r9, r7
      98:	97 04       	cpc	r9, r7
      9a:	97 04       	cpc	r9, r7
      9c:	97 04       	cpc	r9, r7
      9e:	97 04       	cpc	r9, r7
      a0:	97 04       	cpc	r9, r7
      a2:	97 04       	cpc	r9, r7
      a4:	97 04       	cpc	r9, r7
      a6:	97 04       	cpc	r9, r7
      a8:	97 04       	cpc	r9, r7
      aa:	97 04       	cpc	r9, r7
      ac:	97 04       	cpc	r9, r7
      ae:	97 04       	cpc	r9, r7
      b0:	97 04       	cpc	r9, r7
      b2:	97 04       	cpc	r9, r7
      b4:	a9 04       	cpc	r10, r9
      b6:	ca 04       	cpc	r12, r10
      b8:	24 05       	cpc	r18, r4

000000ba <__ctors_end>:
      ba:	11 24       	eor	r1, r1
      bc:	1f be       	out	0x3f, r1	; 63
      be:	cf e5       	ldi	r28, 0x5F	; 95
      c0:	d8 e0       	ldi	r29, 0x08	; 8
      c2:	de bf       	out	0x3e, r29	; 62
      c4:	cd bf       	out	0x3d, r28	; 61

000000c6 <__do_copy_data>:
      c6:	12 e0       	ldi	r17, 0x02	; 2
      c8:	a0 e6       	ldi	r26, 0x60	; 96
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	e0 ed       	ldi	r30, 0xD0	; 208
      ce:	f1 e2       	ldi	r31, 0x21	; 33
      d0:	02 c0       	rjmp	.+4      	; 0xd6 <__do_copy_data+0x10>
      d2:	05 90       	lpm	r0, Z+
      d4:	0d 92       	st	X+, r0
      d6:	a4 31       	cpi	r26, 0x14	; 20
      d8:	b1 07       	cpc	r27, r17
      da:	d9 f7       	brne	.-10     	; 0xd2 <__do_copy_data+0xc>

000000dc <__do_clear_bss>:
      dc:	22 e0       	ldi	r18, 0x02	; 2
      de:	a4 e1       	ldi	r26, 0x14	; 20
      e0:	b2 e0       	ldi	r27, 0x02	; 2
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	a7 31       	cpi	r26, 0x17	; 23
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	0e 94 60 04 	call	0x8c0	; 0x8c0 <main>
      f0:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <_exit>

000000f4 <__bad_interrupt>:
      f4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f8 <A_Main_ExtInt0Exc>:
	H_Eeprom_Write('2',0,102);
	H_Eeprom_Write('3',0,103);	
	H_Eeprom_Write('1',0,104);	
	H_Eeprom_Write('2',0,105);	
	H_Eeprom_Write('3',0,106);	
	H_Eeprom_Write('4',0,107);		
      f8:	08 95       	ret

000000fa <AddUser>:
      fa:	af 92       	push	r10
      fc:	bf 92       	push	r11
      fe:	cf 92       	push	r12
     100:	df 92       	push	r13
     102:	ef 92       	push	r14
     104:	ff 92       	push	r15
     106:	0f 93       	push	r16
     108:	1f 93       	push	r17
     10a:	cf 93       	push	r28
     10c:	df 93       	push	r29
     10e:	8c 01       	movw	r16, r24
     110:	7b 01       	movw	r14, r22
     112:	64 e6       	ldi	r22, 0x64	; 100
     114:	80 e0       	ldi	r24, 0x00	; 0
     116:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     11a:	b8 2e       	mov	r11, r24
     11c:	29 e0       	ldi	r18, 0x09	; 9
     11e:	28 17       	cp	r18, r24
     120:	08 f4       	brcc	.+2      	; 0x124 <AddUser+0x2a>
     122:	c8 c0       	rjmp	.+400    	; 0x2b4 <AddUser+0x1ba>
     124:	81 11       	cpse	r24, r1
     126:	2f c0       	rjmp	.+94     	; 0x186 <AddUser+0x8c>
     128:	6c c0       	rjmp	.+216    	; 0x202 <AddUser+0x108>
     12a:	dd 2d       	mov	r29, r13
     12c:	dd 0f       	add	r29, r29
     12e:	dd 0f       	add	r29, r29
     130:	dd 0f       	add	r29, r29
     132:	dd 19       	sub	r29, r13
     134:	0f 2e       	mov	r0, r31
     136:	f3 e0       	ldi	r31, 0x03	; 3
     138:	cf 2e       	mov	r12, r31
     13a:	f0 2d       	mov	r31, r0
     13c:	c0 e0       	ldi	r28, 0x00	; 0
     13e:	0d c0       	rjmp	.+26     	; 0x15a <AddUser+0x60>
     140:	6c 2f       	mov	r22, r28
     142:	6d 0f       	add	r22, r29
     144:	80 e0       	ldi	r24, 0x00	; 0
     146:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     14a:	f8 01       	movw	r30, r16
     14c:	ec 0f       	add	r30, r28
     14e:	f1 1d       	adc	r31, r1
     150:	90 81       	ld	r25, Z
     152:	89 13       	cpse	r24, r25
     154:	01 c0       	rjmp	.+2      	; 0x158 <AddUser+0x5e>
     156:	ca 94       	dec	r12
     158:	cf 5f       	subi	r28, 0xFF	; 255
     15a:	c3 30       	cpi	r28, 0x03	; 3
     15c:	88 f3       	brcs	.-30     	; 0x140 <AddUser+0x46>
     15e:	c1 10       	cpse	r12, r1
     160:	10 c0       	rjmp	.+32     	; 0x182 <AddUser+0x88>
     162:	a3 94       	inc	r10
     164:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     168:	80 e6       	ldi	r24, 0x60	; 96
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     170:	8f ef       	ldi	r24, 0xFF	; 255
     172:	99 e6       	ldi	r25, 0x69	; 105
     174:	28 e1       	ldi	r18, 0x18	; 24
     176:	81 50       	subi	r24, 0x01	; 1
     178:	90 40       	sbci	r25, 0x00	; 0
     17a:	20 40       	sbci	r18, 0x00	; 0
     17c:	e1 f7       	brne	.-8      	; 0x176 <AddUser+0x7c>
     17e:	00 c0       	rjmp	.+0      	; 0x180 <AddUser+0x86>
     180:	00 00       	nop
     182:	d3 94       	inc	r13
     184:	02 c0       	rjmp	.+4      	; 0x18a <AddUser+0x90>
     186:	a1 2c       	mov	r10, r1
     188:	d1 2c       	mov	r13, r1
     18a:	db 14       	cp	r13, r11
     18c:	70 f2       	brcs	.-100    	; 0x12a <AddUser+0x30>
     18e:	a1 10       	cpse	r10, r1
     190:	a8 c0       	rjmp	.+336    	; 0x2e2 <AddUser+0x1e8>
     192:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     196:	81 e7       	ldi	r24, 0x71	; 113
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     19e:	8f ef       	ldi	r24, 0xFF	; 255
     1a0:	99 e6       	ldi	r25, 0x69	; 105
     1a2:	28 e1       	ldi	r18, 0x18	; 24
     1a4:	81 50       	subi	r24, 0x01	; 1
     1a6:	90 40       	sbci	r25, 0x00	; 0
     1a8:	20 40       	sbci	r18, 0x00	; 0
     1aa:	e1 f7       	brne	.-8      	; 0x1a4 <AddUser+0xaa>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <AddUser+0xb4>
     1ae:	00 00       	nop
     1b0:	db 2d       	mov	r29, r11
     1b2:	dd 0f       	add	r29, r29
     1b4:	dd 0f       	add	r29, r29
     1b6:	dd 0f       	add	r29, r29
     1b8:	db 19       	sub	r29, r11
     1ba:	c0 e0       	ldi	r28, 0x00	; 0
     1bc:	0a c0       	rjmp	.+20     	; 0x1d2 <AddUser+0xd8>
     1be:	4c 2f       	mov	r20, r28
     1c0:	4d 0f       	add	r20, r29
     1c2:	f8 01       	movw	r30, r16
     1c4:	ec 0f       	add	r30, r28
     1c6:	f1 1d       	adc	r31, r1
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     1d0:	cf 5f       	subi	r28, 0xFF	; 255
     1d2:	c3 30       	cpi	r28, 0x03	; 3
     1d4:	a0 f3       	brcs	.-24     	; 0x1be <AddUser+0xc4>
     1d6:	c0 e0       	ldi	r28, 0x00	; 0
     1d8:	0b c0       	rjmp	.+22     	; 0x1f0 <AddUser+0xf6>
     1da:	4c 2f       	mov	r20, r28
     1dc:	4d 0f       	add	r20, r29
     1de:	4d 5f       	subi	r20, 0xFD	; 253
     1e0:	f7 01       	movw	r30, r14
     1e2:	ec 0f       	add	r30, r28
     1e4:	f1 1d       	adc	r31, r1
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	80 81       	ld	r24, Z
     1ea:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     1ee:	cf 5f       	subi	r28, 0xFF	; 255
     1f0:	c4 30       	cpi	r28, 0x04	; 4
     1f2:	98 f3       	brcs	.-26     	; 0x1da <AddUser+0xe0>
     1f4:	44 e6       	ldi	r20, 0x64	; 100
     1f6:	60 e0       	ldi	r22, 0x00	; 0
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	8b 0d       	add	r24, r11
     1fc:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     200:	70 c0       	rjmp	.+224    	; 0x2e2 <AddUser+0x1e8>
     202:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     206:	81 e7       	ldi	r24, 0x71	; 113
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     20e:	8f ef       	ldi	r24, 0xFF	; 255
     210:	99 e6       	ldi	r25, 0x69	; 105
     212:	28 e1       	ldi	r18, 0x18	; 24
     214:	81 50       	subi	r24, 0x01	; 1
     216:	90 40       	sbci	r25, 0x00	; 0
     218:	20 40       	sbci	r18, 0x00	; 0
     21a:	e1 f7       	brne	.-8      	; 0x214 <AddUser+0x11a>
     21c:	00 c0       	rjmp	.+0      	; 0x21e <AddUser+0x124>
     21e:	00 00       	nop
     220:	db 2d       	mov	r29, r11
     222:	dd 0f       	add	r29, r29
     224:	dd 0f       	add	r29, r29
     226:	dd 0f       	add	r29, r29
     228:	db 19       	sub	r29, r11
     22a:	c0 e0       	ldi	r28, 0x00	; 0
     22c:	0a c0       	rjmp	.+20     	; 0x242 <AddUser+0x148>
     22e:	4c 2f       	mov	r20, r28
     230:	4d 0f       	add	r20, r29
     232:	f8 01       	movw	r30, r16
     234:	ec 0f       	add	r30, r28
     236:	f1 1d       	adc	r31, r1
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	80 81       	ld	r24, Z
     23c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     240:	cf 5f       	subi	r28, 0xFF	; 255
     242:	c3 30       	cpi	r28, 0x03	; 3
     244:	a0 f3       	brcs	.-24     	; 0x22e <AddUser+0x134>
     246:	c0 e0       	ldi	r28, 0x00	; 0
     248:	0b c0       	rjmp	.+22     	; 0x260 <AddUser+0x166>
     24a:	4c 2f       	mov	r20, r28
     24c:	4d 0f       	add	r20, r29
     24e:	4d 5f       	subi	r20, 0xFD	; 253
     250:	f7 01       	movw	r30, r14
     252:	ec 0f       	add	r30, r28
     254:	f1 1d       	adc	r31, r1
     256:	60 e0       	ldi	r22, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     25e:	cf 5f       	subi	r28, 0xFF	; 255
     260:	c4 30       	cpi	r28, 0x04	; 4
     262:	98 f3       	brcs	.-26     	; 0x24a <AddUser+0x150>
     264:	44 e6       	ldi	r20, 0x64	; 100
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	8b 0d       	add	r24, r11
     26c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     270:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     274:	8d e7       	ldi	r24, 0x7D	; 125
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     27c:	60 e0       	ldi	r22, 0x00	; 0
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     284:	88 e8       	ldi	r24, 0x88	; 136
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     28c:	64 e6       	ldi	r22, 0x64	; 100
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     294:	68 2f       	mov	r22, r24
     296:	70 e0       	ldi	r23, 0x00	; 0
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	0e 94 57 09 	call	0x12ae	; 0x12ae <H_Lcd_WriteNumber>
     2a0:	8f ef       	ldi	r24, 0xFF	; 255
     2a2:	99 e6       	ldi	r25, 0x69	; 105
     2a4:	28 e1       	ldi	r18, 0x18	; 24
     2a6:	81 50       	subi	r24, 0x01	; 1
     2a8:	90 40       	sbci	r25, 0x00	; 0
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <AddUser+0x1ac>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <AddUser+0x1b6>
     2b0:	00 00       	nop
     2b2:	17 c0       	rjmp	.+46     	; 0x2e2 <AddUser+0x1e8>
     2b4:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     2b8:	85 e9       	ldi	r24, 0x95	; 149
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     2c0:	60 e0       	ldi	r22, 0x00	; 0
     2c2:	81 e0       	ldi	r24, 0x01	; 1
     2c4:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     2c8:	81 ea       	ldi	r24, 0xA1	; 161
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	99 e6       	ldi	r25, 0x69	; 105
     2d4:	28 e1       	ldi	r18, 0x18	; 24
     2d6:	81 50       	subi	r24, 0x01	; 1
     2d8:	90 40       	sbci	r25, 0x00	; 0
     2da:	20 40       	sbci	r18, 0x00	; 0
     2dc:	e1 f7       	brne	.-8      	; 0x2d6 <AddUser+0x1dc>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <AddUser+0x1e6>
     2e0:	00 00       	nop
     2e2:	df 91       	pop	r29
     2e4:	cf 91       	pop	r28
     2e6:	1f 91       	pop	r17
     2e8:	0f 91       	pop	r16
     2ea:	ff 90       	pop	r15
     2ec:	ef 90       	pop	r14
     2ee:	df 90       	pop	r13
     2f0:	cf 90       	pop	r12
     2f2:	bf 90       	pop	r11
     2f4:	af 90       	pop	r10
     2f6:	08 95       	ret

000002f8 <DeleteUser>:
     2f8:	cf 92       	push	r12
     2fa:	df 92       	push	r13
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	81 11       	cpse	r24, r1
     30a:	53 c0       	rjmp	.+166    	; 0x3b2 <DeleteUser+0xba>
     30c:	62 c0       	rjmp	.+196    	; 0x3d2 <DeleteUser+0xda>
     30e:	df 2d       	mov	r29, r15
     310:	dd 0f       	add	r29, r29
     312:	dd 0f       	add	r29, r29
     314:	dd 0f       	add	r29, r29
     316:	df 19       	sub	r29, r15
     318:	e1 2c       	mov	r14, r1
     31a:	c0 e0       	ldi	r28, 0x00	; 0
     31c:	0d c0       	rjmp	.+26     	; 0x338 <DeleteUser+0x40>
     31e:	6c 2f       	mov	r22, r28
     320:	6d 0f       	add	r22, r29
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     328:	f8 01       	movw	r30, r16
     32a:	ec 0f       	add	r30, r28
     32c:	f1 1d       	adc	r31, r1
     32e:	90 81       	ld	r25, Z
     330:	89 13       	cpse	r24, r25
     332:	01 c0       	rjmp	.+2      	; 0x336 <DeleteUser+0x3e>
     334:	e3 94       	inc	r14
     336:	cf 5f       	subi	r28, 0xFF	; 255
     338:	c3 30       	cpi	r28, 0x03	; 3
     33a:	88 f3       	brcs	.-30     	; 0x31e <DeleteUser+0x26>
     33c:	23 e0       	ldi	r18, 0x03	; 3
     33e:	e2 12       	cpse	r14, r18
     340:	0e c0       	rjmp	.+28     	; 0x35e <DeleteUser+0x66>
     342:	81 eb       	ldi	r24, 0xB1	; 177
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     34a:	8f ef       	ldi	r24, 0xFF	; 255
     34c:	93 ec       	ldi	r25, 0xC3	; 195
     34e:	29 e0       	ldi	r18, 0x09	; 9
     350:	81 50       	subi	r24, 0x01	; 1
     352:	90 40       	sbci	r25, 0x00	; 0
     354:	20 40       	sbci	r18, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <DeleteUser+0x58>
     358:	00 c0       	rjmp	.+0      	; 0x35a <DeleteUser+0x62>
     35a:	00 00       	nop
     35c:	c3 94       	inc	r12
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	c8 12       	cpse	r12, r24
     362:	25 c0       	rjmp	.+74     	; 0x3ae <DeleteUser+0xb6>
     364:	0d c0       	rjmp	.+26     	; 0x380 <DeleteUser+0x88>
     366:	ec 2e       	mov	r14, r28
     368:	ed 0e       	add	r14, r29
     36a:	67 e0       	ldi	r22, 0x07	; 7
     36c:	6e 0d       	add	r22, r14
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     374:	4e 2d       	mov	r20, r14
     376:	60 e0       	ldi	r22, 0x00	; 0
     378:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     37c:	cf 5f       	subi	r28, 0xFF	; 255
     37e:	01 c0       	rjmp	.+2      	; 0x382 <DeleteUser+0x8a>
     380:	c0 e0       	ldi	r28, 0x00	; 0
     382:	c3 30       	cpi	r28, 0x03	; 3
     384:	80 f3       	brcs	.-32     	; 0x366 <DeleteUser+0x6e>
     386:	c0 e0       	ldi	r28, 0x00	; 0
     388:	10 c0       	rjmp	.+32     	; 0x3aa <DeleteUser+0xb2>
     38a:	6c 2f       	mov	r22, r28
     38c:	6d 0f       	add	r22, r29
     38e:	0f 2e       	mov	r0, r31
     390:	f3 e0       	ldi	r31, 0x03	; 3
     392:	ef 2e       	mov	r14, r31
     394:	f0 2d       	mov	r31, r0
     396:	e6 0e       	add	r14, r22
     398:	66 5f       	subi	r22, 0xF6	; 246
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     3a0:	4e 2d       	mov	r20, r14
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     3a8:	cf 5f       	subi	r28, 0xFF	; 255
     3aa:	c4 30       	cpi	r28, 0x04	; 4
     3ac:	70 f3       	brcs	.-36     	; 0x38a <DeleteUser+0x92>
     3ae:	f3 94       	inc	r15
     3b0:	04 c0       	rjmp	.+8      	; 0x3ba <DeleteUser+0xc2>
     3b2:	8b 01       	movw	r16, r22
     3b4:	d8 2e       	mov	r13, r24
     3b6:	c1 2c       	mov	r12, r1
     3b8:	f1 2c       	mov	r15, r1
     3ba:	fd 14       	cp	r15, r13
     3bc:	08 f4       	brcc	.+2      	; 0x3c0 <DeleteUser+0xc8>
     3be:	a7 cf       	rjmp	.-178    	; 0x30e <DeleteUser+0x16>
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	c9 12       	cpse	r12, r25
     3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <DeleteUser+0xda>
     3c6:	44 e6       	ldi	r20, 0x64	; 100
     3c8:	60 e0       	ldi	r22, 0x00	; 0
     3ca:	8f ef       	ldi	r24, 0xFF	; 255
     3cc:	8d 0d       	add	r24, r13
     3ce:	0e 94 3f 06 	call	0xc7e	; 0xc7e <H_Eeprom_Write>
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	0f 91       	pop	r16
     3da:	ff 90       	pop	r15
     3dc:	ef 90       	pop	r14
     3de:	df 90       	pop	r13
     3e0:	cf 90       	pop	r12
     3e2:	08 95       	ret

000003e4 <AdminLogin>:
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	7c 01       	movw	r14, r24
     3f2:	8b 01       	movw	r16, r22
     3f4:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     3f8:	c0 e0       	ldi	r28, 0x00	; 0
     3fa:	d0 e0       	ldi	r29, 0x00	; 0
     3fc:	0d c0       	rjmp	.+26     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     3fe:	65 e6       	ldi	r22, 0x65	; 101
     400:	6c 0f       	add	r22, r28
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     408:	f7 01       	movw	r30, r14
     40a:	ec 0f       	add	r30, r28
     40c:	f1 1d       	adc	r31, r1
     40e:	90 81       	ld	r25, Z
     410:	89 13       	cpse	r24, r25
     412:	01 c0       	rjmp	.+2      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
     414:	df 5f       	subi	r29, 0xFF	; 255
     416:	cf 5f       	subi	r28, 0xFF	; 255
     418:	c3 30       	cpi	r28, 0x03	; 3
     41a:	88 f3       	brcs	.-30     	; 0x3fe <AdminLogin+0x1a>
     41c:	c0 e0       	ldi	r28, 0x00	; 0
     41e:	f1 2c       	mov	r15, r1
     420:	0d c0       	rjmp	.+26     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
     422:	68 e6       	ldi	r22, 0x68	; 104
     424:	6c 0f       	add	r22, r28
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     42c:	f8 01       	movw	r30, r16
     42e:	ec 0f       	add	r30, r28
     430:	f1 1d       	adc	r31, r1
     432:	90 81       	ld	r25, Z
     434:	89 13       	cpse	r24, r25
     436:	01 c0       	rjmp	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     438:	f3 94       	inc	r15
     43a:	cf 5f       	subi	r28, 0xFF	; 255
     43c:	c4 30       	cpi	r28, 0x04	; 4
     43e:	88 f3       	brcs	.-30     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
     440:	d3 30       	cpi	r29, 0x03	; 3
     442:	91 f4       	brne	.+36     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     444:	24 e0       	ldi	r18, 0x04	; 4
     446:	f2 12       	cpse	r15, r18
     448:	0f c0       	rjmp	.+30     	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     44a:	80 ec       	ldi	r24, 0xC0	; 192
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     452:	8f ef       	ldi	r24, 0xFF	; 255
     454:	99 e6       	ldi	r25, 0x69	; 105
     456:	28 e1       	ldi	r18, 0x18	; 24
     458:	81 50       	subi	r24, 0x01	; 1
     45a:	90 40       	sbci	r25, 0x00	; 0
     45c:	20 40       	sbci	r18, 0x00	; 0
     45e:	e1 f7       	brne	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
     460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
     462:	00 00       	nop
     464:	c0 e0       	ldi	r28, 0x00	; 0
     466:	47 c0       	rjmp	.+142    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     468:	84 e0       	ldi	r24, 0x04	; 4
     46a:	f8 12       	cpse	r15, r24
     46c:	11 c0       	rjmp	.+34     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     46e:	d3 30       	cpi	r29, 0x03	; 3
     470:	79 f0       	breq	.+30     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     472:	80 e6       	ldi	r24, 0x60	; 96
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     47a:	9f ef       	ldi	r25, 0xFF	; 255
     47c:	29 e6       	ldi	r18, 0x69	; 105
     47e:	88 e1       	ldi	r24, 0x18	; 24
     480:	91 50       	subi	r25, 0x01	; 1
     482:	20 40       	sbci	r18, 0x00	; 0
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
     488:	00 c0       	rjmp	.+0      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     48a:	00 00       	nop
     48c:	c1 e0       	ldi	r28, 0x01	; 1
     48e:	33 c0       	rjmp	.+102    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     490:	d3 30       	cpi	r29, 0x03	; 3
     492:	91 f4       	brne	.+36     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     494:	94 e0       	ldi	r25, 0x04	; 4
     496:	f9 16       	cp	r15, r25
     498:	79 f0       	breq	.+30     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
     49a:	81 ed       	ldi	r24, 0xD1	; 209
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     4a2:	2f ef       	ldi	r18, 0xFF	; 255
     4a4:	89 e6       	ldi	r24, 0x69	; 105
     4a6:	98 e1       	ldi	r25, 0x18	; 24
     4a8:	21 50       	subi	r18, 0x01	; 1
     4aa:	80 40       	sbci	r24, 0x00	; 0
     4ac:	90 40       	sbci	r25, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <__EEPROM_REGION_LENGTH__+0xb2>
     4b2:	00 00       	nop
     4b4:	c1 e0       	ldi	r28, 0x01	; 1
     4b6:	1f c0       	rjmp	.+62     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4b8:	d3 30       	cpi	r29, 0x03	; 3
     4ba:	d1 f0       	breq	.+52     	; 0x4f0 <__EEPROM_REGION_LENGTH__+0xf0>
     4bc:	24 e0       	ldi	r18, 0x04	; 4
     4be:	f2 16       	cp	r15, r18
     4c0:	c9 f0       	breq	.+50     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
     4c2:	80 e6       	ldi	r24, 0x60	; 96
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     4d2:	81 ed       	ldi	r24, 0xD1	; 209
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     4da:	8f ef       	ldi	r24, 0xFF	; 255
     4dc:	99 e6       	ldi	r25, 0x69	; 105
     4de:	28 e1       	ldi	r18, 0x18	; 24
     4e0:	81 50       	subi	r24, 0x01	; 1
     4e2:	90 40       	sbci	r25, 0x00	; 0
     4e4:	20 40       	sbci	r18, 0x00	; 0
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
     4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__EEPROM_REGION_LENGTH__+0xea>
     4ea:	00 00       	nop
     4ec:	c1 e0       	ldi	r28, 0x01	; 1
     4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4f0:	c0 e0       	ldi	r28, 0x00	; 0
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
     4f4:	c0 e0       	ldi	r28, 0x00	; 0
     4f6:	8f ef       	ldi	r24, 0xFF	; 255
     4f8:	95 ea       	ldi	r25, 0xA5	; 165
     4fa:	2e e0       	ldi	r18, 0x0E	; 14
     4fc:	81 50       	subi	r24, 0x01	; 1
     4fe:	90 40       	sbci	r25, 0x00	; 0
     500:	20 40       	sbci	r18, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     504:	00 c0       	rjmp	.+0      	; 0x506 <__EEPROM_REGION_LENGTH__+0x106>
     506:	00 00       	nop
     508:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     50c:	8f ef       	ldi	r24, 0xFF	; 255
     50e:	95 ea       	ldi	r25, 0xA5	; 165
     510:	2e e0       	ldi	r18, 0x0E	; 14
     512:	81 50       	subi	r24, 0x01	; 1
     514:	90 40       	sbci	r25, 0x00	; 0
     516:	20 40       	sbci	r18, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <__EEPROM_REGION_LENGTH__+0x112>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
     51c:	00 00       	nop
     51e:	8c 2f       	mov	r24, r28
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	1f 91       	pop	r17
     526:	0f 91       	pop	r16
     528:	ff 90       	pop	r15
     52a:	ef 90       	pop	r14
     52c:	08 95       	ret

0000052e <UserLogin>:
     52e:	af 92       	push	r10
     530:	bf 92       	push	r11
     532:	cf 92       	push	r12
     534:	df 92       	push	r13
     536:	ef 92       	push	r14
     538:	ff 92       	push	r15
     53a:	0f 93       	push	r16
     53c:	1f 93       	push	r17
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	7c 01       	movw	r14, r24
     544:	8b 01       	movw	r16, r22
     546:	64 e6       	ldi	r22, 0x64	; 100
     548:	80 e0       	ldi	r24, 0x00	; 0
     54a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     54e:	b8 2e       	mov	r11, r24
     550:	81 11       	cpse	r24, r1
     552:	33 c0       	rjmp	.+102    	; 0x5ba <UserLogin+0x8c>
     554:	51 c0       	rjmp	.+162    	; 0x5f8 <UserLogin+0xca>
     556:	dd 2d       	mov	r29, r13
     558:	dd 0f       	add	r29, r29
     55a:	dd 0f       	add	r29, r29
     55c:	dd 0f       	add	r29, r29
     55e:	dd 19       	sub	r29, r13
     560:	c0 e0       	ldi	r28, 0x00	; 0
     562:	c1 2c       	mov	r12, r1
     564:	0d c0       	rjmp	.+26     	; 0x580 <UserLogin+0x52>
     566:	6c 2f       	mov	r22, r28
     568:	6d 0f       	add	r22, r29
     56a:	80 e0       	ldi	r24, 0x00	; 0
     56c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     570:	f7 01       	movw	r30, r14
     572:	ec 0f       	add	r30, r28
     574:	f1 1d       	adc	r31, r1
     576:	90 81       	ld	r25, Z
     578:	89 13       	cpse	r24, r25
     57a:	01 c0       	rjmp	.+2      	; 0x57e <UserLogin+0x50>
     57c:	c3 94       	inc	r12
     57e:	cf 5f       	subi	r28, 0xFF	; 255
     580:	c3 30       	cpi	r28, 0x03	; 3
     582:	88 f3       	brcs	.-30     	; 0x566 <UserLogin+0x38>
     584:	c0 e0       	ldi	r28, 0x00	; 0
     586:	a1 2c       	mov	r10, r1
     588:	0e c0       	rjmp	.+28     	; 0x5a6 <UserLogin+0x78>
     58a:	6c 2f       	mov	r22, r28
     58c:	6d 0f       	add	r22, r29
     58e:	6d 5f       	subi	r22, 0xFD	; 253
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     596:	f8 01       	movw	r30, r16
     598:	ec 0f       	add	r30, r28
     59a:	f1 1d       	adc	r31, r1
     59c:	90 81       	ld	r25, Z
     59e:	89 13       	cpse	r24, r25
     5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <UserLogin+0x76>
     5a2:	a3 94       	inc	r10
     5a4:	cf 5f       	subi	r28, 0xFF	; 255
     5a6:	c4 30       	cpi	r28, 0x04	; 4
     5a8:	80 f3       	brcs	.-32     	; 0x58a <UserLogin+0x5c>
     5aa:	23 e0       	ldi	r18, 0x03	; 3
     5ac:	c2 12       	cpse	r12, r18
     5ae:	03 c0       	rjmp	.+6      	; 0x5b6 <UserLogin+0x88>
     5b0:	84 e0       	ldi	r24, 0x04	; 4
     5b2:	a8 16       	cp	r10, r24
     5b4:	39 f0       	breq	.+14     	; 0x5c4 <UserLogin+0x96>
     5b6:	d3 94       	inc	r13
     5b8:	01 c0       	rjmp	.+2      	; 0x5bc <UserLogin+0x8e>
     5ba:	d1 2c       	mov	r13, r1
     5bc:	db 14       	cp	r13, r11
     5be:	58 f2       	brcs	.-106    	; 0x556 <UserLogin+0x28>
     5c0:	a1 2c       	mov	r10, r1
     5c2:	c1 2c       	mov	r12, r1
     5c4:	93 e0       	ldi	r25, 0x03	; 3
     5c6:	c9 12       	cpse	r12, r25
     5c8:	09 c0       	rjmp	.+18     	; 0x5dc <UserLogin+0xae>
     5ca:	24 e0       	ldi	r18, 0x04	; 4
     5cc:	a2 12       	cpse	r10, r18
     5ce:	06 c0       	rjmp	.+12     	; 0x5dc <UserLogin+0xae>
     5d0:	80 ec       	ldi	r24, 0xC0	; 192
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	26 c0       	rjmp	.+76     	; 0x628 <UserLogin+0xfa>
     5dc:	80 e6       	ldi	r24, 0x60	; 96
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     5ec:	82 ee       	ldi	r24, 0xE2	; 226
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	18 c0       	rjmp	.+48     	; 0x628 <UserLogin+0xfa>
     5f8:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     5fc:	8e ee       	ldi	r24, 0xEE	; 238
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	93 ed       	ldi	r25, 0xD3	; 211
     618:	20 e3       	ldi	r18, 0x30	; 48
     61a:	81 50       	subi	r24, 0x01	; 1
     61c:	90 40       	sbci	r25, 0x00	; 0
     61e:	20 40       	sbci	r18, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <UserLogin+0xec>
     622:	00 c0       	rjmp	.+0      	; 0x624 <UserLogin+0xf6>
     624:	00 00       	nop
     626:	82 e0       	ldi	r24, 0x02	; 2
     628:	df 91       	pop	r29
     62a:	cf 91       	pop	r28
     62c:	1f 91       	pop	r17
     62e:	0f 91       	pop	r16
     630:	ff 90       	pop	r15
     632:	ef 90       	pop	r14
     634:	df 90       	pop	r13
     636:	cf 90       	pop	r12
     638:	bf 90       	pop	r11
     63a:	af 90       	pop	r10
     63c:	08 95       	ret

0000063e <InputID>:
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	8c 01       	movw	r16, r24
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     64e:	c0 e0       	ldi	r28, 0x00	; 0
     650:	0b c0       	rjmp	.+22     	; 0x668 <InputID+0x2a>
     652:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     656:	88 23       	and	r24, r24
     658:	39 f0       	breq	.+14     	; 0x668 <InputID+0x2a>
     65a:	f8 01       	movw	r30, r16
     65c:	ec 0f       	add	r30, r28
     65e:	f1 1d       	adc	r31, r1
     660:	80 83       	st	Z, r24
     662:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Lcd_WriteCharacter>
     666:	cf 5f       	subi	r28, 0xFF	; 255
     668:	c3 30       	cpi	r28, 0x03	; 3
     66a:	98 f3       	brcs	.-26     	; 0x652 <InputID+0x14>
     66c:	2f ef       	ldi	r18, 0xFF	; 255
     66e:	85 ea       	ldi	r24, 0xA5	; 165
     670:	9e e0       	ldi	r25, 0x0E	; 14
     672:	21 50       	subi	r18, 0x01	; 1
     674:	80 40       	sbci	r24, 0x00	; 0
     676:	90 40       	sbci	r25, 0x00	; 0
     678:	e1 f7       	brne	.-8      	; 0x672 <InputID+0x34>
     67a:	00 c0       	rjmp	.+0      	; 0x67c <InputID+0x3e>
     67c:	00 00       	nop
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <InputPassword>:
     686:	0f 93       	push	r16
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	8c 01       	movw	r16, r24
     68e:	60 e0       	ldi	r22, 0x00	; 0
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     696:	c0 e0       	ldi	r28, 0x00	; 0
     698:	0c c0       	rjmp	.+24     	; 0x6b2 <InputPassword+0x2c>
     69a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     69e:	88 23       	and	r24, r24
     6a0:	41 f0       	breq	.+16     	; 0x6b2 <InputPassword+0x2c>
     6a2:	f8 01       	movw	r30, r16
     6a4:	ec 0f       	add	r30, r28
     6a6:	f1 1d       	adc	r31, r1
     6a8:	80 83       	st	Z, r24
     6aa:	8a e2       	ldi	r24, 0x2A	; 42
     6ac:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Lcd_WriteCharacter>
     6b0:	cf 5f       	subi	r28, 0xFF	; 255
     6b2:	c4 30       	cpi	r28, 0x04	; 4
     6b4:	90 f3       	brcs	.-28     	; 0x69a <InputPassword+0x14>
     6b6:	2f ef       	ldi	r18, 0xFF	; 255
     6b8:	85 ea       	ldi	r24, 0xA5	; 165
     6ba:	9e e0       	ldi	r25, 0x0E	; 14
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	80 40       	sbci	r24, 0x00	; 0
     6c0:	90 40       	sbci	r25, 0x00	; 0
     6c2:	e1 f7       	brne	.-8      	; 0x6bc <InputPassword+0x36>
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <InputPassword+0x40>
     6c6:	00 00       	nop
     6c8:	cf 91       	pop	r28
     6ca:	1f 91       	pop	r17
     6cc:	0f 91       	pop	r16
     6ce:	08 95       	ret

000006d0 <SwitchDoor>:
     6d0:	cf 93       	push	r28
     6d2:	df 93       	push	r29
     6d4:	ec 01       	movw	r28, r24
     6d6:	88 81       	ld	r24, Y
     6d8:	81 11       	cpse	r24, r1
     6da:	1c c0       	rjmp	.+56     	; 0x714 <SwitchDoor+0x44>
     6dc:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     6e8:	8a e0       	ldi	r24, 0x0A	; 10
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     6f0:	60 e0       	ldi	r22, 0x00	; 0
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 ef       	ldi	r24, 0xF0	; 240
     6f6:	92 e4       	ldi	r25, 0x42	; 66
     6f8:	0e 94 bf 0a 	call	0x157e	; 0x157e <H_Servo_SetAngel>
     6fc:	2f ef       	ldi	r18, 0xFF	; 255
     6fe:	89 e6       	ldi	r24, 0x69	; 105
     700:	98 e1       	ldi	r25, 0x18	; 24
     702:	21 50       	subi	r18, 0x01	; 1
     704:	80 40       	sbci	r24, 0x00	; 0
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e1 f7       	brne	.-8      	; 0x702 <SwitchDoor+0x32>
     70a:	00 c0       	rjmp	.+0      	; 0x70c <SwitchDoor+0x3c>
     70c:	00 00       	nop
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	88 83       	st	Y, r24
     712:	19 c0       	rjmp	.+50     	; 0x746 <SwitchDoor+0x76>
     714:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     718:	60 e0       	ldi	r22, 0x00	; 0
     71a:	80 e0       	ldi	r24, 0x00	; 0
     71c:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
     720:	89 e1       	ldi	r24, 0x19	; 25
     722:	91 e0       	ldi	r25, 0x01	; 1
     724:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     728:	60 e0       	ldi	r22, 0x00	; 0
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	cb 01       	movw	r24, r22
     72e:	0e 94 bf 0a 	call	0x157e	; 0x157e <H_Servo_SetAngel>
     732:	2f ef       	ldi	r18, 0xFF	; 255
     734:	89 e6       	ldi	r24, 0x69	; 105
     736:	98 e1       	ldi	r25, 0x18	; 24
     738:	21 50       	subi	r18, 0x01	; 1
     73a:	80 40       	sbci	r24, 0x00	; 0
     73c:	90 40       	sbci	r25, 0x00	; 0
     73e:	e1 f7       	brne	.-8      	; 0x738 <SwitchDoor+0x68>
     740:	00 c0       	rjmp	.+0      	; 0x742 <SwitchDoor+0x72>
     742:	00 00       	nop
     744:	18 82       	st	Y, r1
     746:	df 91       	pop	r29
     748:	cf 91       	pop	r28
     74a:	08 95       	ret

0000074c <ACSwitch>:
     74c:	cf 93       	push	r28
     74e:	df 93       	push	r29
     750:	ec 01       	movw	r28, r24
     752:	81 e2       	ldi	r24, 0x21	; 33
     754:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <H_Led_On>
     758:	88 81       	ld	r24, Y
     75a:	81 11       	cpse	r24, r1
     75c:	20 c0       	rjmp	.+64     	; 0x79e <ACSwitch+0x52>
     75e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <H_Lm35_Read>
     762:	8b 31       	cpi	r24, 0x1B	; 27
     764:	78 f0       	brcs	.+30     	; 0x784 <ACSwitch+0x38>
     766:	80 e2       	ldi	r24, 0x20	; 32
     768:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <H_Led_On>
     76c:	81 e2       	ldi	r24, 0x21	; 33
     76e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	0e 94 2a 06 	call	0xc54	; 0xc54 <H_DcMotor_SetDirection>
     778:	84 e6       	ldi	r24, 0x64	; 100
     77a:	0e 94 33 06 	call	0xc66	; 0xc66 <H_DcMotor_Speed>
     77e:	0e 94 36 06 	call	0xc6c	; 0xc6c <H_DcMotor_Start>
     782:	0a c0       	rjmp	.+20     	; 0x798 <ACSwitch+0x4c>
     784:	85 31       	cpi	r24, 0x15	; 21
     786:	40 f4       	brcc	.+16     	; 0x798 <ACSwitch+0x4c>
     788:	81 e2       	ldi	r24, 0x21	; 33
     78a:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <H_Led_On>
     78e:	80 e2       	ldi	r24, 0x20	; 32
     790:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
     794:	0e 94 39 06 	call	0xc72	; 0xc72 <H_DcMotor_Stop>
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	88 83       	st	Y, r24
     79c:	09 c0       	rjmp	.+18     	; 0x7b0 <ACSwitch+0x64>
     79e:	0e 94 39 06 	call	0xc72	; 0xc72 <H_DcMotor_Stop>
     7a2:	81 e2       	ldi	r24, 0x21	; 33
     7a4:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
     7a8:	80 e2       	ldi	r24, 0x20	; 32
     7aa:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
     7ae:	18 82       	st	Y, r1
     7b0:	df 91       	pop	r29
     7b2:	cf 91       	pop	r28
     7b4:	08 95       	ret

000007b6 <WelcomingMsg>:
}

void WelcomingMsg(void)
{
	H_Lcd_Clear();
     7b6:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
	H_Lcd_WriteString("Welcome to Smart");
     7ba:	88 e2       	ldi	r24, 0x28	; 40
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     7c2:	60 e0       	ldi	r22, 0x00	; 0
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
	H_Lcd_WriteString("Home Project");
     7ca:	89 e3       	ldi	r24, 0x39	; 57
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	87 ea       	ldi	r24, 0xA7	; 167
     7d6:	91 e6       	ldi	r25, 0x61	; 97
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	90 40       	sbci	r25, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <WelcomingMsg+0x22>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <WelcomingMsg+0x2c>
     7e2:	00 00       	nop
	_delay_ms(2000);
	H_Lcd_Clear();
     7e4:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
     7e8:	08 95       	ret

000007ea <CloseTheDoor>:
}

void CloseTheDoor(void)
{
	H_Servo_SetAngel(0);
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	cb 01       	movw	r24, r22
     7f0:	0e 94 bf 0a 	call	0x157e	; 0x157e <H_Servo_SetAngel>
     7f4:	08 95       	ret

000007f6 <CheckAC>:
	
}

void CheckAC(u8 ACState)
{
	if (ACState == 1)
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	21 f5       	brne	.+72     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
	{
		u8 Temperature = 0;
		Temperature = H_Lm35_Read();
     7fa:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <H_Lm35_Read>
		if (Temperature > 26)
     7fe:	8b 31       	cpi	r24, 0x1B	; 27
     800:	78 f0       	brcs	.+30     	; 0x820 <__DATA_REGION_LENGTH__+0x20>
		{
			H_Led_On(LED_0);
     802:	80 e2       	ldi	r24, 0x20	; 32
     804:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <H_Led_On>
			H_Led_Off(LED_1);
     808:	81 e2       	ldi	r24, 0x21	; 33
     80a:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
			H_DcMotor_SetDirection(CW);
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	0e 94 2a 06 	call	0xc54	; 0xc54 <H_DcMotor_SetDirection>
			H_DcMotor_Speed(100);
     814:	84 e6       	ldi	r24, 0x64	; 100
     816:	0e 94 33 06 	call	0xc66	; 0xc66 <H_DcMotor_Speed>
			H_DcMotor_Start();
     81a:	0e 94 36 06 	call	0xc6c	; 0xc6c <H_DcMotor_Start>
     81e:	0a c0       	rjmp	.+20     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		}
		else if (Temperature < 21)
     820:	85 31       	cpi	r24, 0x15	; 21
     822:	40 f4       	brcc	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
		{
			H_Led_On(LED_1);
     824:	81 e2       	ldi	r24, 0x21	; 33
     826:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <H_Led_On>
			H_Led_Off(LED_0);
     82a:	80 e2       	ldi	r24, 0x20	; 32
     82c:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
			H_DcMotor_Stop();
     830:	0e 94 39 06 	call	0xc72	; 0xc72 <H_DcMotor_Stop>
		}
		H_Lcd_Clear();
     834:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
		H_Lcd_WriteString("AC Opened");
     838:	86 e4       	ldi	r24, 0x46	; 70
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     840:	08 95       	ret
	}
	else 
	{
		H_DcMotor_Stop();
     842:	0e 94 39 06 	call	0xc72	; 0xc72 <H_DcMotor_Stop>
		H_Led_Off(LED_1);
     846:	81 e2       	ldi	r24, 0x21	; 33
     848:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
		H_Led_Off(LED_0);
     84c:	80 e2       	ldi	r24, 0x20	; 32
     84e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <H_Led_Off>
		H_Lcd_Clear();
     852:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
		H_Lcd_WriteString("AC Closed");	
     856:	80 e5       	ldi	r24, 0x50	; 80
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     85e:	08 95       	ret

00000860 <CheckDoor>:
	}
}

void CheckDoor(u8 DoorState)
{
	if (DoorState == 1)
     860:	81 30       	cpi	r24, 0x01	; 1
     862:	b9 f4       	brne	.+46     	; 0x892 <CheckDoor+0x32>
	{
		H_Lcd_GoTo(1,0);
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
		H_Lcd_WriteString("Door Is Opened");
     86a:	8a e0       	ldi	r24, 0x0A	; 10
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
		H_Servo_SetAngel(120);
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	80 ef       	ldi	r24, 0xF0	; 240
     878:	92 e4       	ldi	r25, 0x42	; 66
     87a:	0e 94 bf 0a 	call	0x157e	; 0x157e <H_Servo_SetAngel>
     87e:	2f ef       	ldi	r18, 0xFF	; 255
     880:	89 e6       	ldi	r24, 0x69	; 105
     882:	98 e1       	ldi	r25, 0x18	; 24
     884:	21 50       	subi	r18, 0x01	; 1
     886:	80 40       	sbci	r24, 0x00	; 0
     888:	90 40       	sbci	r25, 0x00	; 0
     88a:	e1 f7       	brne	.-8      	; 0x884 <CheckDoor+0x24>
     88c:	00 c0       	rjmp	.+0      	; 0x88e <CheckDoor+0x2e>
     88e:	00 00       	nop
     890:	08 95       	ret
		_delay_ms(500);
	}
	else
	{
		H_Lcd_GoTo(1,0);
     892:	60 e0       	ldi	r22, 0x00	; 0
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
		H_Lcd_WriteString("Door Is Closed");
     89a:	89 e1       	ldi	r24, 0x19	; 25
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
		H_Servo_SetAngel(0);
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	70 e0       	ldi	r23, 0x00	; 0
     8a6:	cb 01       	movw	r24, r22
     8a8:	0e 94 bf 0a 	call	0x157e	; 0x157e <H_Servo_SetAngel>
     8ac:	2f ef       	ldi	r18, 0xFF	; 255
     8ae:	89 e6       	ldi	r24, 0x69	; 105
     8b0:	98 e1       	ldi	r25, 0x18	; 24
     8b2:	21 50       	subi	r18, 0x01	; 1
     8b4:	80 40       	sbci	r24, 0x00	; 0
     8b6:	90 40       	sbci	r25, 0x00	; 0
     8b8:	e1 f7       	brne	.-8      	; 0x8b2 <CheckDoor+0x52>
     8ba:	00 c0       	rjmp	.+0      	; 0x8bc <CheckDoor+0x5c>
     8bc:	00 00       	nop
     8be:	08 95       	ret

000008c0 <main>:
/************************************************************************/
/*                                                                      */
/************************************************************************/

int main ()
{
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	29 97       	sbiw	r28, 0x09	; 9
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
	H_Lcd_Init();
     8d4:	0e 94 1f 09 	call	0x123e	; 0x123e <H_Lcd_Init>
	H_KeyPad_Init();
     8d8:	0e 94 74 06 	call	0xce8	; 0xce8 <H_KeyPad_Init>
	H_Eeprom_Init();
     8dc:	0e 94 3c 06 	call	0xc78	; 0xc78 <H_Eeprom_Init>
	H_DcMotor_Init();
     8e0:	0e 94 1f 06 	call	0xc3e	; 0xc3e <H_DcMotor_Init>
	H_Lm35_Init();
     8e4:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <H_Lm35_Init>
	H_Servo_Init();
     8e8:	0e 94 b4 0a 	call	0x1568	; 0x1568 <H_Servo_Init>
	H_Led_Init(LED_0);
     8ec:	80 e2       	ldi	r24, 0x20	; 32
     8ee:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <H_Led_Init>
	H_Led_Init(LED_1);
     8f2:	81 e2       	ldi	r24, 0x21	; 33
     8f4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <H_Led_Init>
	H_Buzzer_Init();
     8f8:	0e 94 10 06 	call	0xc20	; 0xc20 <H_Buzzer_Init>
	H_PushButton_Init(PUSH_BUTTON_0);
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	0e 94 8c 0a 	call	0x1518	; 0x1518 <H_PushButton_Init>
	
	M_ExtInt_Init(INT0);
     902:	86 e0       	ldi	r24, 0x06	; 6
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <M_ExtInt_Init>
	
	M_ExtInt_SetCallBackInt0(A_Main_ExtInt0Exc);
     90a:	8c e7       	ldi	r24, 0x7C	; 124
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <M_ExtInt_SetCallBackInt0>
	
	char NumberOfUsers = 0;

	NumberOfUsers = H_Eeprom_Read(0,100);
     912:	64 e6       	ldi	r22, 0x64	; 100
     914:	80 e0       	ldi	r24, 0x00	; 0
     916:	0e 94 59 06 	call	0xcb2	; 0xcb2 <H_Eeprom_Read>
     91a:	08 2f       	mov	r16, r24
 	u8 UserID		[3]	= {0,0,0};
     91c:	19 82       	std	Y+1, r1	; 0x01
     91e:	1a 82       	std	Y+2, r1	; 0x02
     920:	1b 82       	std	Y+3, r1	; 0x03
 	u8 UserPassword [4] = {0,0,0,0};	
     922:	1c 82       	std	Y+4, r1	; 0x04
     924:	1d 82       	std	Y+5, r1	; 0x05
     926:	1e 82       	std	Y+6, r1	; 0x06
     928:	1f 82       	std	Y+7, r1	; 0x07
	u8 KeyPressed = 0;
	u8 Trails = 0;
	u8 DoorState = 0;
     92a:	18 86       	std	Y+8, r1	; 0x08
	u8 ACState = 0;
     92c:	19 86       	std	Y+9, r1	; 0x09
	
	
	while (1)
	{
		switch(AppState)
     92e:	e0 91 14 02 	lds	r30, 0x0214	; 0x800214 <__data_end>
     932:	8e 2f       	mov	r24, r30
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	83 33       	cpi	r24, 0x33	; 51
     938:	91 05       	cpc	r25, r1
     93a:	c8 f7       	brcc	.-14     	; 0x92e <main+0x6e>
     93c:	fc 01       	movw	r30, r24
     93e:	e6 5d       	subi	r30, 0xD6	; 214
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	0c 94 b2 10 	jmp	0x2164	; 0x2164 <__tablejump2__>
		{
			case WELCOME :
				WelcomingMsg();
     946:	0e 94 db 03 	call	0x7b6	; 0x7b6 <WelcomingMsg>
				AppState = FIRST_PAGE;
     94a:	80 e3       	ldi	r24, 0x30	; 48
     94c:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
				break;
     950:	ee cf       	rjmp	.-36     	; 0x92e <main+0x6e>
			case FIRST_PAGE:
				H_Lcd_Clear();
     952:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
				H_Lcd_WriteString("    Welcome     ");
     956:	8a e5       	ldi	r24, 0x5A	; 90
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     95e:	60 e0       	ldi	r22, 0x00	; 0
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
				H_Lcd_WriteString("1:Admin 2:User");
     966:	8b e6       	ldi	r24, 0x6B	; 107
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     96e:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
				while(!KeyPressed)
     972:	0d c0       	rjmp	.+26     	; 0x98e <main+0xce>
				{
					KeyPressed = H_KeyPad_Read();
     974:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
					if (KeyPressed == '1')
     978:	81 33       	cpi	r24, 0x31	; 49
     97a:	21 f4       	brne	.+8      	; 0x984 <main+0xc4>
					{	
						AppState = ADMIN_LOGIN_PAGE;
     97c:	91 e3       	ldi	r25, 0x31	; 49
     97e:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <__data_end>
     982:	05 c0       	rjmp	.+10     	; 0x98e <main+0xce>
					}
					else if (KeyPressed == '2')
     984:	82 33       	cpi	r24, 0x32	; 50
     986:	19 f4       	brne	.+6      	; 0x98e <main+0xce>
					{
						AppState = USER_LOGIN_PAGE;
     988:	92 e3       	ldi	r25, 0x32	; 50
     98a:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString("    Welcome     ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("1:Admin 2:User");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     98e:	88 23       	and	r24, r24
     990:	89 f3       	breq	.-30     	; 0x974 <main+0xb4>
     992:	cd cf       	rjmp	.-102    	; 0x92e <main+0x6e>
					
				}
				break;
			
			case ADMIN_LOGIN_PAGE:
				H_Lcd_Clear();
     994:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
				H_Lcd_WriteString("Welcome Admin");
     998:	8a e7       	ldi	r24, 0x7A	; 122
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     9a0:	2f ef       	ldi	r18, 0xFF	; 255
     9a2:	83 ed       	ldi	r24, 0xD3	; 211
     9a4:	90 e3       	ldi	r25, 0x30	; 48
     9a6:	21 50       	subi	r18, 0x01	; 1
     9a8:	80 40       	sbci	r24, 0x00	; 0
     9aa:	90 40       	sbci	r25, 0x00	; 0
     9ac:	e1 f7       	brne	.-8      	; 0x9a6 <main+0xe6>
     9ae:	00 c0       	rjmp	.+0      	; 0x9b0 <main+0xf0>
     9b0:	00 00       	nop
				_delay_ms(1000);
				H_Lcd_Clear();
     9b2:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
 				while(Trails < 3)
     9b6:	10 e0       	ldi	r17, 0x00	; 0
     9b8:	43 c0       	rjmp	.+134    	; 0xa40 <main+0x180>
				{
					H_Lcd_WriteString("Enter Username");
     9ba:	88 e8       	ldi	r24, 0x88	; 136
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
 					InputID(UserID);
     9c2:	ce 01       	movw	r24, r28
     9c4:	01 96       	adiw	r24, 0x01	; 1
     9c6:	0e 94 1f 03 	call	0x63e	; 0x63e <InputID>
					H_Lcd_Clear();
     9ca:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
     9ce:	87 e9       	ldi	r24, 0x97	; 151
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
					InputPassword(UserPassword);
     9d6:	ce 01       	movw	r24, r28
     9d8:	04 96       	adiw	r24, 0x04	; 4
     9da:	0e 94 43 03 	call	0x686	; 0x686 <InputPassword>
					
					if (AdminLogin(UserID,UserPassword) == 0)
     9de:	be 01       	movw	r22, r28
     9e0:	6c 5f       	subi	r22, 0xFC	; 252
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	ce 01       	movw	r24, r28
     9e6:	01 96       	adiw	r24, 0x01	; 1
     9e8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <AdminLogin>
     9ec:	81 11       	cpse	r24, r1
     9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <main+0x138>
					{
						AppState = ADMIN_SECOND_PAGE;
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
						break;
     9f6:	9b cf       	rjmp	.-202    	; 0x92e <main+0x6e>
					}
					else 
					{
						Trails++;
     9f8:	1f 5f       	subi	r17, 0xFF	; 255
						if (Trails == 3)
     9fa:	13 30       	cpi	r17, 0x03	; 3
     9fc:	09 f5       	brne	.+66     	; 0xa40 <main+0x180>
						{
							H_Buzzer_On();
     9fe:	0e 94 15 06 	call	0xc2a	; 0xc2a <H_Buzzer_On>
							CloseTheDoor();
     a02:	0e 94 f5 03 	call	0x7ea	; 0x7ea <CloseTheDoor>
							KeyPressed = H_PushButton_Read(PUSH_BUTTON_0);
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	0e 94 a1 0a 	call	0x1542	; 0x1542 <H_PushButton_Read>
							while (1)
							{
								if (H_PushButton_Read(PUSH_BUTTON_2) == PRESSED)
     a0c:	83 e0       	ldi	r24, 0x03	; 3
     a0e:	0e 94 a1 0a 	call	0x1542	; 0x1542 <H_PushButton_Read>
     a12:	81 30       	cpi	r24, 0x01	; 1
     a14:	d9 f7       	brne	.-10     	; 0xa0c <main+0x14c>
     a16:	2f ef       	ldi	r18, 0xFF	; 255
     a18:	87 ee       	ldi	r24, 0xE7	; 231
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	21 50       	subi	r18, 0x01	; 1
     a1e:	80 40       	sbci	r24, 0x00	; 0
     a20:	90 40       	sbci	r25, 0x00	; 0
     a22:	e1 f7       	brne	.-8      	; 0xa1c <main+0x15c>
     a24:	00 c0       	rjmp	.+0      	; 0xa26 <main+0x166>
     a26:	00 00       	nop
								{
									_delay_ms(80);
									if (H_PushButton_Read(PUSH_BUTTON_2) == PRESSED)
     a28:	83 e0       	ldi	r24, 0x03	; 3
     a2a:	0e 94 a1 0a 	call	0x1542	; 0x1542 <H_PushButton_Read>
     a2e:	81 30       	cpi	r24, 0x01	; 1
     a30:	69 f7       	brne	.-38     	; 0xa0c <main+0x14c>
									{
										while(H_PushButton_Read(PUSH_BUTTON_2) == PRESSED);	
     a32:	83 e0       	ldi	r24, 0x03	; 3
     a34:	0e 94 a1 0a 	call	0x1542	; 0x1542 <H_PushButton_Read>
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	d9 f3       	breq	.-10     	; 0xa32 <main+0x172>
										H_Buzzer_Off();
     a3c:	0e 94 1a 06 	call	0xc34	; 0xc34 <H_Buzzer_Off>
			case ADMIN_LOGIN_PAGE:
				H_Lcd_Clear();
				H_Lcd_WriteString("Welcome Admin");
				_delay_ms(1000);
				H_Lcd_Clear();
 				while(Trails < 3)
     a40:	13 30       	cpi	r17, 0x03	; 3
     a42:	08 f4       	brcc	.+2      	; 0xa46 <main+0x186>
     a44:	ba cf       	rjmp	.-140    	; 0x9ba <main+0xfa>
     a46:	73 cf       	rjmp	.-282    	; 0x92e <main+0x6e>
				Trails = 0;
				break;
				
			
			case USER_LOGIN_PAGE:
				H_Lcd_Clear();
     a48:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
				H_Lcd_WriteString("Welcome User");
     a4c:	86 ea       	ldi	r24, 0xA6	; 166
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
     a54:	2f ef       	ldi	r18, 0xFF	; 255
     a56:	83 ed       	ldi	r24, 0xD3	; 211
     a58:	90 e3       	ldi	r25, 0x30	; 48
     a5a:	21 50       	subi	r18, 0x01	; 1
     a5c:	80 40       	sbci	r24, 0x00	; 0
     a5e:	90 40       	sbci	r25, 0x00	; 0
     a60:	e1 f7       	brne	.-8      	; 0xa5a <main+0x19a>
     a62:	00 c0       	rjmp	.+0      	; 0xa64 <main+0x1a4>
     a64:	00 00       	nop
				_delay_ms(1000);
				while(Trails < 3)
				{
					H_Lcd_Clear();
     a66:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Username");
     a6a:	88 e8       	ldi	r24, 0x88	; 136
     a6c:	91 e0       	ldi	r25, 0x01	; 1
     a6e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
					InputID(UserID);
     a72:	ce 01       	movw	r24, r28
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	0e 94 1f 03 	call	0x63e	; 0x63e <InputID>
					H_Lcd_Clear();
     a7a:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
     a7e:	87 e9       	ldi	r24, 0x97	; 151
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
					InputPassword(UserPassword);
     a86:	ce 01       	movw	r24, r28
     a88:	04 96       	adiw	r24, 0x04	; 4
     a8a:	0e 94 43 03 	call	0x686	; 0x686 <InputPassword>
					Trails = 0;
					u8 LoginResult = UserLogin(UserID,UserPassword);
     a8e:	be 01       	movw	r22, r28
     a90:	6c 5f       	subi	r22, 0xFC	; 252
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 97 02 	call	0x52e	; 0x52e <UserLogin>
					if (LoginResult == 0)
     a9c:	81 11       	cpse	r24, r1
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <main+0x1e8>
					{
						AppState = USER_SECOND_PAGE;
     aa0:	82 e0       	ldi	r24, 0x02	; 2
     aa2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
						break;
     aa6:	43 cf       	rjmp	.-378    	; 0x92e <main+0x6e>
					}
					else if (LoginResult == 2)
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	e9 f6       	brne	.-70     	; 0xa66 <main+0x1a6>
					{
						AppState = FIRST_PAGE;
     aac:	80 e3       	ldi	r24, 0x30	; 48
     aae:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
						break;
     ab2:	3d cf       	rjmp	.-390    	; 0x92e <main+0x6e>
				}
				Trails = 0;
				break;
			
			case ADMIN_SECOND_PAGE:
				H_Lcd_Clear();
     ab4:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
				H_Lcd_WriteString(" 1:Switch Door  ");
     ab8:	83 eb       	ldi	r24, 0xB3	; 179
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     ac0:	60 e0       	ldi	r22, 0x00	; 0
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
				H_Lcd_WriteString("2:AddUser 3:Next");
     ac8:	84 ec       	ldi	r24, 0xC4	; 196
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     ad0:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     ad4:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     ad6:	2d c0       	rjmp	.+90     	; 0xb32 <main+0x272>
				{
					KeyPressed = H_KeyPad_Read();
     ad8:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     adc:	18 2f       	mov	r17, r24
					if (KeyPressed == '1')
     ade:	81 33       	cpi	r24, 0x31	; 49
     ae0:	29 f4       	brne	.+10     	; 0xaec <main+0x22c>
					{
						SwitchDoor(&DoorState);
     ae2:	ce 01       	movw	r24, r28
     ae4:	08 96       	adiw	r24, 0x08	; 8
     ae6:	0e 94 68 03 	call	0x6d0	; 0x6d0 <SwitchDoor>
     aea:	23 c0       	rjmp	.+70     	; 0xb32 <main+0x272>
					}
					else if (KeyPressed == '2')
     aec:	82 33       	cpi	r24, 0x32	; 50
     aee:	e1 f4       	brne	.+56     	; 0xb28 <main+0x268>
					{
						H_Lcd_Clear();
     af0:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
						H_Lcd_WriteString("Enter Username");
     af4:	88 e8       	ldi	r24, 0x88	; 136
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
						InputID(UserID);
     afc:	ce 01       	movw	r24, r28
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	0e 94 1f 03 	call	0x63e	; 0x63e <InputID>
						H_Lcd_Clear();
     b04:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
						H_Lcd_WriteString("Enter Password");
     b08:	87 e9       	ldi	r24, 0x97	; 151
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
						InputPassword(UserPassword);
     b10:	ce 01       	movw	r24, r28
     b12:	04 96       	adiw	r24, 0x04	; 4
     b14:	0e 94 43 03 	call	0x686	; 0x686 <InputPassword>
						AddUser(UserID, UserPassword);
     b18:	be 01       	movw	r22, r28
     b1a:	6c 5f       	subi	r22, 0xFC	; 252
     b1c:	7f 4f       	sbci	r23, 0xFF	; 255
     b1e:	ce 01       	movw	r24, r28
     b20:	01 96       	adiw	r24, 0x01	; 1
     b22:	0e 94 7d 00 	call	0xfa	; 0xfa <AddUser>
     b26:	05 c0       	rjmp	.+10     	; 0xb32 <main+0x272>
					}
					else if (KeyPressed == '3')
     b28:	83 33       	cpi	r24, 0x33	; 51
     b2a:	19 f4       	brne	.+6      	; 0xb32 <main+0x272>
					{
						AppState = ADMIN_THIRD_PAGE;
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString(" 1:Switch Door  ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("2:AddUser 3:Next");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     b32:	11 23       	and	r17, r17
     b34:	89 f2       	breq	.-94     	; 0xad8 <main+0x218>
     b36:	fb ce       	rjmp	.-522    	; 0x92e <main+0x6e>
						AppState = ADMIN_THIRD_PAGE;
					}		
				}
				break;
			case ADMIN_THIRD_PAGE:
				H_Lcd_Clear();        
     b38:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
				H_Lcd_WriteString(" 4:Remove User  ");
     b3c:	85 ed       	ldi	r24, 0xD5	; 213
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	81 e0       	ldi	r24, 0x01	; 1
     b48:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
				H_Lcd_WriteString("5:Back 6:Next");
     b4c:	86 ee       	ldi	r24, 0xE6	; 230
     b4e:	91 e0       	ldi	r25, 0x01	; 1
     b50:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     b54:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     b58:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     b5a:	23 c0       	rjmp	.+70     	; 0xba2 <main+0x2e2>
				{
					KeyPressed = H_KeyPad_Read();
     b5c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     b60:	18 2f       	mov	r17, r24
					if (KeyPressed == '4')
     b62:	84 33       	cpi	r24, 0x34	; 52
     b64:	99 f4       	brne	.+38     	; 0xb8c <main+0x2cc>
					{
						H_Lcd_Clear();
     b66:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
						H_Lcd_WriteString("Enter Username");
     b6a:	88 e8       	ldi	r24, 0x88	; 136
     b6c:	91 e0       	ldi	r25, 0x01	; 1
     b6e:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
						InputID(UserID);
     b72:	ce 01       	movw	r24, r28
     b74:	01 96       	adiw	r24, 0x01	; 1
     b76:	0e 94 1f 03 	call	0x63e	; 0x63e <InputID>
						H_Lcd_Clear();
     b7a:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
						DeleteUser(NumberOfUsers,UserID);
     b7e:	be 01       	movw	r22, r28
     b80:	6f 5f       	subi	r22, 0xFF	; 255
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	80 2f       	mov	r24, r16
     b86:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <DeleteUser>
     b8a:	0b c0       	rjmp	.+22     	; 0xba2 <main+0x2e2>
					}
					else if (KeyPressed == '5')
     b8c:	85 33       	cpi	r24, 0x35	; 53
     b8e:	21 f4       	brne	.+8      	; 0xb98 <main+0x2d8>
					{
						AppState = ADMIN_SECOND_PAGE;
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
     b96:	05 c0       	rjmp	.+10     	; 0xba2 <main+0x2e2>
					}
					else if (KeyPressed == '6')
     b98:	86 33       	cpi	r24, 0x36	; 54
     b9a:	19 f4       	brne	.+6      	; 0xba2 <main+0x2e2>
					{
						AppState = ADMIN_FOURTH_PAGE;
     b9c:	84 e0       	ldi	r24, 0x04	; 4
     b9e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
				H_Lcd_Clear();        
				H_Lcd_WriteString(" 4:Remove User  ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("5:Back 6:Next");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     ba2:	11 23       	and	r17, r17
     ba4:	d9 f2       	breq	.-74     	; 0xb5c <main+0x29c>
     ba6:	c3 ce       	rjmp	.-634    	; 0x92e <main+0x6e>
						AppState = ADMIN_FOURTH_PAGE;
					}
				}
				break;
			case ADMIN_FOURTH_PAGE:
				H_Lcd_Clear();
     ba8:	0e 94 4d 0a 	call	0x149a	; 0x149a <H_Lcd_Clear>
				H_Lcd_WriteString(" 7:Switch AC  ");
     bac:	84 ef       	ldi	r24, 0xF4	; 244
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     bb4:	60 e0       	ldi	r22, 0x00	; 0
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
				H_Lcd_WriteString("8:1stPage 9:Done");
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 55 0a 	call	0x14aa	; 0x14aa <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     bc4:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     bc8:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     bca:	15 c0       	rjmp	.+42     	; 0xbf6 <main+0x336>
				{
					KeyPressed = H_KeyPad_Read();
     bcc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     bd0:	18 2f       	mov	r17, r24
					if (KeyPressed == '7')
     bd2:	87 33       	cpi	r24, 0x37	; 55
     bd4:	29 f4       	brne	.+10     	; 0xbe0 <main+0x320>
					{
						ACSwitch(&ACState);
     bd6:	ce 01       	movw	r24, r28
     bd8:	09 96       	adiw	r24, 0x09	; 9
     bda:	0e 94 a6 03 	call	0x74c	; 0x74c <ACSwitch>
     bde:	0b c0       	rjmp	.+22     	; 0xbf6 <main+0x336>
					}
					else if (KeyPressed == '8')
     be0:	88 33       	cpi	r24, 0x38	; 56
     be2:	21 f4       	brne	.+8      	; 0xbec <main+0x32c>
					{
						AppState = ADMIN_SECOND_PAGE;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
     bea:	05 c0       	rjmp	.+10     	; 0xbf6 <main+0x336>
					}
					else if (KeyPressed == '9')
     bec:	89 33       	cpi	r24, 0x39	; 57
     bee:	19 f4       	brne	.+6      	; 0xbf6 <main+0x336>
					{
						AppState = IDLE_STATE;
     bf0:	85 e0       	ldi	r24, 0x05	; 5
     bf2:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString(" 7:Switch AC  ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("8:1stPage 9:Done");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     bf6:	11 23       	and	r17, r17
     bf8:	49 f3       	breq	.-46     	; 0xbcc <main+0x30c>
     bfa:	99 ce       	rjmp	.-718    	; 0x92e <main+0x6e>
						AppState = IDLE_STATE;
					}
				}
				break;
			case IDLE_STATE:
				KeyPressed = H_KeyPad_Read();
     bfc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     c00:	18 2f       	mov	r17, r24
				while(!KeyPressed)
     c02:	09 c0       	rjmp	.+18     	; 0xc16 <main+0x356>
				{
					KeyPressed = H_KeyPad_Read();
     c04:	0e 94 b5 06 	call	0xd6a	; 0xd6a <H_KeyPad_Read>
     c08:	18 2f       	mov	r17, r24
					CheckAC(ACState);
     c0a:	89 85       	ldd	r24, Y+9	; 0x09
     c0c:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <CheckAC>
					CheckDoor(DoorState);
     c10:	88 85       	ldd	r24, Y+8	; 0x08
     c12:	0e 94 30 04 	call	0x860	; 0x860 <CheckDoor>
					}
				}
				break;
			case IDLE_STATE:
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     c16:	11 23       	and	r17, r17
     c18:	a9 f3       	breq	.-22     	; 0xc04 <main+0x344>
				{
					KeyPressed = H_KeyPad_Read();
					CheckAC(ACState);
					CheckDoor(DoorState);
				}
				AppState = WELCOME;
     c1a:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <__data_end>
				break;
     c1e:	87 ce       	rjmp	.-754    	; 0x92e <main+0x6e>

00000c20 <H_Buzzer_Init>:

#include "Buzzer.h"

void	H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZERPIN,OUTPUT);
     c20:	61 e0       	ldi	r22, 0x01	; 1
     c22:	8b e2       	ldi	r24, 0x2B	; 43
     c24:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
     c28:	08 95       	ret

00000c2a <H_Buzzer_On>:
}

void	H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZERPIN,HIGH);
     c2a:	61 e0       	ldi	r22, 0x01	; 1
     c2c:	8b e2       	ldi	r24, 0x2B	; 43
     c2e:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     c32:	08 95       	ret

00000c34 <H_Buzzer_Off>:
}

void H_Buzzer_Off(void)
{
	M_Dio_PinWrite(BUZZERPIN,LOW);
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	8b e2       	ldi	r24, 0x2B	; 43
     c38:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     c3c:	08 95       	ret

00000c3e <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init				(void)
{
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	8e e2       	ldi	r24, 0x2E	; 46
     c42:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_0,OUTPUT);
     c46:	61 e0       	ldi	r22, 0x01	; 1
     c48:	8c e2       	ldi	r24, 0x2C	; 44
     c4a:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Pwm2_Init();
     c4e:	0e 94 15 0e 	call	0x1c2a	; 0x1c2a <M_Pwm2_Init>
     c52:	08 95       	ret

00000c54 <H_DcMotor_SetDirection>:
}


void H_DcMotor_SetDirection		(u8 Local_u8_Direction)
{
	M_Dio_PinWrite(DC_MOTOR_PIN_0,HIGH);
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	8c e2       	ldi	r24, 0x2C	; 44
     c58:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_1,LOW);	
     c5c:	60 e0       	ldi	r22, 0x00	; 0
     c5e:	8e e2       	ldi	r24, 0x2E	; 46
     c60:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     c64:	08 95       	ret

00000c66 <H_DcMotor_Speed>:
}


void H_DcMotor_Speed			(u8 Local_u8_Speed)
{
	M_Pwm2_SetDutyCycle(Local_u8_Speed);
     c66:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <M_Pwm2_SetDutyCycle>
     c6a:	08 95       	ret

00000c6c <H_DcMotor_Start>:
}


void H_DcMotor_Start			(void)
{
	M_Pwm2_Start();
     c6c:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <M_Pwm2_Start>
     c70:	08 95       	ret

00000c72 <H_DcMotor_Stop>:
}


void H_DcMotor_Stop				(void)
{
	M_Pwm2_Stop();
     c72:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <M_Pwm2_Stop>
     c76:	08 95       	ret

00000c78 <H_Eeprom_Init>:
 */ 
#include "Eeprom.h"

void H_Eeprom_Init(void)
{
	M_I2c_Init();
     c78:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <M_I2c_Init>
     c7c:	08 95       	ret

00000c7e <H_Eeprom_Write>:
}
void H_Eeprom_Write(u8 Local_u8_Data,u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     c7e:	1f 93       	push	r17
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
	if(Local_u8_PageAddress < 8)
     c84:	68 30       	cpi	r22, 0x08	; 8
     c86:	88 f4       	brcc	.+34     	; 0xcaa <H_Eeprom_Write+0x2c>
     c88:	14 2f       	mov	r17, r20
     c8a:	c6 2f       	mov	r28, r22
     c8c:	d8 2f       	mov	r29, r24
	{
		M_I2c_StartCondition();
     c8e:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <M_I2c_StartCondition>
		M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     c92:	8c 2f       	mov	r24, r28
     c94:	80 65       	ori	r24, 0x50	; 80
     c96:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <M_I2c_SendSlaveAddressWrite>
		M_I2c_SendSByte(Local_u8_ByteAddress);
     c9a:	81 2f       	mov	r24, r17
     c9c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <M_I2c_SendSByte>
		M_I2c_SendSByte(Local_u8_Data);
     ca0:	8d 2f       	mov	r24, r29
     ca2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <M_I2c_SendSByte>
		M_I2c_StopCondition();
     ca6:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <M_I2c_StopCondition>
	}
}
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	08 95       	ret

00000cb2 <H_Eeprom_Read>:
u8   H_Eeprom_Read(u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	c8 2f       	mov	r28, r24
     cb8:	d6 2f       	mov	r29, r22
	u8 Local_u8_Data = 0;
	M_I2c_StartCondition();
     cba:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <M_I2c_StartCondition>
	M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     cbe:	c0 65       	ori	r28, 0x50	; 80
     cc0:	8c 2f       	mov	r24, r28
     cc2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <M_I2c_SendSlaveAddressWrite>
	M_I2c_SendSByte(Local_u8_ByteAddress);
     cc6:	8d 2f       	mov	r24, r29
     cc8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <M_I2c_SendSByte>
	M_I2c_RepeatedStart();
     ccc:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <M_I2c_RepeatedStart>
	M_I2c_SendSlaveAddressRead((0x50 | Local_u8_PageAddress));
     cd0:	8c 2f       	mov	r24, r28
     cd2:	0e 94 57 0d 	call	0x1aae	; 0x1aae <M_I2c_SendSlaveAddressRead>
	Local_u8_Data = M_I2c_ReadByteNoAck();
     cd6:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <M_I2c_ReadByteNoAck>
     cda:	c8 2f       	mov	r28, r24
	M_I2c_StopCondition();
     cdc:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <M_I2c_StopCondition>
	return Local_u8_Data;
     ce0:	8c 2f       	mov	r24, r28
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	08 95       	ret

00000ce8 <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	82 e2       	ldi	r24, 0x22	; 34
     cec:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     cf0:	61 e0       	ldi	r22, 0x01	; 1
     cf2:	83 e2       	ldi	r24, 0x23	; 35
     cf4:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	84 e2       	ldi	r24, 0x24	; 36
     cfc:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	85 e2       	ldi	r24, 0x25	; 37
     d04:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	82 e2       	ldi	r24, 0x22	; 34
     d0c:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	83 e2       	ldi	r24, 0x23	; 35
     d14:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     d18:	61 e0       	ldi	r22, 0x01	; 1
     d1a:	84 e2       	ldi	r24, 0x24	; 36
     d1c:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     d20:	61 e0       	ldi	r22, 0x01	; 1
     d22:	85 e2       	ldi	r24, 0x25	; 37
     d24:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     d28:	60 e0       	ldi	r22, 0x00	; 0
     d2a:	8f e0       	ldi	r24, 0x0F	; 15
     d2c:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     d30:	60 e0       	ldi	r22, 0x00	; 0
     d32:	80 e1       	ldi	r24, 0x10	; 16
     d34:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	81 e1       	ldi	r24, 0x11	; 17
     d3c:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     d40:	60 e0       	ldi	r22, 0x00	; 0
     d42:	87 e1       	ldi	r24, 0x17	; 23
     d44:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	8f e0       	ldi	r24, 0x0F	; 15
     d4c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	80 e1       	ldi	r24, 0x10	; 16
     d54:	0e 94 65 0c 	call	0x18ca	; 0x18ca <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
     d58:	60 e0       	ldi	r22, 0x00	; 0
     d5a:	81 e1       	ldi	r24, 0x11	; 17
     d5c:	0e 94 65 0c 	call	0x18ca	; 0x18ca <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	87 e1       	ldi	r24, 0x17	; 23
     d64:	0e 94 65 0c 	call	0x18ca	; 0x18ca <M_Dio_PinPullUp>
     d68:	08 95       	ret

00000d6a <H_KeyPad_Read>:
		
}
u8	 H_KeyPad_Read				(void)
{
     d6a:	cf 93       	push	r28
	u8 Local_u8_KeyPadArr [4][4]	={	{'7','8','9','/'},
										{'4','5','6','*'},
										{'1','2','3','-'},										
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
     d6c:	60 e0       	ldi	r22, 0x00	; 0
     d6e:	82 e2       	ldi	r24, 0x22	; 34
     d70:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
     d74:	8f e0       	ldi	r24, 0x0F	; 15
     d76:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     d7a:	81 11       	cpse	r24, r1
     d7c:	19 c0       	rjmp	.+50     	; 0xdb0 <H_KeyPad_Read+0x46>
     d7e:	2f ef       	ldi	r18, 0xFF	; 255
     d80:	86 e7       	ldi	r24, 0x76	; 118
     d82:	91 e0       	ldi	r25, 0x01	; 1
     d84:	21 50       	subi	r18, 0x01	; 1
     d86:	80 40       	sbci	r24, 0x00	; 0
     d88:	90 40       	sbci	r25, 0x00	; 0
     d8a:	e1 f7       	brne	.-8      	; 0xd84 <H_KeyPad_Read+0x1a>
     d8c:	00 c0       	rjmp	.+0      	; 0xd8e <H_KeyPad_Read+0x24>
     d8e:	00 00       	nop
     d90:	8f e0       	ldi	r24, 0x0F	; 15
     d92:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     d96:	81 11       	cpse	r24, r1
     d98:	0d c0       	rjmp	.+26     	; 0xdb4 <H_KeyPad_Read+0x4a>
     d9a:	8f e0       	ldi	r24, 0x0F	; 15
     d9c:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     da0:	88 23       	and	r24, r24
     da2:	d9 f3       	breq	.-10     	; 0xd9a <H_KeyPad_Read+0x30>
     da4:	61 e0       	ldi	r22, 0x01	; 1
     da6:	82 e2       	ldi	r24, 0x22	; 34
     da8:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     dac:	c7 e3       	ldi	r28, 0x37	; 55
     dae:	03 c0       	rjmp	.+6      	; 0xdb6 <H_KeyPad_Read+0x4c>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
		
}
u8	 H_KeyPad_Read				(void)
{
	u8 Local_u8_KeypadReading		=	0;
     db0:	c0 e0       	ldi	r28, 0x00	; 0
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <H_KeyPad_Read+0x4c>
     db4:	c0 e0       	ldi	r28, 0x00	; 0
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][1];}}
     db6:	80 e1       	ldi	r24, 0x10	; 16
     db8:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     dbc:	81 11       	cpse	r24, r1
     dbe:	18 c0       	rjmp	.+48     	; 0xdf0 <H_KeyPad_Read+0x86>
     dc0:	2f ef       	ldi	r18, 0xFF	; 255
     dc2:	86 e7       	ldi	r24, 0x76	; 118
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	21 50       	subi	r18, 0x01	; 1
     dc8:	80 40       	sbci	r24, 0x00	; 0
     dca:	90 40       	sbci	r25, 0x00	; 0
     dcc:	e1 f7       	brne	.-8      	; 0xdc6 <H_KeyPad_Read+0x5c>
     dce:	00 c0       	rjmp	.+0      	; 0xdd0 <H_KeyPad_Read+0x66>
     dd0:	00 00       	nop
     dd2:	80 e1       	ldi	r24, 0x10	; 16
     dd4:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     dd8:	81 11       	cpse	r24, r1
     dda:	0a c0       	rjmp	.+20     	; 0xdf0 <H_KeyPad_Read+0x86>
     ddc:	80 e1       	ldi	r24, 0x10	; 16
     dde:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     de2:	88 23       	and	r24, r24
     de4:	d9 f3       	breq	.-10     	; 0xddc <H_KeyPad_Read+0x72>
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	82 e2       	ldi	r24, 0x22	; 34
     dea:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     dee:	c8 e3       	ldi	r28, 0x38	; 56
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][2];}}
     df0:	81 e1       	ldi	r24, 0x11	; 17
     df2:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     df6:	81 11       	cpse	r24, r1
     df8:	18 c0       	rjmp	.+48     	; 0xe2a <H_KeyPad_Read+0xc0>
     dfa:	2f ef       	ldi	r18, 0xFF	; 255
     dfc:	86 e7       	ldi	r24, 0x76	; 118
     dfe:	91 e0       	ldi	r25, 0x01	; 1
     e00:	21 50       	subi	r18, 0x01	; 1
     e02:	80 40       	sbci	r24, 0x00	; 0
     e04:	90 40       	sbci	r25, 0x00	; 0
     e06:	e1 f7       	brne	.-8      	; 0xe00 <H_KeyPad_Read+0x96>
     e08:	00 c0       	rjmp	.+0      	; 0xe0a <H_KeyPad_Read+0xa0>
     e0a:	00 00       	nop
     e0c:	81 e1       	ldi	r24, 0x11	; 17
     e0e:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     e12:	81 11       	cpse	r24, r1
     e14:	0a c0       	rjmp	.+20     	; 0xe2a <H_KeyPad_Read+0xc0>
     e16:	81 e1       	ldi	r24, 0x11	; 17
     e18:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     e1c:	88 23       	and	r24, r24
     e1e:	d9 f3       	breq	.-10     	; 0xe16 <H_KeyPad_Read+0xac>
     e20:	61 e0       	ldi	r22, 0x01	; 1
     e22:	82 e2       	ldi	r24, 0x22	; 34
     e24:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     e28:	c9 e3       	ldi	r28, 0x39	; 57
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][3];}}
     e2a:	87 e1       	ldi	r24, 0x17	; 23
     e2c:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     e30:	81 11       	cpse	r24, r1
     e32:	18 c0       	rjmp	.+48     	; 0xe64 <H_KeyPad_Read+0xfa>
     e34:	2f ef       	ldi	r18, 0xFF	; 255
     e36:	86 e7       	ldi	r24, 0x76	; 118
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	21 50       	subi	r18, 0x01	; 1
     e3c:	80 40       	sbci	r24, 0x00	; 0
     e3e:	90 40       	sbci	r25, 0x00	; 0
     e40:	e1 f7       	brne	.-8      	; 0xe3a <H_KeyPad_Read+0xd0>
     e42:	00 c0       	rjmp	.+0      	; 0xe44 <H_KeyPad_Read+0xda>
     e44:	00 00       	nop
     e46:	87 e1       	ldi	r24, 0x17	; 23
     e48:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     e4c:	81 11       	cpse	r24, r1
     e4e:	0a c0       	rjmp	.+20     	; 0xe64 <H_KeyPad_Read+0xfa>
     e50:	87 e1       	ldi	r24, 0x17	; 23
     e52:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     e56:	88 23       	and	r24, r24
     e58:	d9 f3       	breq	.-10     	; 0xe50 <H_KeyPad_Read+0xe6>
     e5a:	61 e0       	ldi	r22, 0x01	; 1
     e5c:	82 e2       	ldi	r24, 0x22	; 34
     e5e:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     e62:	cf e2       	ldi	r28, 0x2F	; 47
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     e64:	61 e0       	ldi	r22, 0x01	; 1
     e66:	82 e2       	ldi	r24, 0x22	; 34
     e68:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,LOW);
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	83 e2       	ldi	r24, 0x23	; 35
     e70:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][0];}}
     e74:	8f e0       	ldi	r24, 0x0F	; 15
     e76:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     e7a:	81 11       	cpse	r24, r1
     e7c:	18 c0       	rjmp	.+48     	; 0xeae <H_KeyPad_Read+0x144>
     e7e:	2f ef       	ldi	r18, 0xFF	; 255
     e80:	86 e7       	ldi	r24, 0x76	; 118
     e82:	91 e0       	ldi	r25, 0x01	; 1
     e84:	21 50       	subi	r18, 0x01	; 1
     e86:	80 40       	sbci	r24, 0x00	; 0
     e88:	90 40       	sbci	r25, 0x00	; 0
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <H_KeyPad_Read+0x11a>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <H_KeyPad_Read+0x124>
     e8e:	00 00       	nop
     e90:	8f e0       	ldi	r24, 0x0F	; 15
     e92:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     e96:	81 11       	cpse	r24, r1
     e98:	0a c0       	rjmp	.+20     	; 0xeae <H_KeyPad_Read+0x144>
     e9a:	8f e0       	ldi	r24, 0x0F	; 15
     e9c:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     ea0:	88 23       	and	r24, r24
     ea2:	d9 f3       	breq	.-10     	; 0xe9a <H_KeyPad_Read+0x130>
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	83 e2       	ldi	r24, 0x23	; 35
     ea8:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     eac:	c4 e3       	ldi	r28, 0x34	; 52
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][1];}}
     eae:	80 e1       	ldi	r24, 0x10	; 16
     eb0:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     eb4:	81 11       	cpse	r24, r1
     eb6:	18 c0       	rjmp	.+48     	; 0xee8 <H_KeyPad_Read+0x17e>
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	86 e7       	ldi	r24, 0x76	; 118
     ebc:	91 e0       	ldi	r25, 0x01	; 1
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	80 40       	sbci	r24, 0x00	; 0
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <H_KeyPad_Read+0x154>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <H_KeyPad_Read+0x15e>
     ec8:	00 00       	nop
     eca:	80 e1       	ldi	r24, 0x10	; 16
     ecc:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     ed0:	81 11       	cpse	r24, r1
     ed2:	0a c0       	rjmp	.+20     	; 0xee8 <H_KeyPad_Read+0x17e>
     ed4:	80 e1       	ldi	r24, 0x10	; 16
     ed6:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     eda:	88 23       	and	r24, r24
     edc:	d9 f3       	breq	.-10     	; 0xed4 <H_KeyPad_Read+0x16a>
     ede:	61 e0       	ldi	r22, 0x01	; 1
     ee0:	83 e2       	ldi	r24, 0x23	; 35
     ee2:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     ee6:	c5 e3       	ldi	r28, 0x35	; 53
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][2];}}
     ee8:	81 e1       	ldi	r24, 0x11	; 17
     eea:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     eee:	81 11       	cpse	r24, r1
     ef0:	18 c0       	rjmp	.+48     	; 0xf22 <H_KeyPad_Read+0x1b8>
     ef2:	2f ef       	ldi	r18, 0xFF	; 255
     ef4:	86 e7       	ldi	r24, 0x76	; 118
     ef6:	91 e0       	ldi	r25, 0x01	; 1
     ef8:	21 50       	subi	r18, 0x01	; 1
     efa:	80 40       	sbci	r24, 0x00	; 0
     efc:	90 40       	sbci	r25, 0x00	; 0
     efe:	e1 f7       	brne	.-8      	; 0xef8 <H_KeyPad_Read+0x18e>
     f00:	00 c0       	rjmp	.+0      	; 0xf02 <H_KeyPad_Read+0x198>
     f02:	00 00       	nop
     f04:	81 e1       	ldi	r24, 0x11	; 17
     f06:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f0a:	81 11       	cpse	r24, r1
     f0c:	0a c0       	rjmp	.+20     	; 0xf22 <H_KeyPad_Read+0x1b8>
     f0e:	81 e1       	ldi	r24, 0x11	; 17
     f10:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f14:	88 23       	and	r24, r24
     f16:	d9 f3       	breq	.-10     	; 0xf0e <H_KeyPad_Read+0x1a4>
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	83 e2       	ldi	r24, 0x23	; 35
     f1c:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     f20:	c6 e3       	ldi	r28, 0x36	; 54
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][3];}}
     f22:	87 e1       	ldi	r24, 0x17	; 23
     f24:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f28:	81 11       	cpse	r24, r1
     f2a:	18 c0       	rjmp	.+48     	; 0xf5c <H_KeyPad_Read+0x1f2>
     f2c:	2f ef       	ldi	r18, 0xFF	; 255
     f2e:	86 e7       	ldi	r24, 0x76	; 118
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	21 50       	subi	r18, 0x01	; 1
     f34:	80 40       	sbci	r24, 0x00	; 0
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <H_KeyPad_Read+0x1c8>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <H_KeyPad_Read+0x1d2>
     f3c:	00 00       	nop
     f3e:	87 e1       	ldi	r24, 0x17	; 23
     f40:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f44:	81 11       	cpse	r24, r1
     f46:	0a c0       	rjmp	.+20     	; 0xf5c <H_KeyPad_Read+0x1f2>
     f48:	87 e1       	ldi	r24, 0x17	; 23
     f4a:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f4e:	88 23       	and	r24, r24
     f50:	d9 f3       	breq	.-10     	; 0xf48 <H_KeyPad_Read+0x1de>
     f52:	61 e0       	ldi	r22, 0x01	; 1
     f54:	83 e2       	ldi	r24, 0x23	; 35
     f56:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     f5a:	ca e2       	ldi	r28, 0x2A	; 42
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     f5c:	61 e0       	ldi	r22, 0x01	; 1
     f5e:	83 e2       	ldi	r24, 0x23	; 35
     f60:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,LOW);
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	84 e2       	ldi	r24, 0x24	; 36
     f68:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
		
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][0];}}
     f6c:	8f e0       	ldi	r24, 0x0F	; 15
     f6e:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f72:	81 11       	cpse	r24, r1
     f74:	18 c0       	rjmp	.+48     	; 0xfa6 <H_KeyPad_Read+0x23c>
     f76:	2f ef       	ldi	r18, 0xFF	; 255
     f78:	86 e7       	ldi	r24, 0x76	; 118
     f7a:	91 e0       	ldi	r25, 0x01	; 1
     f7c:	21 50       	subi	r18, 0x01	; 1
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	e1 f7       	brne	.-8      	; 0xf7c <H_KeyPad_Read+0x212>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <H_KeyPad_Read+0x21c>
     f86:	00 00       	nop
     f88:	8f e0       	ldi	r24, 0x0F	; 15
     f8a:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f8e:	81 11       	cpse	r24, r1
     f90:	0a c0       	rjmp	.+20     	; 0xfa6 <H_KeyPad_Read+0x23c>
     f92:	8f e0       	ldi	r24, 0x0F	; 15
     f94:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     f98:	88 23       	and	r24, r24
     f9a:	d9 f3       	breq	.-10     	; 0xf92 <H_KeyPad_Read+0x228>
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	84 e2       	ldi	r24, 0x24	; 36
     fa0:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     fa4:	c1 e3       	ldi	r28, 0x31	; 49
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][1];}}
     fa6:	80 e1       	ldi	r24, 0x10	; 16
     fa8:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     fac:	81 11       	cpse	r24, r1
     fae:	18 c0       	rjmp	.+48     	; 0xfe0 <H_KeyPad_Read+0x276>
     fb0:	2f ef       	ldi	r18, 0xFF	; 255
     fb2:	86 e7       	ldi	r24, 0x76	; 118
     fb4:	91 e0       	ldi	r25, 0x01	; 1
     fb6:	21 50       	subi	r18, 0x01	; 1
     fb8:	80 40       	sbci	r24, 0x00	; 0
     fba:	90 40       	sbci	r25, 0x00	; 0
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <H_KeyPad_Read+0x24c>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <H_KeyPad_Read+0x256>
     fc0:	00 00       	nop
     fc2:	80 e1       	ldi	r24, 0x10	; 16
     fc4:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     fc8:	81 11       	cpse	r24, r1
     fca:	0a c0       	rjmp	.+20     	; 0xfe0 <H_KeyPad_Read+0x276>
     fcc:	80 e1       	ldi	r24, 0x10	; 16
     fce:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     fd2:	88 23       	and	r24, r24
     fd4:	d9 f3       	breq	.-10     	; 0xfcc <H_KeyPad_Read+0x262>
     fd6:	61 e0       	ldi	r22, 0x01	; 1
     fd8:	84 e2       	ldi	r24, 0x24	; 36
     fda:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
     fde:	c2 e3       	ldi	r28, 0x32	; 50
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][2];}}
     fe0:	81 e1       	ldi	r24, 0x11	; 17
     fe2:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
     fe6:	81 11       	cpse	r24, r1
     fe8:	18 c0       	rjmp	.+48     	; 0x101a <H_KeyPad_Read+0x2b0>
     fea:	2f ef       	ldi	r18, 0xFF	; 255
     fec:	86 e7       	ldi	r24, 0x76	; 118
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	21 50       	subi	r18, 0x01	; 1
     ff2:	80 40       	sbci	r24, 0x00	; 0
     ff4:	90 40       	sbci	r25, 0x00	; 0
     ff6:	e1 f7       	brne	.-8      	; 0xff0 <H_KeyPad_Read+0x286>
     ff8:	00 c0       	rjmp	.+0      	; 0xffa <H_KeyPad_Read+0x290>
     ffa:	00 00       	nop
     ffc:	81 e1       	ldi	r24, 0x11	; 17
     ffe:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1002:	81 11       	cpse	r24, r1
    1004:	0a c0       	rjmp	.+20     	; 0x101a <H_KeyPad_Read+0x2b0>
    1006:	81 e1       	ldi	r24, 0x11	; 17
    1008:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    100c:	88 23       	and	r24, r24
    100e:	d9 f3       	breq	.-10     	; 0x1006 <H_KeyPad_Read+0x29c>
    1010:	61 e0       	ldi	r22, 0x01	; 1
    1012:	84 e2       	ldi	r24, 0x24	; 36
    1014:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    1018:	c3 e3       	ldi	r28, 0x33	; 51
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][3];}}
    101a:	87 e1       	ldi	r24, 0x17	; 23
    101c:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1020:	81 11       	cpse	r24, r1
    1022:	18 c0       	rjmp	.+48     	; 0x1054 <H_KeyPad_Read+0x2ea>
    1024:	2f ef       	ldi	r18, 0xFF	; 255
    1026:	86 e7       	ldi	r24, 0x76	; 118
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	21 50       	subi	r18, 0x01	; 1
    102c:	80 40       	sbci	r24, 0x00	; 0
    102e:	90 40       	sbci	r25, 0x00	; 0
    1030:	e1 f7       	brne	.-8      	; 0x102a <H_KeyPad_Read+0x2c0>
    1032:	00 c0       	rjmp	.+0      	; 0x1034 <H_KeyPad_Read+0x2ca>
    1034:	00 00       	nop
    1036:	87 e1       	ldi	r24, 0x17	; 23
    1038:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    103c:	81 11       	cpse	r24, r1
    103e:	0a c0       	rjmp	.+20     	; 0x1054 <H_KeyPad_Read+0x2ea>
    1040:	87 e1       	ldi	r24, 0x17	; 23
    1042:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1046:	88 23       	and	r24, r24
    1048:	d9 f3       	breq	.-10     	; 0x1040 <H_KeyPad_Read+0x2d6>
    104a:	61 e0       	ldi	r22, 0x01	; 1
    104c:	84 e2       	ldi	r24, 0x24	; 36
    104e:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    1052:	cd e2       	ldi	r28, 0x2D	; 45
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
    1054:	61 e0       	ldi	r22, 0x01	; 1
    1056:	84 e2       	ldi	r24, 0x24	; 36
    1058:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
				
	M_Dio_PinWrite(KEYPAD_R3_PIN,LOW);
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	85 e2       	ldi	r24, 0x25	; 37
    1060:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][0];}}
    1064:	8f e0       	ldi	r24, 0x0F	; 15
    1066:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    106a:	81 11       	cpse	r24, r1
    106c:	18 c0       	rjmp	.+48     	; 0x109e <H_KeyPad_Read+0x334>
    106e:	2f ef       	ldi	r18, 0xFF	; 255
    1070:	86 e7       	ldi	r24, 0x76	; 118
    1072:	91 e0       	ldi	r25, 0x01	; 1
    1074:	21 50       	subi	r18, 0x01	; 1
    1076:	80 40       	sbci	r24, 0x00	; 0
    1078:	90 40       	sbci	r25, 0x00	; 0
    107a:	e1 f7       	brne	.-8      	; 0x1074 <H_KeyPad_Read+0x30a>
    107c:	00 c0       	rjmp	.+0      	; 0x107e <H_KeyPad_Read+0x314>
    107e:	00 00       	nop
    1080:	8f e0       	ldi	r24, 0x0F	; 15
    1082:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1086:	81 11       	cpse	r24, r1
    1088:	0a c0       	rjmp	.+20     	; 0x109e <H_KeyPad_Read+0x334>
    108a:	8f e0       	ldi	r24, 0x0F	; 15
    108c:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1090:	88 23       	and	r24, r24
    1092:	d9 f3       	breq	.-10     	; 0x108a <H_KeyPad_Read+0x320>
    1094:	61 e0       	ldi	r22, 0x01	; 1
    1096:	85 e2       	ldi	r24, 0x25	; 37
    1098:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    109c:	c3 e4       	ldi	r28, 0x43	; 67
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][1];}}
    109e:	80 e1       	ldi	r24, 0x10	; 16
    10a0:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    10a4:	81 11       	cpse	r24, r1
    10a6:	18 c0       	rjmp	.+48     	; 0x10d8 <H_KeyPad_Read+0x36e>
    10a8:	2f ef       	ldi	r18, 0xFF	; 255
    10aa:	86 e7       	ldi	r24, 0x76	; 118
    10ac:	91 e0       	ldi	r25, 0x01	; 1
    10ae:	21 50       	subi	r18, 0x01	; 1
    10b0:	80 40       	sbci	r24, 0x00	; 0
    10b2:	90 40       	sbci	r25, 0x00	; 0
    10b4:	e1 f7       	brne	.-8      	; 0x10ae <H_KeyPad_Read+0x344>
    10b6:	00 c0       	rjmp	.+0      	; 0x10b8 <H_KeyPad_Read+0x34e>
    10b8:	00 00       	nop
    10ba:	80 e1       	ldi	r24, 0x10	; 16
    10bc:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    10c0:	81 11       	cpse	r24, r1
    10c2:	0a c0       	rjmp	.+20     	; 0x10d8 <H_KeyPad_Read+0x36e>
    10c4:	80 e1       	ldi	r24, 0x10	; 16
    10c6:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    10ca:	88 23       	and	r24, r24
    10cc:	d9 f3       	breq	.-10     	; 0x10c4 <H_KeyPad_Read+0x35a>
    10ce:	61 e0       	ldi	r22, 0x01	; 1
    10d0:	85 e2       	ldi	r24, 0x25	; 37
    10d2:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    10d6:	c0 e3       	ldi	r28, 0x30	; 48
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][2];}}
    10d8:	81 e1       	ldi	r24, 0x11	; 17
    10da:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    10de:	81 11       	cpse	r24, r1
    10e0:	18 c0       	rjmp	.+48     	; 0x1112 <H_KeyPad_Read+0x3a8>
    10e2:	2f ef       	ldi	r18, 0xFF	; 255
    10e4:	86 e7       	ldi	r24, 0x76	; 118
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	21 50       	subi	r18, 0x01	; 1
    10ea:	80 40       	sbci	r24, 0x00	; 0
    10ec:	90 40       	sbci	r25, 0x00	; 0
    10ee:	e1 f7       	brne	.-8      	; 0x10e8 <H_KeyPad_Read+0x37e>
    10f0:	00 c0       	rjmp	.+0      	; 0x10f2 <H_KeyPad_Read+0x388>
    10f2:	00 00       	nop
    10f4:	81 e1       	ldi	r24, 0x11	; 17
    10f6:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    10fa:	81 11       	cpse	r24, r1
    10fc:	0a c0       	rjmp	.+20     	; 0x1112 <H_KeyPad_Read+0x3a8>
    10fe:	81 e1       	ldi	r24, 0x11	; 17
    1100:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1104:	88 23       	and	r24, r24
    1106:	d9 f3       	breq	.-10     	; 0x10fe <H_KeyPad_Read+0x394>
    1108:	61 e0       	ldi	r22, 0x01	; 1
    110a:	85 e2       	ldi	r24, 0x25	; 37
    110c:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    1110:	cd e3       	ldi	r28, 0x3D	; 61
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][3];}}
    1112:	87 e1       	ldi	r24, 0x17	; 23
    1114:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1118:	81 11       	cpse	r24, r1
    111a:	18 c0       	rjmp	.+48     	; 0x114c <H_KeyPad_Read+0x3e2>
    111c:	2f ef       	ldi	r18, 0xFF	; 255
    111e:	86 e7       	ldi	r24, 0x76	; 118
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	21 50       	subi	r18, 0x01	; 1
    1124:	80 40       	sbci	r24, 0x00	; 0
    1126:	90 40       	sbci	r25, 0x00	; 0
    1128:	e1 f7       	brne	.-8      	; 0x1122 <H_KeyPad_Read+0x3b8>
    112a:	00 c0       	rjmp	.+0      	; 0x112c <H_KeyPad_Read+0x3c2>
    112c:	00 00       	nop
    112e:	87 e1       	ldi	r24, 0x17	; 23
    1130:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1134:	81 11       	cpse	r24, r1
    1136:	0a c0       	rjmp	.+20     	; 0x114c <H_KeyPad_Read+0x3e2>
    1138:	87 e1       	ldi	r24, 0x17	; 23
    113a:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    113e:	88 23       	and	r24, r24
    1140:	d9 f3       	breq	.-10     	; 0x1138 <H_KeyPad_Read+0x3ce>
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	85 e2       	ldi	r24, 0x25	; 37
    1146:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    114a:	cb e2       	ldi	r28, 0x2B	; 43
	
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
    114c:	61 e0       	ldi	r22, 0x01	; 1
    114e:	85 e2       	ldi	r24, 0x25	; 37
    1150:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	
	return Local_u8_KeypadReading ;
    1154:	8c 2f       	mov	r24, r28
    1156:	cf 91       	pop	r28
    1158:	08 95       	ret

0000115a <H_Lcd_WriteCharacter>:
// 	#endif
// }


void H_Lcd_WriteCharacter	(u8 Local_u8_Character)
{
    115a:	cf 93       	push	r28
    115c:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
    115e:	61 e0       	ldi	r22, 0x01	; 1
    1160:	84 e1       	ldi	r24, 0x14	; 20
    1162:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	#elif		LCD_MODE	==	_4_BIT_MODE
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character & 0XF0);	
    1166:	88 b3       	in	r24, 0x18	; 24
    1168:	8f 70       	andi	r24, 0x0F	; 15
    116a:	9c 2f       	mov	r25, r28
    116c:	90 7f       	andi	r25, 0xF0	; 240
    116e:	89 2b       	or	r24, r25
    1170:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    1172:	61 e0       	ldi	r22, 0x01	; 1
    1174:	86 e1       	ldi	r24, 0x16	; 22
    1176:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    117a:	8f e9       	ldi	r24, 0x9F	; 159
    117c:	9f e0       	ldi	r25, 0x0F	; 15
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <H_Lcd_WriteCharacter+0x24>
    1182:	00 c0       	rjmp	.+0      	; 0x1184 <H_Lcd_WriteCharacter+0x2a>
    1184:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    1186:	60 e0       	ldi	r22, 0x00	; 0
    1188:	86 e1       	ldi	r24, 0x16	; 22
    118a:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character << 4);
    118e:	28 b3       	in	r18, 0x18	; 24
    1190:	30 e1       	ldi	r19, 0x10	; 16
    1192:	c3 9f       	mul	r28, r19
    1194:	c0 01       	movw	r24, r0
    1196:	11 24       	eor	r1, r1
    1198:	92 2f       	mov	r25, r18
    119a:	9f 70       	andi	r25, 0x0F	; 15
    119c:	89 2b       	or	r24, r25
    119e:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    11a0:	61 e0       	ldi	r22, 0x01	; 1
    11a2:	86 e1       	ldi	r24, 0x16	; 22
    11a4:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    11a8:	8f e9       	ldi	r24, 0x9F	; 159
    11aa:	9f e0       	ldi	r25, 0x0F	; 15
    11ac:	01 97       	sbiw	r24, 0x01	; 1
    11ae:	f1 f7       	brne	.-4      	; 0x11ac <H_Lcd_WriteCharacter+0x52>
    11b0:	00 c0       	rjmp	.+0      	; 0x11b2 <H_Lcd_WriteCharacter+0x58>
    11b2:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	86 e1       	ldi	r24, 0x16	; 22
    11b8:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	#endif 

	
}
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <H_Lcd_WriteCommand>:
// 	#endif
// }


void H_Lcd_WriteCommand		(u8 Local_u8_Command)
{
    11c0:	cf 93       	push	r28
    11c2:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	84 e1       	ldi	r24, 0x14	; 20
    11c8:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	
	#elif		LCD_MODE	==	_4_BIT_MODE
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command & 0XF0);
    11cc:	88 b3       	in	r24, 0x18	; 24
    11ce:	8f 70       	andi	r24, 0x0F	; 15
    11d0:	9c 2f       	mov	r25, r28
    11d2:	90 7f       	andi	r25, 0xF0	; 240
    11d4:	89 2b       	or	r24, r25
    11d6:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    11d8:	61 e0       	ldi	r22, 0x01	; 1
    11da:	86 e1       	ldi	r24, 0x16	; 22
    11dc:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    11e0:	8f e9       	ldi	r24, 0x9F	; 159
    11e2:	9f e0       	ldi	r25, 0x0F	; 15
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <H_Lcd_WriteCommand+0x24>
    11e8:	00 c0       	rjmp	.+0      	; 0x11ea <H_Lcd_WriteCommand+0x2a>
    11ea:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    11ec:	60 e0       	ldi	r22, 0x00	; 0
    11ee:	86 e1       	ldi	r24, 0x16	; 22
    11f0:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    11f4:	8f e1       	ldi	r24, 0x1F	; 31
    11f6:	9e e4       	ldi	r25, 0x4E	; 78
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <H_Lcd_WriteCommand+0x38>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <H_Lcd_WriteCommand+0x3e>
    11fe:	00 00       	nop
	_delay_ms(5);

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command << 4);
    1200:	28 b3       	in	r18, 0x18	; 24
    1202:	30 e1       	ldi	r19, 0x10	; 16
    1204:	c3 9f       	mul	r28, r19
    1206:	c0 01       	movw	r24, r0
    1208:	11 24       	eor	r1, r1
    120a:	92 2f       	mov	r25, r18
    120c:	9f 70       	andi	r25, 0x0F	; 15
    120e:	89 2b       	or	r24, r25
    1210:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	86 e1       	ldi	r24, 0x16	; 22
    1216:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    121a:	8f e9       	ldi	r24, 0x9F	; 159
    121c:	9f e0       	ldi	r25, 0x0F	; 15
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <H_Lcd_WriteCommand+0x5e>
    1222:	00 c0       	rjmp	.+0      	; 0x1224 <H_Lcd_WriteCommand+0x64>
    1224:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	86 e1       	ldi	r24, 0x16	; 22
    122a:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    122e:	8f e1       	ldi	r24, 0x1F	; 31
    1230:	9e e4       	ldi	r25, 0x4E	; 78
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <H_Lcd_WriteCommand+0x72>
    1236:	00 c0       	rjmp	.+0      	; 0x1238 <H_Lcd_WriteCommand+0x78>
    1238:	00 00       	nop
	_delay_ms(5);
	#endif

}
    123a:	cf 91       	pop	r28
    123c:	08 95       	ret

0000123e <H_Lcd_Init>:
	M_Dio_PinMode(LCD_DATA_1_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_2_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_3_PIN,OUTPUT);
	#elif	LCD_MODE	==	_4_BIT_MODE
	#endif
	M_Dio_PinMode(LCD_DATA_4_PIN,OUTPUT);
    123e:	61 e0       	ldi	r22, 0x01	; 1
    1240:	88 e1       	ldi	r24, 0x18	; 24
    1242:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_5_PIN,OUTPUT);
    1246:	61 e0       	ldi	r22, 0x01	; 1
    1248:	89 e1       	ldi	r24, 0x19	; 25
    124a:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_6_PIN,OUTPUT);
    124e:	61 e0       	ldi	r22, 0x01	; 1
    1250:	8a e1       	ldi	r24, 0x1A	; 26
    1252:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_7_PIN,OUTPUT);
    1256:	61 e0       	ldi	r22, 0x01	; 1
    1258:	8b e1       	ldi	r24, 0x1B	; 27
    125a:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
    125e:	61 e0       	ldi	r22, 0x01	; 1
    1260:	84 e1       	ldi	r24, 0x14	; 20
    1262:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
    1266:	61 e0       	ldi	r22, 0x01	; 1
    1268:	85 e1       	ldi	r24, 0x15	; 21
    126a:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);	
    126e:	61 e0       	ldi	r22, 0x01	; 1
    1270:	86 e1       	ldi	r24, 0x16	; 22
    1272:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
    1276:	2f ef       	ldi	r18, 0xFF	; 255
    1278:	83 ed       	ldi	r24, 0xD3	; 211
    127a:	90 e3       	ldi	r25, 0x30	; 48
    127c:	21 50       	subi	r18, 0x01	; 1
    127e:	80 40       	sbci	r24, 0x00	; 0
    1280:	90 40       	sbci	r25, 0x00	; 0
    1282:	e1 f7       	brne	.-8      	; 0x127c <H_Lcd_Init+0x3e>
    1284:	00 c0       	rjmp	.+0      	; 0x1286 <H_Lcd_Init+0x48>
    1286:	00 00       	nop
	_delay_ms(1000);
	
	#if			LCD_MODE	==	_8_BIT_MODE	
	H_Lcd_WriteCommand(LCD_CMD_SELECT_8_BIT_MODE);				// to select 8 bit mode
	#elif		LCD_MODE	==	_4_BIT_MODE	
	H_Lcd_WriteCommand(0X33);
    1288:	83 e3       	ldi	r24, 0x33	; 51
    128a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0X32);
    128e:	82 e3       	ldi	r24, 0x32	; 50
    1290:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_SELECT_4_BIT_MODE);				// to select 4 bit mode
    1294:	88 e2       	ldi	r24, 0x28	; 40
    1296:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
	#endif		
	H_Lcd_WriteCommand(LCD_CMD_DISPLAY_ON_CURSOR_OFF);			// to Display ON, cursor OFF
    129a:	8c e0       	ldi	r24, 0x0C	; 12
    129c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);							// to clear LCD
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_RETURN_HOME);					// to return home
    12a6:	82 e0       	ldi	r24, 0x02	; 2
    12a8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
    12ac:	08 95       	ret

000012ae <H_Lcd_WriteNumber>:
// 	_delay_ms(5);
// 	#endif
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
    12ae:	3f 92       	push	r3
    12b0:	4f 92       	push	r4
    12b2:	5f 92       	push	r5
    12b4:	6f 92       	push	r6
    12b6:	7f 92       	push	r7
    12b8:	8f 92       	push	r8
    12ba:	9f 92       	push	r9
    12bc:	af 92       	push	r10
    12be:	bf 92       	push	r11
    12c0:	cf 92       	push	r12
    12c2:	df 92       	push	r13
    12c4:	ef 92       	push	r14
    12c6:	ff 92       	push	r15
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	00 d0       	rcall	.+0      	; 0x12d2 <H_Lcd_WriteNumber+0x24>
    12d2:	00 d0       	rcall	.+0      	; 0x12d4 <H_Lcd_WriteNumber+0x26>
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	4b 01       	movw	r8, r22
    12da:	5c 01       	movw	r10, r24
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    12dc:	2d b7       	in	r18, 0x3d	; 61
    12de:	3e b7       	in	r19, 0x3e	; 62
    12e0:	3a 83       	std	Y+2, r19	; 0x02
    12e2:	29 83       	std	Y+1, r18	; 0x01
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
 	s32 check_reminder = Local_s32_Number;
 	if (Local_s32_Number == 0)
    12e4:	67 2b       	or	r22, r23
    12e6:	68 2b       	or	r22, r24
    12e8:	69 2b       	or	r22, r25
    12ea:	19 f4       	brne	.+6      	; 0x12f2 <H_Lcd_WriteNumber+0x44>
 	{
 		H_Lcd_WriteCharacter('0');
    12ec:	80 e3       	ldi	r24, 0x30	; 48
    12ee:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Lcd_WriteCharacter>
 	}
 	check_reminder*=1000;
    12f2:	a8 ee       	ldi	r26, 0xE8	; 232
    12f4:	b3 e0       	ldi	r27, 0x03	; 3
    12f6:	a5 01       	movw	r20, r10
    12f8:	94 01       	movw	r18, r8
    12fa:	0e 94 c7 10 	call	0x218e	; 0x218e <__muluhisi3>
 	
 	if ((check_reminder % 1000)== 0)
    12fe:	28 ee       	ldi	r18, 0xE8	; 232
    1300:	33 e0       	ldi	r19, 0x03	; 3
    1302:	40 e0       	ldi	r20, 0x00	; 0
    1304:	50 e0       	ldi	r21, 0x00	; 0
    1306:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodsi4>
    130a:	67 2b       	or	r22, r23
    130c:	68 2b       	or	r22, r24
    130e:	69 2b       	or	r22, r25
    1310:	09 f0       	breq	.+2      	; 0x1314 <H_Lcd_WriteNumber+0x66>
    1312:	8e c0       	rjmp	.+284    	; 0x1430 <H_Lcd_WriteNumber+0x182>
 	{
 		if (Local_s32_Number < 0)
    1314:	bb 20       	and	r11, r11
    1316:	5c f4       	brge	.+22     	; 0x132e <H_Lcd_WriteNumber+0x80>
 		{
 		
 			H_Lcd_WriteCharacter('-');
    1318:	8d e2       	ldi	r24, 0x2D	; 45
    131a:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Lcd_WriteCharacter>
 			Local_s32_Number = Local_s32_Number * -1;
    131e:	b0 94       	com	r11
    1320:	a0 94       	com	r10
    1322:	90 94       	com	r9
    1324:	80 94       	com	r8
    1326:	81 1c       	adc	r8, r1
    1328:	91 1c       	adc	r9, r1
    132a:	a1 1c       	adc	r10, r1
    132c:	b1 1c       	adc	r11, r1
 		}
 		if (Local_s32_Number > 0)
    132e:	18 14       	cp	r1, r8
    1330:	19 04       	cpc	r1, r9
    1332:	1a 04       	cpc	r1, r10
    1334:	1b 04       	cpc	r1, r11
    1336:	0c f0       	brlt	.+2      	; 0x133a <H_Lcd_WriteNumber+0x8c>
    1338:	7b c0       	rjmp	.+246    	; 0x1430 <H_Lcd_WriteNumber+0x182>
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
    133a:	a5 01       	movw	r20, r10
    133c:	94 01       	movw	r18, r8
 			u8  Local_u8_DigitCounter = 0;
    133e:	31 2c       	mov	r3, r1
 			while (Local_u32_Printed_Number)
    1340:	0e c0       	rjmp	.+28     	; 0x135e <H_Lcd_WriteNumber+0xb0>
 			{
 				if (Local_u32_Printed_Number)
    1342:	21 15       	cp	r18, r1
    1344:	31 05       	cpc	r19, r1
    1346:	41 05       	cpc	r20, r1
    1348:	51 05       	cpc	r21, r1
    134a:	49 f0       	breq	.+18     	; 0x135e <H_Lcd_WriteNumber+0xb0>
 				{
 					Local_u32_Printed_Number/= 10;
    134c:	ca 01       	movw	r24, r20
    134e:	b9 01       	movw	r22, r18
    1350:	2a e0       	ldi	r18, 0x0A	; 10
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	50 e0       	ldi	r21, 0x00	; 0
    1358:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__udivmodsi4>
 					Local_u8_DigitCounter++;
    135c:	33 94       	inc	r3
 		}
 		if (Local_s32_Number > 0)
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
 			u8  Local_u8_DigitCounter = 0;
 			while (Local_u32_Printed_Number)
    135e:	21 15       	cp	r18, r1
    1360:	31 05       	cpc	r19, r1
    1362:	41 05       	cpc	r20, r1
    1364:	51 05       	cpc	r21, r1
    1366:	69 f7       	brne	.-38     	; 0x1342 <H_Lcd_WriteNumber+0x94>
 					Local_u32_Printed_Number/= 10;
 					Local_u8_DigitCounter++;
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
    1368:	8d b7       	in	r24, 0x3d	; 61
    136a:	9e b7       	in	r25, 0x3e	; 62
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	83 2d       	mov	r24, r3
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	88 0f       	add	r24, r24
    1376:	99 1f       	adc	r25, r25
    1378:	88 0f       	add	r24, r24
    137a:	99 1f       	adc	r25, r25
    137c:	2d b7       	in	r18, 0x3d	; 61
    137e:	3e b7       	in	r19, 0x3e	; 62
    1380:	28 1b       	sub	r18, r24
    1382:	39 0b       	sbc	r19, r25
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	3e bf       	out	0x3e, r19	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	2d bf       	out	0x3d, r18	; 61
    138e:	0d b7       	in	r16, 0x3d	; 61
    1390:	1e b7       	in	r17, 0x3e	; 62
    1392:	0f 5f       	subi	r16, 0xFF	; 255
    1394:	1f 4f       	sbci	r17, 0xFF	; 255
 			u32 Local_u8_ArrCounter = 0;
    1396:	41 2c       	mov	r4, r1
    1398:	51 2c       	mov	r5, r1
    139a:	32 01       	movw	r6, r4
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    139c:	20 c0       	rjmp	.+64     	; 0x13de <H_Lcd_WriteNumber+0x130>
 			{
 				Local_u8_ArrCounter ++;
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	43 1a       	sub	r4, r19
    13a2:	53 0a       	sbc	r5, r19
    13a4:	63 0a       	sbc	r6, r19
    13a6:	73 0a       	sbc	r7, r19
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
    13a8:	c4 18       	sub	r12, r4
    13aa:	d5 08       	sbc	r13, r5
    13ac:	e6 08       	sbc	r14, r6
    13ae:	f7 08       	sbc	r15, r7
    13b0:	c5 01       	movw	r24, r10
    13b2:	b4 01       	movw	r22, r8
    13b4:	2a e0       	ldi	r18, 0x0A	; 10
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodsi4>
    13c0:	cc 0c       	add	r12, r12
    13c2:	dd 1c       	adc	r13, r13
    13c4:	cc 0c       	add	r12, r12
    13c6:	dd 1c       	adc	r13, r13
    13c8:	f8 01       	movw	r30, r16
    13ca:	ec 0d       	add	r30, r12
    13cc:	fd 1d       	adc	r31, r13
    13ce:	60 83       	st	Z, r22
    13d0:	71 83       	std	Z+1, r23	; 0x01
    13d2:	82 83       	std	Z+2, r24	; 0x02
    13d4:	93 83       	std	Z+3, r25	; 0x03
 				Local_s32_Number /= 10;
    13d6:	82 2e       	mov	r8, r18
    13d8:	93 2e       	mov	r9, r19
    13da:	a4 2e       	mov	r10, r20
    13dc:	b5 2e       	mov	r11, r21
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
 			u32 Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    13de:	c3 2c       	mov	r12, r3
    13e0:	d1 2c       	mov	r13, r1
    13e2:	e1 2c       	mov	r14, r1
    13e4:	f1 2c       	mov	r15, r1
    13e6:	4c 14       	cp	r4, r12
    13e8:	5d 04       	cpc	r5, r13
    13ea:	6e 04       	cpc	r6, r14
    13ec:	7f 04       	cpc	r7, r15
    13ee:	b8 f2       	brcs	.-82     	; 0x139e <H_Lcd_WriteNumber+0xf0>
    13f0:	81 2c       	mov	r8, r1
    13f2:	91 2c       	mov	r9, r1
    13f4:	54 01       	movw	r10, r8
    13f6:	10 c0       	rjmp	.+32     	; 0x1418 <H_Lcd_WriteNumber+0x16a>
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
 			{
 				H_Lcd_WriteCharacter(arr[Local_u8_ArrCounter]+48);
    13f8:	f4 01       	movw	r30, r8
    13fa:	ee 0f       	add	r30, r30
    13fc:	ff 1f       	adc	r31, r31
    13fe:	ee 0f       	add	r30, r30
    1400:	ff 1f       	adc	r31, r31
    1402:	e0 0f       	add	r30, r16
    1404:	f1 1f       	adc	r31, r17
    1406:	80 81       	ld	r24, Z
    1408:	80 5d       	subi	r24, 0xD0	; 208
    140a:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Lcd_WriteCharacter>
 				Local_u8_ArrCounter++;
    140e:	8f ef       	ldi	r24, 0xFF	; 255
    1410:	88 1a       	sub	r8, r24
    1412:	98 0a       	sbc	r9, r24
    1414:	a8 0a       	sbc	r10, r24
    1416:	b8 0a       	sbc	r11, r24
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
 				Local_s32_Number /= 10;
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    1418:	8c 14       	cp	r8, r12
    141a:	9d 04       	cpc	r9, r13
    141c:	ae 04       	cpc	r10, r14
    141e:	bf 04       	cpc	r11, r15
    1420:	58 f3       	brcs	.-42     	; 0x13f8 <H_Lcd_WriteNumber+0x14a>
    1422:	2b 81       	ldd	r18, Y+3	; 0x03
    1424:	3c 81       	ldd	r19, Y+4	; 0x04
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	3e bf       	out	0x3e, r19	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	2d bf       	out	0x3d, r18	; 61
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	9a 81       	ldd	r25, Y+2	; 0x02
    1434:	0f b6       	in	r0, 0x3f	; 63
    1436:	f8 94       	cli
    1438:	9e bf       	out	0x3e, r25	; 62
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	8d bf       	out	0x3d, r24	; 61
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	df 91       	pop	r29
    1448:	cf 91       	pop	r28
    144a:	1f 91       	pop	r17
    144c:	0f 91       	pop	r16
    144e:	ff 90       	pop	r15
    1450:	ef 90       	pop	r14
    1452:	df 90       	pop	r13
    1454:	cf 90       	pop	r12
    1456:	bf 90       	pop	r11
    1458:	af 90       	pop	r10
    145a:	9f 90       	pop	r9
    145c:	8f 90       	pop	r8
    145e:	7f 90       	pop	r7
    1460:	6f 90       	pop	r6
    1462:	5f 90       	pop	r5
    1464:	4f 90       	pop	r4
    1466:	3f 90       	pop	r3
    1468:	08 95       	ret

0000146a <H_Lcd_GoTo>:
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
	H_Lcd_GoTo(0,0);
}

void H_Lcd_GoTo	(u8 Local_u8_Row,u8 Local_u8_Coloumn )
{
    146a:	cf 93       	push	r28
    146c:	df 93       	push	r29
    146e:	00 d0       	rcall	.+0      	; 0x1470 <H_Lcd_GoTo+0x6>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
	u8 arr [2] = {LCD_CMD_FIRST_ROW, LCD_CMD_SECOND_ROW};
    1474:	90 e8       	ldi	r25, 0x80	; 128
    1476:	99 83       	std	Y+1, r25	; 0x01
    1478:	90 ec       	ldi	r25, 0xC0	; 192
    147a:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
    147c:	e1 e0       	ldi	r30, 0x01	; 1
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	ec 0f       	add	r30, r28
    1482:	fd 1f       	adc	r31, r29
    1484:	e8 0f       	add	r30, r24
    1486:	f1 1d       	adc	r31, r1
    1488:	80 81       	ld	r24, Z
    148a:	86 0f       	add	r24, r22
    148c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
	
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <H_Lcd_Clear>:
// }

void H_Lcd_Clear (void)
{
	
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
    149a:	81 e0       	ldi	r24, 0x01	; 1
    149c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <H_Lcd_WriteCommand>
	H_Lcd_GoTo(0,0);
    14a0:	60 e0       	ldi	r22, 0x00	; 0
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
    14a8:	08 95       	ret

000014aa <H_Lcd_WriteString>:
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
	
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	8c 01       	movw	r16, r24
	u8 Local_u8_Counter = 0;
    14b2:	c0 e0       	ldi	r28, 0x00	; 0
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    14b4:	09 c0       	rjmp	.+18     	; 0x14c8 <H_Lcd_WriteString+0x1e>
	{
		H_Lcd_WriteCharacter(Local_u8_PtrToString[Local_u8_Counter]);
    14b6:	0e 94 ad 08 	call	0x115a	; 0x115a <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
    14ba:	cf 5f       	subi	r28, 0xFF	; 255
		if (Local_u8_Counter == 16)
    14bc:	c0 31       	cpi	r28, 0x10	; 16
    14be:	21 f4       	brne	.+8      	; 0x14c8 <H_Lcd_WriteString+0x1e>
		{
			H_Lcd_GoTo(1,0);
    14c0:	60 e0       	ldi	r22, 0x00	; 0
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	0e 94 35 0a 	call	0x146a	; 0x146a <H_Lcd_GoTo>
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
	u8 Local_u8_Counter = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    14c8:	f8 01       	movw	r30, r16
    14ca:	ec 0f       	add	r30, r28
    14cc:	f1 1d       	adc	r31, r1
    14ce:	80 81       	ld	r24, Z
    14d0:	81 11       	cpse	r24, r1
    14d2:	f1 cf       	rjmp	.-30     	; 0x14b6 <H_Lcd_WriteString+0xc>
		if (Local_u8_Counter == 16)
		{
			H_Lcd_GoTo(1,0);
		}
	}
    14d4:	cf 91       	pop	r28
    14d6:	1f 91       	pop	r17
    14d8:	0f 91       	pop	r16
    14da:	08 95       	ret

000014dc <H_Led_Init>:

#include "Led.h"

void	H_Led_Init(u8 Local_u8_Led_Number)
{	
	M_Dio_PinMode(Local_u8_Led_Number,OUTPUT);		
    14dc:	61 e0       	ldi	r22, 0x01	; 1
    14de:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
    14e2:	08 95       	ret

000014e4 <H_Led_On>:
}

void	H_Led_On(u8 Local_u8_Led_Number)
{
	M_Dio_PinWrite(Local_u8_Led_Number,HIGH);
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    14ea:	08 95       	ret

000014ec <H_Led_Off>:
}

void H_Led_Off(u8 Local_u8_Led_Number)
{
	M_Dio_PinWrite(Local_u8_Led_Number,LOW);
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_Dio_PinWrite>
    14f2:	08 95       	ret

000014f4 <H_Lm35_Init>:

#include "Lm35.h"

void H_Lm35_Init				(void)
{
	M_Adc_Init();
    14f4:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <M_Adc_Init>
    14f8:	08 95       	ret

000014fa <H_Lm35_Read>:
}
u16  H_Lm35_Read				(void)
{
	u16 Local_u16_ADCReading	=	M_Adc_Read();
    14fa:	0e 94 02 0b 	call	0x1604	; 0x1604 <M_Adc_Read>
	u16 Local_u16_Temp			=	(((u32)Local_u16_ADCReading * 500)/1023);
    14fe:	9c 01       	movw	r18, r24
    1500:	a4 ef       	ldi	r26, 0xF4	; 244
    1502:	b1 e0       	ldi	r27, 0x01	; 1
    1504:	0e 94 b8 10 	call	0x2170	; 0x2170 <__umulhisi3>
    1508:	2f ef       	ldi	r18, 0xFF	; 255
    150a:	33 e0       	ldi	r19, 0x03	; 3
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	50 e0       	ldi	r21, 0x00	; 0
    1510:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__udivmodsi4>
	return Local_u16_Temp;
    1514:	c9 01       	movw	r24, r18
    1516:	08 95       	ret

00001518 <H_PushButton_Init>:

#include "PushButton.h"

void H_PushButton_Init(u8 Local_u8_Push_Button_Number)
{
	switch(Local_u8_Push_Button_Number)
    1518:	82 30       	cpi	r24, 0x02	; 2
    151a:	49 f0       	breq	.+18     	; 0x152e <H_PushButton_Init+0x16>
    151c:	83 30       	cpi	r24, 0x03	; 3
    151e:	61 f0       	breq	.+24     	; 0x1538 <H_PushButton_Init+0x20>
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	71 f4       	brne	.+28     	; 0x1540 <H_PushButton_Init+0x28>
	{
		case PUSH_BUTTON_0: M_Dio_PinMode(PUSH_BUTTON_0_PIN,INPUT);		break;
    1524:	60 e0       	ldi	r22, 0x00	; 0
    1526:	8a e2       	ldi	r24, 0x2A	; 42
    1528:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
    152c:	08 95       	ret
		case PUSH_BUTTON_1: M_Dio_PinMode(PUSH_BUTTON_1_PIN,INPUT);		break;
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8a e2       	ldi	r24, 0x2A	; 42
    1532:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
    1536:	08 95       	ret
		case PUSH_BUTTON_2: M_Dio_PinMode(PUSH_BUTTON_2_PIN,INPUT);		break;
    1538:	60 e0       	ldi	r22, 0x00	; 0
    153a:	8a e2       	ldi	r24, 0x2A	; 42
    153c:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
    1540:	08 95       	ret

00001542 <H_PushButton_Read>:
	}
}
u8	H_PushButton_Read(u8 Local_u8_Push_Button_Number)
{
	u8 Local_u8_Push_Button_Value = 0;
	switch(Local_u8_Push_Button_Number)
    1542:	82 30       	cpi	r24, 0x02	; 2
    1544:	39 f0       	breq	.+14     	; 0x1554 <H_PushButton_Read+0x12>
    1546:	83 30       	cpi	r24, 0x03	; 3
    1548:	49 f0       	breq	.+18     	; 0x155c <H_PushButton_Read+0x1a>
    154a:	81 30       	cpi	r24, 0x01	; 1
    154c:	59 f4       	brne	.+22     	; 0x1564 <H_PushButton_Read+0x22>
	{
		case PUSH_BUTTON_0: Local_u8_Push_Button_Value = M_Dio_PinRead(PUSH_BUTTON_0);  /*if( M_Dio_PinRead(PUSH_BUTTON_0_PIN) == PRESSED ) { _delay_ms(80); if( M_Dio_PinRead(PUSH_BUTTON_0_PIN) == PRESSED ) {while(M_Dio_PinRead(PUSH_BUTTON_0 == PRESSED));Local_u8_Push_Button_Value = PRESSED;}else Local_u8_Push_Button_Value = RELEASED;} else Local_u8_Push_Button_Value = RELEASED;*/break;
    154e:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1552:	08 95       	ret
		case PUSH_BUTTON_1: Local_u8_Push_Button_Value = M_Dio_PinRead(PUSH_BUTTON_1);  /*if( M_Dio_PinRead(PUSH_BUTTON_1_PIN) == PRESSED ) { _delay_ms(80); if( M_Dio_PinRead(PUSH_BUTTON_1_PIN) == PRESSED ) {while(M_Dio_PinRead(PUSH_BUTTON_1 == PRESSED));Local_u8_Push_Button_Value = PRESSED;}else Local_u8_Push_Button_Value = RELEASED;} else Local_u8_Push_Button_Value = RELEASED;*/break;
    1554:	82 e0       	ldi	r24, 0x02	; 2
    1556:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    155a:	08 95       	ret
		case PUSH_BUTTON_2: Local_u8_Push_Button_Value = M_Dio_PinRead(PUSH_BUTTON_2); /*if( M_Dio_PinRead(PUSH_BUTTON_2_PIN) == PRESSED ) { _delay_ms(80); if( M_Dio_PinRead(PUSH_BUTTON_2_PIN) == PRESSED ) {while(M_Dio_PinRead(PUSH_BUTTON_2 == PRESSED));Local_u8_Push_Button_Value = PRESSED;}else Local_u8_Push_Button_Value = RELEASED;} else Local_u8_Push_Button_Value = RELEASED;*/break;
    155c:	83 e0       	ldi	r24, 0x03	; 3
    155e:	0e 94 21 0c 	call	0x1842	; 0x1842 <M_Dio_PinRead>
    1562:	08 95       	ret
		default:														break;
	}
}
u8	H_PushButton_Read(u8 Local_u8_Push_Button_Number)
{
	u8 Local_u8_Push_Button_Value = 0;
    1564:	80 e0       	ldi	r24, 0x00	; 0
		default:														break;
	}
	
	
	return Local_u8_Push_Button_Value ;
}
    1566:	08 95       	ret

00001568 <H_Servo_Init>:
	so I initialized an output pwm signal with frequency 50 hz
*/
void H_Servo_Init		(void)
{
	/*To Set Control Pin as Output*/
	M_Dio_PinMode(SERVO_OUTPUT_PIN, OUTPUT);
    1568:	61 e0       	ldi	r22, 0x01	; 1
    156a:	8d e2       	ldi	r24, 0x2D	; 45
    156c:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	
	/*To initialize PWM*/
	M_Pwm1_Init();
    1570:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <M_Pwm1_Init>
		
	/*To set working Frequency*/
	M_Pwm1_SetFrequency(50);
    1574:	82 e3       	ldi	r24, 0x32	; 50
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <M_Pwm1_SetFrequency>
    157c:	08 95       	ret

0000157e <H_Servo_SetAngel>:
/*To set desired angel for the servo step, Servo usually works from 5% to 10% duty cycle so I mapped 0-180 degrees to 5%-10% */
void H_Servo_SetAngel	(f32 Local_f32_DesiredAngel)
{
	/*scaling from 180 degrees to 5 to 10 Percents*/
 	
	Local_f32_DesiredAngel *= 5;
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	40 ea       	ldi	r20, 0xA0	; 160
    1584:	50 e4       	ldi	r21, 0x40	; 64
    1586:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
 	Local_f32_DesiredAngel /= 180;
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	44 e3       	ldi	r20, 0x34	; 52
    1590:	53 e4       	ldi	r21, 0x43	; 67
    1592:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__divsf3>
	Local_f32_DesiredAngel += 5;
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 ea       	ldi	r20, 0xA0	; 160
    159c:	50 e4       	ldi	r21, 0x40	; 64
    159e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <__addsf3>
	 
	/*to set PWM Duty Cycle*/
 	M_Pwm1_SetDutyCycle(Local_f32_DesiredAngel);
    15a2:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <M_Pwm1_SetDutyCycle>
	 
	/*To start the clock*/
 	M_Pwm1_Start();
    15a6:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <M_Pwm1_Start>
    15aa:	08 95       	ret

000015ac <M_Adc_Init>:
void (* Adc_void_CallBack) (void);

void M_Adc_Init (void)
{
	
	M_Dio_PinMode(PA1, INPUT);
    15ac:	60 e0       	ldi	r22, 0x00	; 0
    15ae:	8b e0       	ldi	r24, 0x0B	; 11
    15b0:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
	/* Step 1	->		Set Voltage Reference  */
	#if			VOLTAGE_REFERENCE		==		AREF
	ClrBit(ADMUX,REF0);
	ClrBit(ADMUX,REF1);
	#elif		VOLTAGE_REFERENCE		==		AVCC
	SetBit(ADMUX,REF0);
    15b4:	87 b1       	in	r24, 0x07	; 7
    15b6:	80 64       	ori	r24, 0x40	; 64
    15b8:	87 b9       	out	0x07, r24	; 7
	ClrBit(ADMUX,REF1);
    15ba:	87 b1       	in	r24, 0x07	; 7
    15bc:	8f 77       	andi	r24, 0x7F	; 127
    15be:	87 b9       	out	0x07, r24	; 7
	SetBit(ADMUX,REF1);
	#endif
	
	/* Step 2	->		Set Left Adjust Result  */
	#if			LEFT_ADJUST_RESULT		==		RIGHT_ADJUST
	ClrBit(ADMUX,ADLAR);
    15c0:	87 b1       	in	r24, 0x07	; 7
    15c2:	8f 7d       	andi	r24, 0xDF	; 223
    15c4:	87 b9       	out	0x07, r24	; 7
	#elif		LEFT_ADJUST_RESULT		==		LEFT_ADJUST
	SetBit(ADMUX,ADLAR);
	#endif				
	
	/* Step 3	->		Set Pin Used  */
	ClrBit(ADMUX,MUX4); ClrBit(ADMUX,MUX3); ClrBit(ADMUX,MUX2); ClrBit(ADMUX,MUX1); ClrBit(ADMUX,MUX0);
    15c6:	87 b1       	in	r24, 0x07	; 7
    15c8:	8f 7e       	andi	r24, 0xEF	; 239
    15ca:	87 b9       	out	0x07, r24	; 7
    15cc:	87 b1       	in	r24, 0x07	; 7
    15ce:	87 7f       	andi	r24, 0xF7	; 247
    15d0:	87 b9       	out	0x07, r24	; 7
    15d2:	87 b1       	in	r24, 0x07	; 7
    15d4:	8b 7f       	andi	r24, 0xFB	; 251
    15d6:	87 b9       	out	0x07, r24	; 7
    15d8:	87 b1       	in	r24, 0x07	; 7
    15da:	8d 7f       	andi	r24, 0xFD	; 253
    15dc:	87 b9       	out	0x07, r24	; 7
    15de:	87 b1       	in	r24, 0x07	; 7
    15e0:	8e 7f       	andi	r24, 0xFE	; 254
    15e2:	87 b9       	out	0x07, r24	; 7
	
	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_64	
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	ClrBit(ADCSRA,ADPS0);

	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_128
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	SetBit(ADCSRA,ADPS0);
    15e4:	86 b1       	in	r24, 0x06	; 6
    15e6:	84 60       	ori	r24, 0x04	; 4
    15e8:	86 b9       	out	0x06, r24	; 6
    15ea:	86 b1       	in	r24, 0x06	; 6
    15ec:	82 60       	ori	r24, 0x02	; 2
    15ee:	86 b9       	out	0x06, r24	; 6
    15f0:	86 b1       	in	r24, 0x06	; 6
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	86 b9       	out	0x06, r24	; 6
	#endif



	/* Step 5	->		set ADC Enable */
	SetBit(ADCSRA,ADEN);
    15f6:	86 b1       	in	r24, 0x06	; 6
    15f8:	80 68       	ori	r24, 0x80	; 128
    15fa:	86 b9       	out	0x06, r24	; 6
	
	SetBit(ADCSRA,ADATE);
    15fc:	86 b1       	in	r24, 0x06	; 6
    15fe:	80 62       	ori	r24, 0x20	; 32
    1600:	86 b9       	out	0x06, r24	; 6
    1602:	08 95       	ret

00001604 <M_Adc_Read>:
}

u16 M_Adc_Read(void)
{
	u16 Local_u16_Data = 0;
	SetBit(ADCSRA,ADSC);
    1604:	86 b1       	in	r24, 0x06	; 6
    1606:	80 64       	ori	r24, 0x40	; 64
    1608:	86 b9       	out	0x06, r24	; 6
	while(GetBit(ADCSRA,ADIF) == 0);
    160a:	34 9b       	sbis	0x06, 4	; 6
    160c:	fe cf       	rjmp	.-4      	; 0x160a <M_Adc_Read+0x6>
	
	Local_u16_Data = (ADCL + (ADCH<<8));
    160e:	24 b1       	in	r18, 0x04	; 4
    1610:	85 b1       	in	r24, 0x05	; 5
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	98 2f       	mov	r25, r24
    1616:	88 27       	eor	r24, r24
	
	//Local_u16_Data = ADCH;
	//ClrBit(ADCSRA,ADIF);
		
	return Local_u16_Data;
}
    1618:	82 0f       	add	r24, r18
    161a:	91 1d       	adc	r25, r1
    161c:	08 95       	ret

0000161e <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin);		break;
		case 2: TogBit(PORTB,Local_u8_Pin);		break;
		case 3: TogBit(PORTC,Local_u8_Pin);		break;
		case 4: TogBit(PORTD,Local_u8_Pin);		break;
    161e:	9d ec       	ldi	r25, 0xCD	; 205
    1620:	89 9f       	mul	r24, r25
    1622:	91 2d       	mov	r25, r1
    1624:	11 24       	eor	r1, r1
    1626:	29 2f       	mov	r18, r25
    1628:	26 95       	lsr	r18
    162a:	26 95       	lsr	r18
    162c:	26 95       	lsr	r18
    162e:	22 0f       	add	r18, r18
    1630:	32 2f       	mov	r19, r18
    1632:	33 0f       	add	r19, r19
    1634:	33 0f       	add	r19, r19
    1636:	23 0f       	add	r18, r19
    1638:	82 1b       	sub	r24, r18
    163a:	28 2f       	mov	r18, r24
    163c:	96 95       	lsr	r25
    163e:	96 95       	lsr	r25
    1640:	96 95       	lsr	r25
    1642:	66 23       	and	r22, r22
    1644:	19 f0       	breq	.+6      	; 0x164c <M_Dio_PinMode+0x2e>
    1646:	61 30       	cpi	r22, 0x01	; 1
    1648:	e1 f1       	breq	.+120    	; 0x16c2 <M_Dio_PinMode+0xa4>
    164a:	08 95       	ret
    164c:	92 30       	cpi	r25, 0x02	; 2
    164e:	a9 f0       	breq	.+42     	; 0x167a <M_Dio_PinMode+0x5c>
    1650:	18 f4       	brcc	.+6      	; 0x1658 <M_Dio_PinMode+0x3a>
    1652:	91 30       	cpi	r25, 0x01	; 1
    1654:	31 f0       	breq	.+12     	; 0x1662 <M_Dio_PinMode+0x44>
    1656:	08 95       	ret
    1658:	93 30       	cpi	r25, 0x03	; 3
    165a:	d9 f0       	breq	.+54     	; 0x1692 <M_Dio_PinMode+0x74>
    165c:	94 30       	cpi	r25, 0x04	; 4
    165e:	29 f1       	breq	.+74     	; 0x16aa <M_Dio_PinMode+0x8c>
    1660:	08 95       	ret
    1662:	3a b3       	in	r19, 0x1a	; 26
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	02 c0       	rjmp	.+4      	; 0x166e <M_Dio_PinMode+0x50>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	2a 95       	dec	r18
    1670:	e2 f7       	brpl	.-8      	; 0x166a <M_Dio_PinMode+0x4c>
    1672:	80 95       	com	r24
    1674:	83 23       	and	r24, r19
    1676:	8a bb       	out	0x1a, r24	; 26
    1678:	08 95       	ret
    167a:	37 b3       	in	r19, 0x17	; 23
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	02 c0       	rjmp	.+4      	; 0x1686 <M_Dio_PinMode+0x68>
    1682:	88 0f       	add	r24, r24
    1684:	99 1f       	adc	r25, r25
    1686:	2a 95       	dec	r18
    1688:	e2 f7       	brpl	.-8      	; 0x1682 <M_Dio_PinMode+0x64>
    168a:	80 95       	com	r24
    168c:	83 23       	and	r24, r19
    168e:	87 bb       	out	0x17, r24	; 23
    1690:	08 95       	ret
    1692:	34 b3       	in	r19, 0x14	; 20
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <M_Dio_PinMode+0x80>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	2a 95       	dec	r18
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <M_Dio_PinMode+0x7c>
    16a2:	80 95       	com	r24
    16a4:	83 23       	and	r24, r19
    16a6:	84 bb       	out	0x14, r24	; 20
    16a8:	08 95       	ret
    16aa:	31 b3       	in	r19, 0x11	; 17
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <M_Dio_PinMode+0x98>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	2a 95       	dec	r18
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <M_Dio_PinMode+0x94>
    16ba:	80 95       	com	r24
    16bc:	83 23       	and	r24, r19
    16be:	81 bb       	out	0x11, r24	; 17
    16c0:	08 95       	ret
    16c2:	92 30       	cpi	r25, 0x02	; 2
    16c4:	a1 f0       	breq	.+40     	; 0x16ee <M_Dio_PinMode+0xd0>
    16c6:	18 f4       	brcc	.+6      	; 0x16ce <M_Dio_PinMode+0xb0>
    16c8:	91 30       	cpi	r25, 0x01	; 1
    16ca:	31 f0       	breq	.+12     	; 0x16d8 <M_Dio_PinMode+0xba>
    16cc:	08 95       	ret
    16ce:	93 30       	cpi	r25, 0x03	; 3
    16d0:	c9 f0       	breq	.+50     	; 0x1704 <M_Dio_PinMode+0xe6>
    16d2:	94 30       	cpi	r25, 0x04	; 4
    16d4:	11 f1       	breq	.+68     	; 0x171a <M_Dio_PinMode+0xfc>
    16d6:	08 95       	ret
    16d8:	3a b3       	in	r19, 0x1a	; 26
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <M_Dio_PinMode+0xc6>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	2a 95       	dec	r18
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <M_Dio_PinMode+0xc2>
    16e8:	83 2b       	or	r24, r19
    16ea:	8a bb       	out	0x1a, r24	; 26
    16ec:	08 95       	ret
    16ee:	37 b3       	in	r19, 0x17	; 23
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <M_Dio_PinMode+0xdc>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	2a 95       	dec	r18
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <M_Dio_PinMode+0xd8>
    16fe:	83 2b       	or	r24, r19
    1700:	87 bb       	out	0x17, r24	; 23
    1702:	08 95       	ret
    1704:	34 b3       	in	r19, 0x14	; 20
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <M_Dio_PinMode+0xf2>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	2a 95       	dec	r18
    1712:	e2 f7       	brpl	.-8      	; 0x170c <M_Dio_PinMode+0xee>
    1714:	83 2b       	or	r24, r19
    1716:	84 bb       	out	0x14, r24	; 20
    1718:	08 95       	ret
    171a:	31 b3       	in	r19, 0x11	; 17
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <M_Dio_PinMode+0x108>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	2a 95       	dec	r18
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <M_Dio_PinMode+0x104>
    172a:	83 2b       	or	r24, r19
    172c:	81 bb       	out	0x11, r24	; 17
    172e:	08 95       	ret

00001730 <M_Dio_PinWrite>:
    1730:	9d ec       	ldi	r25, 0xCD	; 205
    1732:	89 9f       	mul	r24, r25
    1734:	91 2d       	mov	r25, r1
    1736:	11 24       	eor	r1, r1
    1738:	29 2f       	mov	r18, r25
    173a:	26 95       	lsr	r18
    173c:	26 95       	lsr	r18
    173e:	26 95       	lsr	r18
    1740:	22 0f       	add	r18, r18
    1742:	32 2f       	mov	r19, r18
    1744:	33 0f       	add	r19, r19
    1746:	33 0f       	add	r19, r19
    1748:	23 0f       	add	r18, r19
    174a:	82 1b       	sub	r24, r18
    174c:	28 2f       	mov	r18, r24
    174e:	96 95       	lsr	r25
    1750:	96 95       	lsr	r25
    1752:	96 95       	lsr	r25
    1754:	66 23       	and	r22, r22
    1756:	19 f0       	breq	.+6      	; 0x175e <M_Dio_PinWrite+0x2e>
    1758:	61 30       	cpi	r22, 0x01	; 1
    175a:	e1 f1       	breq	.+120    	; 0x17d4 <M_Dio_PinWrite+0xa4>
    175c:	08 95       	ret
    175e:	92 30       	cpi	r25, 0x02	; 2
    1760:	a9 f0       	breq	.+42     	; 0x178c <M_Dio_PinWrite+0x5c>
    1762:	18 f4       	brcc	.+6      	; 0x176a <M_Dio_PinWrite+0x3a>
    1764:	91 30       	cpi	r25, 0x01	; 1
    1766:	31 f0       	breq	.+12     	; 0x1774 <M_Dio_PinWrite+0x44>
    1768:	08 95       	ret
    176a:	93 30       	cpi	r25, 0x03	; 3
    176c:	d9 f0       	breq	.+54     	; 0x17a4 <M_Dio_PinWrite+0x74>
    176e:	94 30       	cpi	r25, 0x04	; 4
    1770:	29 f1       	breq	.+74     	; 0x17bc <M_Dio_PinWrite+0x8c>
    1772:	08 95       	ret
    1774:	3b b3       	in	r19, 0x1b	; 27
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <M_Dio_PinWrite+0x50>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	2a 95       	dec	r18
    1782:	e2 f7       	brpl	.-8      	; 0x177c <M_Dio_PinWrite+0x4c>
    1784:	80 95       	com	r24
    1786:	83 23       	and	r24, r19
    1788:	8b bb       	out	0x1b, r24	; 27
    178a:	08 95       	ret
    178c:	38 b3       	in	r19, 0x18	; 24
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <M_Dio_PinWrite+0x68>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	2a 95       	dec	r18
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <M_Dio_PinWrite+0x64>
    179c:	80 95       	com	r24
    179e:	83 23       	and	r24, r19
    17a0:	88 bb       	out	0x18, r24	; 24
    17a2:	08 95       	ret
    17a4:	35 b3       	in	r19, 0x15	; 21
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <M_Dio_PinWrite+0x80>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	2a 95       	dec	r18
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <M_Dio_PinWrite+0x7c>
    17b4:	80 95       	com	r24
    17b6:	83 23       	and	r24, r19
    17b8:	85 bb       	out	0x15, r24	; 21
    17ba:	08 95       	ret
    17bc:	32 b3       	in	r19, 0x12	; 18
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <M_Dio_PinWrite+0x98>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	2a 95       	dec	r18
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <M_Dio_PinWrite+0x94>
    17cc:	80 95       	com	r24
    17ce:	83 23       	and	r24, r19
    17d0:	82 bb       	out	0x12, r24	; 18
    17d2:	08 95       	ret
    17d4:	92 30       	cpi	r25, 0x02	; 2
    17d6:	a1 f0       	breq	.+40     	; 0x1800 <M_Dio_PinWrite+0xd0>
    17d8:	18 f4       	brcc	.+6      	; 0x17e0 <M_Dio_PinWrite+0xb0>
    17da:	91 30       	cpi	r25, 0x01	; 1
    17dc:	31 f0       	breq	.+12     	; 0x17ea <M_Dio_PinWrite+0xba>
    17de:	08 95       	ret
    17e0:	93 30       	cpi	r25, 0x03	; 3
    17e2:	c9 f0       	breq	.+50     	; 0x1816 <M_Dio_PinWrite+0xe6>
    17e4:	94 30       	cpi	r25, 0x04	; 4
    17e6:	11 f1       	breq	.+68     	; 0x182c <M_Dio_PinWrite+0xfc>
    17e8:	08 95       	ret
    17ea:	3b b3       	in	r19, 0x1b	; 27
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <M_Dio_PinWrite+0xc6>
    17f2:	88 0f       	add	r24, r24
    17f4:	99 1f       	adc	r25, r25
    17f6:	2a 95       	dec	r18
    17f8:	e2 f7       	brpl	.-8      	; 0x17f2 <M_Dio_PinWrite+0xc2>
    17fa:	83 2b       	or	r24, r19
    17fc:	8b bb       	out	0x1b, r24	; 27
    17fe:	08 95       	ret
    1800:	38 b3       	in	r19, 0x18	; 24
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 c0       	rjmp	.+4      	; 0x180c <M_Dio_PinWrite+0xdc>
    1808:	88 0f       	add	r24, r24
    180a:	99 1f       	adc	r25, r25
    180c:	2a 95       	dec	r18
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <M_Dio_PinWrite+0xd8>
    1810:	83 2b       	or	r24, r19
    1812:	88 bb       	out	0x18, r24	; 24
    1814:	08 95       	ret
    1816:	35 b3       	in	r19, 0x15	; 21
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <M_Dio_PinWrite+0xf2>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	2a 95       	dec	r18
    1824:	e2 f7       	brpl	.-8      	; 0x181e <M_Dio_PinWrite+0xee>
    1826:	83 2b       	or	r24, r19
    1828:	85 bb       	out	0x15, r24	; 21
    182a:	08 95       	ret
    182c:	32 b3       	in	r19, 0x12	; 18
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <M_Dio_PinWrite+0x108>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	2a 95       	dec	r18
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <M_Dio_PinWrite+0x104>
    183c:	83 2b       	or	r24, r19
    183e:	82 bb       	out	0x12, r24	; 18
    1840:	08 95       	ret

00001842 <M_Dio_PinRead>:
	
}

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
    1842:	9d ec       	ldi	r25, 0xCD	; 205
    1844:	89 9f       	mul	r24, r25
    1846:	91 2d       	mov	r25, r1
    1848:	11 24       	eor	r1, r1
    184a:	29 2f       	mov	r18, r25
    184c:	26 95       	lsr	r18
    184e:	26 95       	lsr	r18
    1850:	26 95       	lsr	r18
    1852:	22 0f       	add	r18, r18
    1854:	32 2f       	mov	r19, r18
    1856:	33 0f       	add	r19, r19
    1858:	33 0f       	add	r19, r19
    185a:	23 0f       	add	r18, r19
    185c:	82 1b       	sub	r24, r18
    185e:	28 2f       	mov	r18, r24
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
    1860:	89 2f       	mov	r24, r25
    1862:	86 95       	lsr	r24
    1864:	86 95       	lsr	r24
    1866:	86 95       	lsr	r24
	u8 Local_u8_Pin_Value	=	0;
	
	switch(Local_u8_Port)
    1868:	82 30       	cpi	r24, 0x02	; 2
    186a:	91 f0       	breq	.+36     	; 0x1890 <M_Dio_PinRead+0x4e>
    186c:	18 f4       	brcc	.+6      	; 0x1874 <M_Dio_PinRead+0x32>
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	31 f0       	breq	.+12     	; 0x187e <M_Dio_PinRead+0x3c>
    1872:	29 c0       	rjmp	.+82     	; 0x18c6 <M_Dio_PinRead+0x84>
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	a9 f0       	breq	.+42     	; 0x18a2 <M_Dio_PinRead+0x60>
    1878:	84 30       	cpi	r24, 0x04	; 4
    187a:	e1 f0       	breq	.+56     	; 0x18b4 <M_Dio_PinRead+0x72>
    187c:	24 c0       	rjmp	.+72     	; 0x18c6 <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_Pin_Value = GetBit(PINA,Local_u8_Pin);		break;
    187e:	89 b3       	in	r24, 0x19	; 25
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 c0       	rjmp	.+4      	; 0x1888 <M_Dio_PinRead+0x46>
    1884:	95 95       	asr	r25
    1886:	87 95       	ror	r24
    1888:	2a 95       	dec	r18
    188a:	e2 f7       	brpl	.-8      	; 0x1884 <M_Dio_PinRead+0x42>
    188c:	81 70       	andi	r24, 0x01	; 1
    188e:	08 95       	ret
		case 2: Local_u8_Pin_Value = GetBit(PINB,Local_u8_Pin);		break;
    1890:	86 b3       	in	r24, 0x16	; 22
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 c0       	rjmp	.+4      	; 0x189a <M_Dio_PinRead+0x58>
    1896:	95 95       	asr	r25
    1898:	87 95       	ror	r24
    189a:	2a 95       	dec	r18
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <M_Dio_PinRead+0x54>
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	08 95       	ret
		case 3: Local_u8_Pin_Value = GetBit(PINC,Local_u8_Pin);		break;
    18a2:	83 b3       	in	r24, 0x13	; 19
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 c0       	rjmp	.+4      	; 0x18ac <M_Dio_PinRead+0x6a>
    18a8:	95 95       	asr	r25
    18aa:	87 95       	ror	r24
    18ac:	2a 95       	dec	r18
    18ae:	e2 f7       	brpl	.-8      	; 0x18a8 <M_Dio_PinRead+0x66>
    18b0:	81 70       	andi	r24, 0x01	; 1
    18b2:	08 95       	ret
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
    18b4:	80 b3       	in	r24, 0x10	; 16
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <M_Dio_PinRead+0x7c>
    18ba:	95 95       	asr	r25
    18bc:	87 95       	ror	r24
    18be:	2a 95       	dec	r18
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <M_Dio_PinRead+0x78>
    18c2:	81 70       	andi	r24, 0x01	; 1
    18c4:	08 95       	ret

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
	u8 Local_u8_Pin_Value	=	0;
    18c6:	80 e0       	ldi	r24, 0x00	; 0
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
		default:								break;
	}
	
	return Local_u8_Pin_Value;
}
    18c8:	08 95       	ret

000018ca <M_Dio_PinPullUp>:

void M_Dio_PinPullUp	(u8 Local_u8_PinNumber, u8 Local_u8_PullUpState)
{
	u8 Local_u8_Pin		=	Local_u8_PinNumber % 10;
    18ca:	9d ec       	ldi	r25, 0xCD	; 205
    18cc:	89 9f       	mul	r24, r25
    18ce:	91 2d       	mov	r25, r1
    18d0:	11 24       	eor	r1, r1
    18d2:	29 2f       	mov	r18, r25
    18d4:	26 95       	lsr	r18
    18d6:	26 95       	lsr	r18
    18d8:	26 95       	lsr	r18
    18da:	22 0f       	add	r18, r18
    18dc:	32 2f       	mov	r19, r18
    18de:	33 0f       	add	r19, r19
    18e0:	33 0f       	add	r19, r19
    18e2:	23 0f       	add	r18, r19
    18e4:	82 1b       	sub	r24, r18
    18e6:	28 2f       	mov	r18, r24
	u8 Local_u8_Port	=	Local_u8_PinNumber / 10;
    18e8:	96 95       	lsr	r25
    18ea:	96 95       	lsr	r25
    18ec:	96 95       	lsr	r25
	switch(Local_u8_PullUpState)
    18ee:	66 23       	and	r22, r22
    18f0:	f1 f1       	breq	.+124    	; 0x196e <M_Dio_PinPullUp+0xa4>
    18f2:	61 30       	cpi	r22, 0x01	; 1
    18f4:	09 f0       	breq	.+2      	; 0x18f8 <M_Dio_PinPullUp+0x2e>
    18f6:	71 c0       	rjmp	.+226    	; 0x19da <M_Dio_PinPullUp+0x110>
	{
		case PULLUP_DISABLE:
		switch(Local_u8_Port)
    18f8:	92 30       	cpi	r25, 0x02	; 2
    18fa:	a9 f0       	breq	.+42     	; 0x1926 <M_Dio_PinPullUp+0x5c>
    18fc:	18 f4       	brcc	.+6      	; 0x1904 <M_Dio_PinPullUp+0x3a>
    18fe:	91 30       	cpi	r25, 0x01	; 1
    1900:	31 f0       	breq	.+12     	; 0x190e <M_Dio_PinPullUp+0x44>
    1902:	08 95       	ret
    1904:	93 30       	cpi	r25, 0x03	; 3
    1906:	d9 f0       	breq	.+54     	; 0x193e <M_Dio_PinPullUp+0x74>
    1908:	94 30       	cpi	r25, 0x04	; 4
    190a:	29 f1       	breq	.+74     	; 0x1956 <M_Dio_PinPullUp+0x8c>
    190c:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin);		break;
    190e:	3b b3       	in	r19, 0x1b	; 27
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	02 c0       	rjmp	.+4      	; 0x191a <M_Dio_PinPullUp+0x50>
    1916:	88 0f       	add	r24, r24
    1918:	99 1f       	adc	r25, r25
    191a:	2a 95       	dec	r18
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <M_Dio_PinPullUp+0x4c>
    191e:	80 95       	com	r24
    1920:	83 23       	and	r24, r19
    1922:	8b bb       	out	0x1b, r24	; 27
    1924:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin);		break;
    1926:	38 b3       	in	r19, 0x18	; 24
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <M_Dio_PinPullUp+0x68>
    192e:	88 0f       	add	r24, r24
    1930:	99 1f       	adc	r25, r25
    1932:	2a 95       	dec	r18
    1934:	e2 f7       	brpl	.-8      	; 0x192e <M_Dio_PinPullUp+0x64>
    1936:	80 95       	com	r24
    1938:	83 23       	and	r24, r19
    193a:	88 bb       	out	0x18, r24	; 24
    193c:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin);		break;
    193e:	35 b3       	in	r19, 0x15	; 21
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	02 c0       	rjmp	.+4      	; 0x194a <M_Dio_PinPullUp+0x80>
    1946:	88 0f       	add	r24, r24
    1948:	99 1f       	adc	r25, r25
    194a:	2a 95       	dec	r18
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <M_Dio_PinPullUp+0x7c>
    194e:	80 95       	com	r24
    1950:	83 23       	and	r24, r19
    1952:	85 bb       	out	0x15, r24	; 21
    1954:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin);		break;
    1956:	32 b3       	in	r19, 0x12	; 18
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <M_Dio_PinPullUp+0x98>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	2a 95       	dec	r18
    1964:	e2 f7       	brpl	.-8      	; 0x195e <M_Dio_PinPullUp+0x94>
    1966:	80 95       	com	r24
    1968:	83 23       	and	r24, r19
    196a:	82 bb       	out	0x12, r24	; 18
    196c:	08 95       	ret
			default:								break;
		}
		break;
		
		case PULLUP_ENABLE:
		switch(Local_u8_Port)
    196e:	92 30       	cpi	r25, 0x02	; 2
    1970:	a1 f0       	breq	.+40     	; 0x199a <M_Dio_PinPullUp+0xd0>
    1972:	18 f4       	brcc	.+6      	; 0x197a <M_Dio_PinPullUp+0xb0>
    1974:	91 30       	cpi	r25, 0x01	; 1
    1976:	31 f0       	breq	.+12     	; 0x1984 <M_Dio_PinPullUp+0xba>
    1978:	08 95       	ret
    197a:	93 30       	cpi	r25, 0x03	; 3
    197c:	c9 f0       	breq	.+50     	; 0x19b0 <M_Dio_PinPullUp+0xe6>
    197e:	94 30       	cpi	r25, 0x04	; 4
    1980:	11 f1       	breq	.+68     	; 0x19c6 <M_Dio_PinPullUp+0xfc>
    1982:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin);		break;
    1984:	3b b3       	in	r19, 0x1b	; 27
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <M_Dio_PinPullUp+0xc6>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	2a 95       	dec	r18
    1992:	e2 f7       	brpl	.-8      	; 0x198c <M_Dio_PinPullUp+0xc2>
    1994:	83 2b       	or	r24, r19
    1996:	8b bb       	out	0x1b, r24	; 27
    1998:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin);		break;
    199a:	38 b3       	in	r19, 0x18	; 24
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <M_Dio_PinPullUp+0xdc>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	2a 95       	dec	r18
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <M_Dio_PinPullUp+0xd8>
    19aa:	83 2b       	or	r24, r19
    19ac:	88 bb       	out	0x18, r24	; 24
    19ae:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin);		break;
    19b0:	35 b3       	in	r19, 0x15	; 21
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 c0       	rjmp	.+4      	; 0x19bc <M_Dio_PinPullUp+0xf2>
    19b8:	88 0f       	add	r24, r24
    19ba:	99 1f       	adc	r25, r25
    19bc:	2a 95       	dec	r18
    19be:	e2 f7       	brpl	.-8      	; 0x19b8 <M_Dio_PinPullUp+0xee>
    19c0:	83 2b       	or	r24, r19
    19c2:	85 bb       	out	0x15, r24	; 21
    19c4:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin);		break;
    19c6:	32 b3       	in	r19, 0x12	; 18
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <M_Dio_PinPullUp+0x108>
    19ce:	88 0f       	add	r24, r24
    19d0:	99 1f       	adc	r25, r25
    19d2:	2a 95       	dec	r18
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <M_Dio_PinPullUp+0x104>
    19d6:	83 2b       	or	r24, r19
    19d8:	82 bb       	out	0x12, r24	; 18
    19da:	08 95       	ret

000019dc <M_ExtInt_Init>:

void M_ExtInt_Init (u8 Local_u8_IntNumber)
{
	
	/* Step 1	->		Choose Sense Control */
	switch(Local_u8_IntNumber)
    19dc:	86 30       	cpi	r24, 0x06	; 6
    19de:	29 f0       	breq	.+10     	; 0x19ea <M_ExtInt_Init+0xe>
    19e0:	87 30       	cpi	r24, 0x07	; 7
    19e2:	51 f0       	breq	.+20     	; 0x19f8 <M_ExtInt_Init+0x1c>
    19e4:	85 30       	cpi	r24, 0x05	; 5
    19e6:	91 f4       	brne	.+36     	; 0x1a0c <M_ExtInt_Init+0x30>
    19e8:	0e c0       	rjmp	.+28     	; 0x1a06 <M_ExtInt_Init+0x2a>
		ClrBit(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		FALLING_EDGE
		ClrBit(MCUCR,ISC00);
		SetBit(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		RISING_EDGE
		SetBit(MCUCR,ISC00);
    19ea:	95 b7       	in	r25, 0x35	; 53
    19ec:	91 60       	ori	r25, 0x01	; 1
    19ee:	95 bf       	out	0x35, r25	; 53
		SetBit(MCUCR,ISC01);
    19f0:	95 b7       	in	r25, 0x35	; 53
    19f2:	92 60       	ori	r25, 0x02	; 2
    19f4:	95 bf       	out	0x35, r25	; 53
		#endif
		break;
    19f6:	0a c0       	rjmp	.+20     	; 0x1a0c <M_ExtInt_Init+0x30>
		ClrBit(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		FALLING_EDGE
		ClrBit(MCUCR,ISC10);
		SetBit(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		RISING_EDGE
		SetBit(MCUCR,ISC10);
    19f8:	95 b7       	in	r25, 0x35	; 53
    19fa:	94 60       	ori	r25, 0x04	; 4
    19fc:	95 bf       	out	0x35, r25	; 53
		SetBit(MCUCR,ISC11);
    19fe:	95 b7       	in	r25, 0x35	; 53
    1a00:	98 60       	ori	r25, 0x08	; 8
    1a02:	95 bf       	out	0x35, r25	; 53
		#endif
		break;
    1a04:	03 c0       	rjmp	.+6      	; 0x1a0c <M_ExtInt_Init+0x30>
		
		case INT2:
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		ClrBit(MCUCR,ISC2);
		#elif		SENSE_CONTROL_2		==		RISING_EDGE
		SetBit(MCUCSR,ISC2);
    1a06:	94 b7       	in	r25, 0x34	; 52
    1a08:	90 64       	ori	r25, 0x40	; 64
    1a0a:	94 bf       	out	0x34, r25	; 52
		
		default: 
		break;
	}
	/* Step 2	->		Enable Peripheral Interrupt */
	switch(Local_u8_IntNumber)
    1a0c:	86 30       	cpi	r24, 0x06	; 6
    1a0e:	29 f0       	breq	.+10     	; 0x1a1a <M_ExtInt_Init+0x3e>
    1a10:	87 30       	cpi	r24, 0x07	; 7
    1a12:	39 f0       	breq	.+14     	; 0x1a22 <M_ExtInt_Init+0x46>
    1a14:	85 30       	cpi	r24, 0x05	; 5
    1a16:	61 f4       	brne	.+24     	; 0x1a30 <M_ExtInt_Init+0x54>
    1a18:	08 c0       	rjmp	.+16     	; 0x1a2a <M_ExtInt_Init+0x4e>
	{
		case INT0:	SetBit(GICR,INT0);		break;
    1a1a:	8b b7       	in	r24, 0x3b	; 59
    1a1c:	80 64       	ori	r24, 0x40	; 64
    1a1e:	8b bf       	out	0x3b, r24	; 59
    1a20:	07 c0       	rjmp	.+14     	; 0x1a30 <M_ExtInt_Init+0x54>
		case INT1:	SetBit(GICR,INT1);		break;
    1a22:	8b b7       	in	r24, 0x3b	; 59
    1a24:	80 68       	ori	r24, 0x80	; 128
    1a26:	8b bf       	out	0x3b, r24	; 59
    1a28:	03 c0       	rjmp	.+6      	; 0x1a30 <M_ExtInt_Init+0x54>
		case INT2:	SetBit(GICR,INT2);		break;
    1a2a:	8b b7       	in	r24, 0x3b	; 59
    1a2c:	80 62       	ori	r24, 0x20	; 32
    1a2e:	8b bf       	out	0x3b, r24	; 59
		default:							break;		
	}
	
	
	/* Step 3	->		Enable Global Interrupt */
	SetBit(SREG,Ibit);
    1a30:	8f b7       	in	r24, 0x3f	; 63
    1a32:	80 68       	ori	r24, 0x80	; 128
    1a34:	8f bf       	out	0x3f, r24	; 63
    1a36:	08 95       	ret

00001a38 <M_ExtInt_SetCallBackInt0>:
}

void M_ExtInt_SetCallBackInt0 (void (*Local_void_ptr) (void))
{
	ExtInt_void_CallBackInt0 = Local_void_ptr;
    1a38:	90 93 16 02 	sts	0x0216, r25	; 0x800216 <ExtInt_void_CallBackInt0+0x1>
    1a3c:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <ExtInt_void_CallBackInt0>
    1a40:	08 95       	ret

00001a42 <M_I2c_Init>:
//     SetBit(TWCR,6);					 //   later
// 	SetBit(TWCR,7);                  //   to clear the flag bit
// 	while(GetBit(TWCR,7) == 0);
// 	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
// 	return TWDR;
}
    1a42:	86 b7       	in	r24, 0x36	; 54
    1a44:	8b 7f       	andi	r24, 0xFB	; 251
    1a46:	86 bf       	out	0x36, r24	; 54
    1a48:	8c e0       	ldi	r24, 0x0C	; 12
    1a4a:	80 b9       	out	0x00, r24	; 0
    1a4c:	86 b7       	in	r24, 0x36	; 54
    1a4e:	84 60       	ori	r24, 0x04	; 4
    1a50:	86 bf       	out	0x36, r24	; 54
    1a52:	8f e3       	ldi	r24, 0x3F	; 63
    1a54:	9c e9       	ldi	r25, 0x9C	; 156
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <M_I2c_Init+0x14>
    1a5a:	00 c0       	rjmp	.+0      	; 0x1a5c <M_I2c_Init+0x1a>
    1a5c:	00 00       	nop
    1a5e:	08 95       	ret

00001a60 <M_I2c_StartCondition>:
    1a60:	86 b7       	in	r24, 0x36	; 54
    1a62:	80 62       	ori	r24, 0x20	; 32
    1a64:	86 bf       	out	0x36, r24	; 54
    1a66:	86 b7       	in	r24, 0x36	; 54
    1a68:	80 68       	ori	r24, 0x80	; 128
    1a6a:	86 bf       	out	0x36, r24	; 54
    1a6c:	06 b6       	in	r0, 0x36	; 54
    1a6e:	07 fe       	sbrs	r0, 7
    1a70:	fd cf       	rjmp	.-6      	; 0x1a6c <M_I2c_StartCondition+0xc>
    1a72:	81 b1       	in	r24, 0x01	; 1
    1a74:	88 7f       	andi	r24, 0xF8	; 248
    1a76:	88 30       	cpi	r24, 0x08	; 8
    1a78:	e1 f7       	brne	.-8      	; 0x1a72 <M_I2c_StartCondition+0x12>
    1a7a:	8f e3       	ldi	r24, 0x3F	; 63
    1a7c:	9c e9       	ldi	r25, 0x9C	; 156
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <M_I2c_StartCondition+0x1e>
    1a82:	00 c0       	rjmp	.+0      	; 0x1a84 <M_I2c_StartCondition+0x24>
    1a84:	00 00       	nop
    1a86:	08 95       	ret

00001a88 <M_I2c_SendSlaveAddressWrite>:
    1a88:	88 0f       	add	r24, r24
    1a8a:	83 b9       	out	0x03, r24	; 3
    1a8c:	86 b7       	in	r24, 0x36	; 54
    1a8e:	80 68       	ori	r24, 0x80	; 128
    1a90:	86 bf       	out	0x36, r24	; 54
    1a92:	06 b6       	in	r0, 0x36	; 54
    1a94:	07 fe       	sbrs	r0, 7
    1a96:	fd cf       	rjmp	.-6      	; 0x1a92 <M_I2c_SendSlaveAddressWrite+0xa>
    1a98:	81 b1       	in	r24, 0x01	; 1
    1a9a:	88 7f       	andi	r24, 0xF8	; 248
    1a9c:	88 31       	cpi	r24, 0x18	; 24
    1a9e:	e1 f7       	brne	.-8      	; 0x1a98 <M_I2c_SendSlaveAddressWrite+0x10>
    1aa0:	8f e3       	ldi	r24, 0x3F	; 63
    1aa2:	9c e9       	ldi	r25, 0x9C	; 156
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	f1 f7       	brne	.-4      	; 0x1aa4 <M_I2c_SendSlaveAddressWrite+0x1c>
    1aa8:	00 c0       	rjmp	.+0      	; 0x1aaa <M_I2c_SendSlaveAddressWrite+0x22>
    1aaa:	00 00       	nop
    1aac:	08 95       	ret

00001aae <M_I2c_SendSlaveAddressRead>:
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	81 60       	ori	r24, 0x01	; 1
    1ab6:	83 b9       	out	0x03, r24	; 3
    1ab8:	86 b7       	in	r24, 0x36	; 54
    1aba:	80 68       	ori	r24, 0x80	; 128
    1abc:	86 bf       	out	0x36, r24	; 54
    1abe:	06 b6       	in	r0, 0x36	; 54
    1ac0:	07 fe       	sbrs	r0, 7
    1ac2:	fd cf       	rjmp	.-6      	; 0x1abe <M_I2c_SendSlaveAddressRead+0x10>
    1ac4:	81 b1       	in	r24, 0x01	; 1
    1ac6:	88 7f       	andi	r24, 0xF8	; 248
    1ac8:	80 34       	cpi	r24, 0x40	; 64
    1aca:	e1 f7       	brne	.-8      	; 0x1ac4 <M_I2c_SendSlaveAddressRead+0x16>
    1acc:	8f e3       	ldi	r24, 0x3F	; 63
    1ace:	9c e9       	ldi	r25, 0x9C	; 156
    1ad0:	01 97       	sbiw	r24, 0x01	; 1
    1ad2:	f1 f7       	brne	.-4      	; 0x1ad0 <M_I2c_SendSlaveAddressRead+0x22>
    1ad4:	00 c0       	rjmp	.+0      	; 0x1ad6 <M_I2c_SendSlaveAddressRead+0x28>
    1ad6:	00 00       	nop
    1ad8:	08 95       	ret

00001ada <M_I2c_SendSByte>:
    1ada:	83 b9       	out	0x03, r24	; 3
    1adc:	86 b7       	in	r24, 0x36	; 54
    1ade:	8f 7d       	andi	r24, 0xDF	; 223
    1ae0:	86 bf       	out	0x36, r24	; 54
    1ae2:	86 b7       	in	r24, 0x36	; 54
    1ae4:	80 68       	ori	r24, 0x80	; 128
    1ae6:	86 bf       	out	0x36, r24	; 54
    1ae8:	06 b6       	in	r0, 0x36	; 54
    1aea:	07 fe       	sbrs	r0, 7
    1aec:	fd cf       	rjmp	.-6      	; 0x1ae8 <M_I2c_SendSByte+0xe>
    1aee:	81 b1       	in	r24, 0x01	; 1
    1af0:	88 7f       	andi	r24, 0xF8	; 248
    1af2:	88 32       	cpi	r24, 0x28	; 40
    1af4:	e1 f7       	brne	.-8      	; 0x1aee <M_I2c_SendSByte+0x14>
    1af6:	2f ef       	ldi	r18, 0xFF	; 255
    1af8:	81 ee       	ldi	r24, 0xE1	; 225
    1afa:	94 e0       	ldi	r25, 0x04	; 4
    1afc:	21 50       	subi	r18, 0x01	; 1
    1afe:	80 40       	sbci	r24, 0x00	; 0
    1b00:	90 40       	sbci	r25, 0x00	; 0
    1b02:	e1 f7       	brne	.-8      	; 0x1afc <M_I2c_SendSByte+0x22>
    1b04:	00 c0       	rjmp	.+0      	; 0x1b06 <M_I2c_SendSByte+0x2c>
    1b06:	00 00       	nop
    1b08:	08 95       	ret

00001b0a <M_I2c_ReadByteNoAck>:
u8 M_I2c_ReadByteNoAck()
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    1b0a:	84 e8       	ldi	r24, 0x84	; 132
    1b0c:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,TWINT) == 0);
    1b0e:	06 b6       	in	r0, 0x36	; 54
    1b10:	07 fe       	sbrs	r0, 7
    1b12:	fd cf       	rjmp	.-6      	; 0x1b0e <M_I2c_ReadByteNoAck+0x4>
	return TWDR;
    1b14:	83 b1       	in	r24, 0x03	; 3
}
    1b16:	08 95       	ret

00001b18 <M_I2c_RepeatedStart>:
void M_I2c_RepeatedStart(void)
{
	SetBit(TWCR,5);
    1b18:	86 b7       	in	r24, 0x36	; 54
    1b1a:	80 62       	ori	r24, 0x20	; 32
    1b1c:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);                  //   to clear the flag bit
    1b1e:	86 b7       	in	r24, 0x36	; 54
    1b20:	80 68       	ori	r24, 0x80	; 128
    1b22:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,7) == 0);
    1b24:	06 b6       	in	r0, 0x36	; 54
    1b26:	07 fe       	sbrs	r0, 7
    1b28:	fd cf       	rjmp	.-6      	; 0x1b24 <M_I2c_RepeatedStart+0xc>
	while((TWSR & 0xF8) != REP_START_ACK);
    1b2a:	81 b1       	in	r24, 0x01	; 1
    1b2c:	88 7f       	andi	r24, 0xF8	; 248
    1b2e:	80 31       	cpi	r24, 0x10	; 16
    1b30:	e1 f7       	brne	.-8      	; 0x1b2a <M_I2c_RepeatedStart+0x12>
}
    1b32:	08 95       	ret

00001b34 <M_I2c_StopCondition>:
//  	SetBit(TWCR,7);                  //   to clear the flag bit
//  	SetBit(TWCR,4);
// // 	SetBit(TWCR,2);	
	//while(GetBit(TWCR,7) == 0);
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	SetBit(TWCR,4);
    1b34:	86 b7       	in	r24, 0x36	; 54
    1b36:	80 61       	ori	r24, 0x10	; 16
    1b38:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);
    1b3a:	86 b7       	in	r24, 0x36	; 54
    1b3c:	80 68       	ori	r24, 0x80	; 128
    1b3e:	86 bf       	out	0x36, r24	; 54
    1b40:	8f e9       	ldi	r24, 0x9F	; 159
    1b42:	9f e0       	ldi	r25, 0x0F	; 15
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <M_I2c_StopCondition+0x10>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <M_I2c_StopCondition+0x16>
    1b4a:	00 00       	nop
    1b4c:	08 95       	ret

00001b4e <M_Pwm1_Init>:
#include "Timer1.h"

void M_Pwm1_Init				(void)
{
	
 	SetBit(DDRD,5);	
    1b4e:	81 b3       	in	r24, 0x11	; 17
    1b50:	80 62       	ori	r24, 0x20	; 32
    1b52:	81 bb       	out	0x11, r24	; 17
 	
 	SetBit(TCCR1A,COM1A1);
    1b54:	8f b5       	in	r24, 0x2f	; 47
    1b56:	80 68       	ori	r24, 0x80	; 128
    1b58:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,COM1A0);
    1b5a:	8f b5       	in	r24, 0x2f	; 47
    1b5c:	8f 7b       	andi	r24, 0xBF	; 191
    1b5e:	8f bd       	out	0x2f, r24	; 47
	
	SetBit(TCCR1B,WGM13);
    1b60:	8e b5       	in	r24, 0x2e	; 46
    1b62:	80 61       	ori	r24, 0x10	; 16
    1b64:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,WGM12);
    1b66:	8e b5       	in	r24, 0x2e	; 46
    1b68:	88 60       	ori	r24, 0x08	; 8
    1b6a:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1A,WGM11);
    1b6c:	8f b5       	in	r24, 0x2f	; 47
    1b6e:	82 60       	ori	r24, 0x02	; 2
    1b70:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,WGM10);
    1b72:	8f b5       	in	r24, 0x2f	; 47
    1b74:	8e 7f       	andi	r24, 0xFE	; 254
    1b76:	8f bd       	out	0x2f, r24	; 47
    1b78:	08 95       	ret

00001b7a <M_Pwm1_SetDutyCycle>:
	

	
}
void M_Pwm1_SetDutyCycle		(f32 Local_f32_DesiredDutyCycle)
{
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ef 92       	push	r14
    1b80:	ff 92       	push	r15
    1b82:	6b 01       	movw	r12, r22
    1b84:	7c 01       	movw	r14, r24
	OCR1A = (((Local_f32_DesiredDutyCycle * ICR1)/100)-1);
    1b86:	66 b5       	in	r22, 0x26	; 38
    1b88:	77 b5       	in	r23, 0x27	; 39
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <__floatunsisf>
    1b92:	a7 01       	movw	r20, r14
    1b94:	96 01       	movw	r18, r12
    1b96:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__mulsf3>
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	48 ec       	ldi	r20, 0xC8	; 200
    1ba0:	52 e4       	ldi	r21, 0x42	; 66
    1ba2:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <__divsf3>
    1ba6:	20 e0       	ldi	r18, 0x00	; 0
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	40 e8       	ldi	r20, 0x80	; 128
    1bac:	5f e3       	ldi	r21, 0x3F	; 63
    1bae:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__subsf3>
    1bb2:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <__fixunssfsi>
    1bb6:	7b bd       	out	0x2b, r23	; 43
    1bb8:	6a bd       	out	0x2a, r22	; 42
}
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	df 90       	pop	r13
    1bc0:	cf 90       	pop	r12
    1bc2:	08 95       	ret

00001bc4 <M_Pwm1_SetFrequency>:
void M_Pwm1_SetFrequency		(u16 Local_u16_DesiredFrequency)
{
	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Local_u16_DesiredFrequency * TIMER1_PRESCALER));
    1bc4:	00 24       	eor	r0, r0
    1bc6:	96 95       	lsr	r25
    1bc8:	87 95       	ror	r24
    1bca:	07 94       	ror	r0
    1bcc:	96 95       	lsr	r25
    1bce:	87 95       	ror	r24
    1bd0:	07 94       	ror	r0
    1bd2:	98 2f       	mov	r25, r24
    1bd4:	80 2d       	mov	r24, r0
    1bd6:	9c 01       	movw	r18, r24
    1bd8:	40 e0       	ldi	r20, 0x00	; 0
    1bda:	50 e0       	ldi	r21, 0x00	; 0
    1bdc:	60 e0       	ldi	r22, 0x00	; 0
    1bde:	74 e2       	ldi	r23, 0x24	; 36
    1be0:	84 ef       	ldi	r24, 0xF4	; 244
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 93 10 	call	0x2126	; 0x2126 <__divmodsi4>
    1be8:	37 bd       	out	0x27, r19	; 39
    1bea:	26 bd       	out	0x26, r18	; 38
    1bec:	08 95       	ret

00001bee <M_Pwm1_Start>:
}
void M_Pwm1_Start				(void)
{
	#if		TIMER1_PRESCALER == PRESCLNG_64
	ClrBit(TCCR1B,CS12);
    1bee:	8e b5       	in	r24, 0x2e	; 46
    1bf0:	8b 7f       	andi	r24, 0xFB	; 251
    1bf2:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS11);
    1bf4:	8e b5       	in	r24, 0x2e	; 46
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS10);
    1bfa:	8e b5       	in	r24, 0x2e	; 46
    1bfc:	81 60       	ori	r24, 0x01	; 1
    1bfe:	8e bd       	out	0x2e, r24	; 46
    1c00:	08 95       	ret

00001c02 <M_Timer2_Start>:
	#elif		TIMER2_PRESCALER	==		PRESCLNG_64		   
	ClrBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_256	   
	SetBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_1024	   
	SetBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
    1c02:	85 b5       	in	r24, 0x25	; 37
    1c04:	84 60       	ori	r24, 0x04	; 4
    1c06:	85 bd       	out	0x25, r24	; 37
    1c08:	85 b5       	in	r24, 0x25	; 37
    1c0a:	82 60       	ori	r24, 0x02	; 2
    1c0c:	85 bd       	out	0x25, r24	; 37
    1c0e:	85 b5       	in	r24, 0x25	; 37
    1c10:	81 60       	ori	r24, 0x01	; 1
    1c12:	85 bd       	out	0x25, r24	; 37
    1c14:	08 95       	ret

00001c16 <M_Timer2_Stop>:
	#endif
}

void M_Timer2_Stop			(void)
{
	ClrBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	ClrBit(TCCR2,CS20);
    1c16:	85 b5       	in	r24, 0x25	; 37
    1c18:	8b 7f       	andi	r24, 0xFB	; 251
    1c1a:	85 bd       	out	0x25, r24	; 37
    1c1c:	85 b5       	in	r24, 0x25	; 37
    1c1e:	8d 7f       	andi	r24, 0xFD	; 253
    1c20:	85 bd       	out	0x25, r24	; 37
    1c22:	85 b5       	in	r24, 0x25	; 37
    1c24:	8e 7f       	andi	r24, 0xFE	; 254
    1c26:	85 bd       	out	0x25, r24	; 37
    1c28:	08 95       	ret

00001c2a <M_Pwm2_Init>:
}


void M_Pwm2_Init				(void)
{
	M_Dio_PinMode(PD7,OUTPUT);
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	8f e2       	ldi	r24, 0x2F	; 47
    1c2e:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>

	#if			PWM2_MODE		==		FAST_PWM
	SetBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
    1c32:	85 b5       	in	r24, 0x25	; 37
    1c34:	88 60       	ori	r24, 0x08	; 8
    1c36:	85 bd       	out	0x25, r24	; 37
    1c38:	85 b5       	in	r24, 0x25	; 37
    1c3a:	80 64       	ori	r24, 0x40	; 64
    1c3c:	85 bd       	out	0x25, r24	; 37
	#elif		PWM2_MODE		==		PHASE_CORRECT
	ClrBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
	#endif
	
	#if			OUTPUT_MODE		==		NON_INVERTED
	SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
    1c3e:	85 b5       	in	r24, 0x25	; 37
    1c40:	80 62       	ori	r24, 0x20	; 32
    1c42:	85 bd       	out	0x25, r24	; 37
    1c44:	85 b5       	in	r24, 0x25	; 37
    1c46:	8f 7e       	andi	r24, 0xEF	; 239
    1c48:	85 bd       	out	0x25, r24	; 37
    1c4a:	08 95       	ret

00001c4c <M_Pwm2_SetDutyCycle>:

void M_Pwm2_SetDutyCycle		(u8 Local_u8_DesiredDutyCycle)
{
	#if			OUTPUT_MODE		==		NON_INVERTED
	
	if(Local_u8_DesiredDutyCycle == 0)
    1c4c:	81 11       	cpse	r24, r1
    1c4e:	0f c0       	rjmp	.+30     	; 0x1c6e <M_Pwm2_SetDutyCycle+0x22>
	{
		SetBit(TCCR2,COM21); SetBit(TCCR2,COM20);
    1c50:	95 b5       	in	r25, 0x25	; 37
    1c52:	90 62       	ori	r25, 0x20	; 32
    1c54:	95 bd       	out	0x25, r25	; 37
    1c56:	95 b5       	in	r25, 0x25	; 37
    1c58:	90 61       	ori	r25, 0x10	; 16
    1c5a:	95 bd       	out	0x25, r25	; 37
		OCR2 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
    1c5c:	98 2f       	mov	r25, r24
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	64 e6       	ldi	r22, 0x64	; 100
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__divmodhi4>
    1c68:	60 95       	com	r22
    1c6a:	63 bd       	out	0x23, r22	; 35
    1c6c:	08 95       	ret
	}
	else
	{
		SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
    1c6e:	95 b5       	in	r25, 0x25	; 37
    1c70:	90 62       	ori	r25, 0x20	; 32
    1c72:	95 bd       	out	0x25, r25	; 37
    1c74:	95 b5       	in	r25, 0x25	; 37
    1c76:	9f 7e       	andi	r25, 0xEF	; 239
    1c78:	95 bd       	out	0x25, r25	; 37
		OCR2 = (((Local_u8_DesiredDutyCycle * 256) / 100) - 1);
    1c7a:	98 2f       	mov	r25, r24
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	64 e6       	ldi	r22, 0x64	; 100
    1c80:	70 e0       	ldi	r23, 0x00	; 0
    1c82:	0e 94 5d 10 	call	0x20ba	; 0x20ba <__divmodhi4>
    1c86:	61 50       	subi	r22, 0x01	; 1
    1c88:	63 bd       	out	0x23, r22	; 35
    1c8a:	08 95       	ret

00001c8c <M_Pwm2_Start>:
	
}

void M_Pwm2_Start				(void)
{
	M_Timer2_Start();
    1c8c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <M_Timer2_Start>
	M_Dio_PinMode(PD7,OUTPUT);
    1c90:	61 e0       	ldi	r22, 0x01	; 1
    1c92:	8f e2       	ldi	r24, 0x2F	; 47
    1c94:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
    1c98:	08 95       	ret

00001c9a <M_Pwm2_Stop>:
}

void M_Pwm2_Stop				(void)
{
	M_Timer2_Stop();
    1c9a:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <M_Timer2_Stop>
	M_Dio_PinMode(PD7,INPUT);
    1c9e:	60 e0       	ldi	r22, 0x00	; 0
    1ca0:	8f e2       	ldi	r24, 0x2F	; 47
    1ca2:	0e 94 0f 0b 	call	0x161e	; 0x161e <M_Dio_PinMode>
    1ca6:	08 95       	ret

00001ca8 <__subsf3>:
    1ca8:	50 58       	subi	r21, 0x80	; 128

00001caa <__addsf3>:
    1caa:	bb 27       	eor	r27, r27
    1cac:	aa 27       	eor	r26, r26
    1cae:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__addsf3x>
    1cb2:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_round>
    1cb6:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__fp_pscA>
    1cba:	38 f0       	brcs	.+14     	; 0x1cca <__addsf3+0x20>
    1cbc:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__fp_pscB>
    1cc0:	20 f0       	brcs	.+8      	; 0x1cca <__addsf3+0x20>
    1cc2:	39 f4       	brne	.+14     	; 0x1cd2 <__addsf3+0x28>
    1cc4:	9f 3f       	cpi	r25, 0xFF	; 255
    1cc6:	19 f4       	brne	.+6      	; 0x1cce <__addsf3+0x24>
    1cc8:	26 f4       	brtc	.+8      	; 0x1cd2 <__addsf3+0x28>
    1cca:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_nan>
    1cce:	0e f4       	brtc	.+2      	; 0x1cd2 <__addsf3+0x28>
    1cd0:	e0 95       	com	r30
    1cd2:	e7 fb       	bst	r30, 7
    1cd4:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_inf>

00001cd8 <__addsf3x>:
    1cd8:	e9 2f       	mov	r30, r25
    1cda:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_split3>
    1cde:	58 f3       	brcs	.-42     	; 0x1cb6 <__addsf3+0xc>
    1ce0:	ba 17       	cp	r27, r26
    1ce2:	62 07       	cpc	r22, r18
    1ce4:	73 07       	cpc	r23, r19
    1ce6:	84 07       	cpc	r24, r20
    1ce8:	95 07       	cpc	r25, r21
    1cea:	20 f0       	brcs	.+8      	; 0x1cf4 <__addsf3x+0x1c>
    1cec:	79 f4       	brne	.+30     	; 0x1d0c <__addsf3x+0x34>
    1cee:	a6 f5       	brtc	.+104    	; 0x1d58 <__addsf3x+0x80>
    1cf0:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_zero>
    1cf4:	0e f4       	brtc	.+2      	; 0x1cf8 <__addsf3x+0x20>
    1cf6:	e0 95       	com	r30
    1cf8:	0b 2e       	mov	r0, r27
    1cfa:	ba 2f       	mov	r27, r26
    1cfc:	a0 2d       	mov	r26, r0
    1cfe:	0b 01       	movw	r0, r22
    1d00:	b9 01       	movw	r22, r18
    1d02:	90 01       	movw	r18, r0
    1d04:	0c 01       	movw	r0, r24
    1d06:	ca 01       	movw	r24, r20
    1d08:	a0 01       	movw	r20, r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	ff 27       	eor	r31, r31
    1d0e:	59 1b       	sub	r21, r25
    1d10:	99 f0       	breq	.+38     	; 0x1d38 <__addsf3x+0x60>
    1d12:	59 3f       	cpi	r21, 0xF9	; 249
    1d14:	50 f4       	brcc	.+20     	; 0x1d2a <__addsf3x+0x52>
    1d16:	50 3e       	cpi	r21, 0xE0	; 224
    1d18:	68 f1       	brcs	.+90     	; 0x1d74 <__addsf3x+0x9c>
    1d1a:	1a 16       	cp	r1, r26
    1d1c:	f0 40       	sbci	r31, 0x00	; 0
    1d1e:	a2 2f       	mov	r26, r18
    1d20:	23 2f       	mov	r18, r19
    1d22:	34 2f       	mov	r19, r20
    1d24:	44 27       	eor	r20, r20
    1d26:	58 5f       	subi	r21, 0xF8	; 248
    1d28:	f3 cf       	rjmp	.-26     	; 0x1d10 <__addsf3x+0x38>
    1d2a:	46 95       	lsr	r20
    1d2c:	37 95       	ror	r19
    1d2e:	27 95       	ror	r18
    1d30:	a7 95       	ror	r26
    1d32:	f0 40       	sbci	r31, 0x00	; 0
    1d34:	53 95       	inc	r21
    1d36:	c9 f7       	brne	.-14     	; 0x1d2a <__addsf3x+0x52>
    1d38:	7e f4       	brtc	.+30     	; 0x1d58 <__addsf3x+0x80>
    1d3a:	1f 16       	cp	r1, r31
    1d3c:	ba 0b       	sbc	r27, r26
    1d3e:	62 0b       	sbc	r22, r18
    1d40:	73 0b       	sbc	r23, r19
    1d42:	84 0b       	sbc	r24, r20
    1d44:	ba f0       	brmi	.+46     	; 0x1d74 <__addsf3x+0x9c>
    1d46:	91 50       	subi	r25, 0x01	; 1
    1d48:	a1 f0       	breq	.+40     	; 0x1d72 <__addsf3x+0x9a>
    1d4a:	ff 0f       	add	r31, r31
    1d4c:	bb 1f       	adc	r27, r27
    1d4e:	66 1f       	adc	r22, r22
    1d50:	77 1f       	adc	r23, r23
    1d52:	88 1f       	adc	r24, r24
    1d54:	c2 f7       	brpl	.-16     	; 0x1d46 <__addsf3x+0x6e>
    1d56:	0e c0       	rjmp	.+28     	; 0x1d74 <__addsf3x+0x9c>
    1d58:	ba 0f       	add	r27, r26
    1d5a:	62 1f       	adc	r22, r18
    1d5c:	73 1f       	adc	r23, r19
    1d5e:	84 1f       	adc	r24, r20
    1d60:	48 f4       	brcc	.+18     	; 0x1d74 <__addsf3x+0x9c>
    1d62:	87 95       	ror	r24
    1d64:	77 95       	ror	r23
    1d66:	67 95       	ror	r22
    1d68:	b7 95       	ror	r27
    1d6a:	f7 95       	ror	r31
    1d6c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6e:	08 f0       	brcs	.+2      	; 0x1d72 <__addsf3x+0x9a>
    1d70:	b0 cf       	rjmp	.-160    	; 0x1cd2 <__addsf3+0x28>
    1d72:	93 95       	inc	r25
    1d74:	88 0f       	add	r24, r24
    1d76:	08 f0       	brcs	.+2      	; 0x1d7a <__addsf3x+0xa2>
    1d78:	99 27       	eor	r25, r25
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	97 95       	ror	r25
    1d7e:	87 95       	ror	r24
    1d80:	08 95       	ret

00001d82 <__divsf3>:
    1d82:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <__divsf3x>
    1d86:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_round>
    1d8a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__fp_pscB>
    1d8e:	58 f0       	brcs	.+22     	; 0x1da6 <__divsf3+0x24>
    1d90:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__fp_pscA>
    1d94:	40 f0       	brcs	.+16     	; 0x1da6 <__divsf3+0x24>
    1d96:	29 f4       	brne	.+10     	; 0x1da2 <__divsf3+0x20>
    1d98:	5f 3f       	cpi	r21, 0xFF	; 255
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <__divsf3+0x24>
    1d9c:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_inf>
    1da0:	51 11       	cpse	r21, r1
    1da2:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__fp_szero>
    1da6:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_nan>

00001daa <__divsf3x>:
    1daa:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_split3>
    1dae:	68 f3       	brcs	.-38     	; 0x1d8a <__divsf3+0x8>

00001db0 <__divsf3_pse>:
    1db0:	99 23       	and	r25, r25
    1db2:	b1 f3       	breq	.-20     	; 0x1da0 <__divsf3+0x1e>
    1db4:	55 23       	and	r21, r21
    1db6:	91 f3       	breq	.-28     	; 0x1d9c <__divsf3+0x1a>
    1db8:	95 1b       	sub	r25, r21
    1dba:	55 0b       	sbc	r21, r21
    1dbc:	bb 27       	eor	r27, r27
    1dbe:	aa 27       	eor	r26, r26
    1dc0:	62 17       	cp	r22, r18
    1dc2:	73 07       	cpc	r23, r19
    1dc4:	84 07       	cpc	r24, r20
    1dc6:	38 f0       	brcs	.+14     	; 0x1dd6 <__divsf3_pse+0x26>
    1dc8:	9f 5f       	subi	r25, 0xFF	; 255
    1dca:	5f 4f       	sbci	r21, 0xFF	; 255
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	44 1f       	adc	r20, r20
    1dd2:	aa 1f       	adc	r26, r26
    1dd4:	a9 f3       	breq	.-22     	; 0x1dc0 <__divsf3_pse+0x10>
    1dd6:	35 d0       	rcall	.+106    	; 0x1e42 <__divsf3_pse+0x92>
    1dd8:	0e 2e       	mov	r0, r30
    1dda:	3a f0       	brmi	.+14     	; 0x1dea <__divsf3_pse+0x3a>
    1ddc:	e0 e8       	ldi	r30, 0x80	; 128
    1dde:	32 d0       	rcall	.+100    	; 0x1e44 <__divsf3_pse+0x94>
    1de0:	91 50       	subi	r25, 0x01	; 1
    1de2:	50 40       	sbci	r21, 0x00	; 0
    1de4:	e6 95       	lsr	r30
    1de6:	00 1c       	adc	r0, r0
    1de8:	ca f7       	brpl	.-14     	; 0x1ddc <__divsf3_pse+0x2c>
    1dea:	2b d0       	rcall	.+86     	; 0x1e42 <__divsf3_pse+0x92>
    1dec:	fe 2f       	mov	r31, r30
    1dee:	29 d0       	rcall	.+82     	; 0x1e42 <__divsf3_pse+0x92>
    1df0:	66 0f       	add	r22, r22
    1df2:	77 1f       	adc	r23, r23
    1df4:	88 1f       	adc	r24, r24
    1df6:	bb 1f       	adc	r27, r27
    1df8:	26 17       	cp	r18, r22
    1dfa:	37 07       	cpc	r19, r23
    1dfc:	48 07       	cpc	r20, r24
    1dfe:	ab 07       	cpc	r26, r27
    1e00:	b0 e8       	ldi	r27, 0x80	; 128
    1e02:	09 f0       	breq	.+2      	; 0x1e06 <__divsf3_pse+0x56>
    1e04:	bb 0b       	sbc	r27, r27
    1e06:	80 2d       	mov	r24, r0
    1e08:	bf 01       	movw	r22, r30
    1e0a:	ff 27       	eor	r31, r31
    1e0c:	93 58       	subi	r25, 0x83	; 131
    1e0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e10:	3a f0       	brmi	.+14     	; 0x1e20 <__divsf3_pse+0x70>
    1e12:	9e 3f       	cpi	r25, 0xFE	; 254
    1e14:	51 05       	cpc	r21, r1
    1e16:	78 f0       	brcs	.+30     	; 0x1e36 <__divsf3_pse+0x86>
    1e18:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_inf>
    1e1c:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__fp_szero>
    1e20:	5f 3f       	cpi	r21, 0xFF	; 255
    1e22:	e4 f3       	brlt	.-8      	; 0x1e1c <__divsf3_pse+0x6c>
    1e24:	98 3e       	cpi	r25, 0xE8	; 232
    1e26:	d4 f3       	brlt	.-12     	; 0x1e1c <__divsf3_pse+0x6c>
    1e28:	86 95       	lsr	r24
    1e2a:	77 95       	ror	r23
    1e2c:	67 95       	ror	r22
    1e2e:	b7 95       	ror	r27
    1e30:	f7 95       	ror	r31
    1e32:	9f 5f       	subi	r25, 0xFF	; 255
    1e34:	c9 f7       	brne	.-14     	; 0x1e28 <__divsf3_pse+0x78>
    1e36:	88 0f       	add	r24, r24
    1e38:	91 1d       	adc	r25, r1
    1e3a:	96 95       	lsr	r25
    1e3c:	87 95       	ror	r24
    1e3e:	97 f9       	bld	r25, 7
    1e40:	08 95       	ret
    1e42:	e1 e0       	ldi	r30, 0x01	; 1
    1e44:	66 0f       	add	r22, r22
    1e46:	77 1f       	adc	r23, r23
    1e48:	88 1f       	adc	r24, r24
    1e4a:	bb 1f       	adc	r27, r27
    1e4c:	62 17       	cp	r22, r18
    1e4e:	73 07       	cpc	r23, r19
    1e50:	84 07       	cpc	r24, r20
    1e52:	ba 07       	cpc	r27, r26
    1e54:	20 f0       	brcs	.+8      	; 0x1e5e <__divsf3_pse+0xae>
    1e56:	62 1b       	sub	r22, r18
    1e58:	73 0b       	sbc	r23, r19
    1e5a:	84 0b       	sbc	r24, r20
    1e5c:	ba 0b       	sbc	r27, r26
    1e5e:	ee 1f       	adc	r30, r30
    1e60:	88 f7       	brcc	.-30     	; 0x1e44 <__divsf3_pse+0x94>
    1e62:	e0 95       	com	r30
    1e64:	08 95       	ret

00001e66 <__fixunssfsi>:
    1e66:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__fp_splitA>
    1e6a:	88 f0       	brcs	.+34     	; 0x1e8e <__fixunssfsi+0x28>
    1e6c:	9f 57       	subi	r25, 0x7F	; 127
    1e6e:	98 f0       	brcs	.+38     	; 0x1e96 <__fixunssfsi+0x30>
    1e70:	b9 2f       	mov	r27, r25
    1e72:	99 27       	eor	r25, r25
    1e74:	b7 51       	subi	r27, 0x17	; 23
    1e76:	b0 f0       	brcs	.+44     	; 0x1ea4 <__fixunssfsi+0x3e>
    1e78:	e1 f0       	breq	.+56     	; 0x1eb2 <__fixunssfsi+0x4c>
    1e7a:	66 0f       	add	r22, r22
    1e7c:	77 1f       	adc	r23, r23
    1e7e:	88 1f       	adc	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	1a f0       	brmi	.+6      	; 0x1e8a <__fixunssfsi+0x24>
    1e84:	ba 95       	dec	r27
    1e86:	c9 f7       	brne	.-14     	; 0x1e7a <__fixunssfsi+0x14>
    1e88:	14 c0       	rjmp	.+40     	; 0x1eb2 <__fixunssfsi+0x4c>
    1e8a:	b1 30       	cpi	r27, 0x01	; 1
    1e8c:	91 f0       	breq	.+36     	; 0x1eb2 <__fixunssfsi+0x4c>
    1e8e:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <__fp_zero>
    1e92:	b1 e0       	ldi	r27, 0x01	; 1
    1e94:	08 95       	ret
    1e96:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <__fp_zero>
    1e9a:	67 2f       	mov	r22, r23
    1e9c:	78 2f       	mov	r23, r24
    1e9e:	88 27       	eor	r24, r24
    1ea0:	b8 5f       	subi	r27, 0xF8	; 248
    1ea2:	39 f0       	breq	.+14     	; 0x1eb2 <__fixunssfsi+0x4c>
    1ea4:	b9 3f       	cpi	r27, 0xF9	; 249
    1ea6:	cc f3       	brlt	.-14     	; 0x1e9a <__fixunssfsi+0x34>
    1ea8:	86 95       	lsr	r24
    1eaa:	77 95       	ror	r23
    1eac:	67 95       	ror	r22
    1eae:	b3 95       	inc	r27
    1eb0:	d9 f7       	brne	.-10     	; 0x1ea8 <__fixunssfsi+0x42>
    1eb2:	3e f4       	brtc	.+14     	; 0x1ec2 <__fixunssfsi+0x5c>
    1eb4:	90 95       	com	r25
    1eb6:	80 95       	com	r24
    1eb8:	70 95       	com	r23
    1eba:	61 95       	neg	r22
    1ebc:	7f 4f       	sbci	r23, 0xFF	; 255
    1ebe:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec0:	9f 4f       	sbci	r25, 0xFF	; 255
    1ec2:	08 95       	ret

00001ec4 <__floatunsisf>:
    1ec4:	e8 94       	clt
    1ec6:	09 c0       	rjmp	.+18     	; 0x1eda <__floatsisf+0x12>

00001ec8 <__floatsisf>:
    1ec8:	97 fb       	bst	r25, 7
    1eca:	3e f4       	brtc	.+14     	; 0x1eda <__floatsisf+0x12>
    1ecc:	90 95       	com	r25
    1ece:	80 95       	com	r24
    1ed0:	70 95       	com	r23
    1ed2:	61 95       	neg	r22
    1ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ed8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eda:	99 23       	and	r25, r25
    1edc:	a9 f0       	breq	.+42     	; 0x1f08 <__floatsisf+0x40>
    1ede:	f9 2f       	mov	r31, r25
    1ee0:	96 e9       	ldi	r25, 0x96	; 150
    1ee2:	bb 27       	eor	r27, r27
    1ee4:	93 95       	inc	r25
    1ee6:	f6 95       	lsr	r31
    1ee8:	87 95       	ror	r24
    1eea:	77 95       	ror	r23
    1eec:	67 95       	ror	r22
    1eee:	b7 95       	ror	r27
    1ef0:	f1 11       	cpse	r31, r1
    1ef2:	f8 cf       	rjmp	.-16     	; 0x1ee4 <__floatsisf+0x1c>
    1ef4:	fa f4       	brpl	.+62     	; 0x1f34 <__floatsisf+0x6c>
    1ef6:	bb 0f       	add	r27, r27
    1ef8:	11 f4       	brne	.+4      	; 0x1efe <__floatsisf+0x36>
    1efa:	60 ff       	sbrs	r22, 0
    1efc:	1b c0       	rjmp	.+54     	; 0x1f34 <__floatsisf+0x6c>
    1efe:	6f 5f       	subi	r22, 0xFF	; 255
    1f00:	7f 4f       	sbci	r23, 0xFF	; 255
    1f02:	8f 4f       	sbci	r24, 0xFF	; 255
    1f04:	9f 4f       	sbci	r25, 0xFF	; 255
    1f06:	16 c0       	rjmp	.+44     	; 0x1f34 <__floatsisf+0x6c>
    1f08:	88 23       	and	r24, r24
    1f0a:	11 f0       	breq	.+4      	; 0x1f10 <__floatsisf+0x48>
    1f0c:	96 e9       	ldi	r25, 0x96	; 150
    1f0e:	11 c0       	rjmp	.+34     	; 0x1f32 <__floatsisf+0x6a>
    1f10:	77 23       	and	r23, r23
    1f12:	21 f0       	breq	.+8      	; 0x1f1c <__floatsisf+0x54>
    1f14:	9e e8       	ldi	r25, 0x8E	; 142
    1f16:	87 2f       	mov	r24, r23
    1f18:	76 2f       	mov	r23, r22
    1f1a:	05 c0       	rjmp	.+10     	; 0x1f26 <__floatsisf+0x5e>
    1f1c:	66 23       	and	r22, r22
    1f1e:	71 f0       	breq	.+28     	; 0x1f3c <__floatsisf+0x74>
    1f20:	96 e8       	ldi	r25, 0x86	; 134
    1f22:	86 2f       	mov	r24, r22
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	60 e0       	ldi	r22, 0x00	; 0
    1f28:	2a f0       	brmi	.+10     	; 0x1f34 <__floatsisf+0x6c>
    1f2a:	9a 95       	dec	r25
    1f2c:	66 0f       	add	r22, r22
    1f2e:	77 1f       	adc	r23, r23
    1f30:	88 1f       	adc	r24, r24
    1f32:	da f7       	brpl	.-10     	; 0x1f2a <__floatsisf+0x62>
    1f34:	88 0f       	add	r24, r24
    1f36:	96 95       	lsr	r25
    1f38:	87 95       	ror	r24
    1f3a:	97 f9       	bld	r25, 7
    1f3c:	08 95       	ret

00001f3e <__fp_inf>:
    1f3e:	97 f9       	bld	r25, 7
    1f40:	9f 67       	ori	r25, 0x7F	; 127
    1f42:	80 e8       	ldi	r24, 0x80	; 128
    1f44:	70 e0       	ldi	r23, 0x00	; 0
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	08 95       	ret

00001f4a <__fp_nan>:
    1f4a:	9f ef       	ldi	r25, 0xFF	; 255
    1f4c:	80 ec       	ldi	r24, 0xC0	; 192
    1f4e:	08 95       	ret

00001f50 <__fp_pscA>:
    1f50:	00 24       	eor	r0, r0
    1f52:	0a 94       	dec	r0
    1f54:	16 16       	cp	r1, r22
    1f56:	17 06       	cpc	r1, r23
    1f58:	18 06       	cpc	r1, r24
    1f5a:	09 06       	cpc	r0, r25
    1f5c:	08 95       	ret

00001f5e <__fp_pscB>:
    1f5e:	00 24       	eor	r0, r0
    1f60:	0a 94       	dec	r0
    1f62:	12 16       	cp	r1, r18
    1f64:	13 06       	cpc	r1, r19
    1f66:	14 06       	cpc	r1, r20
    1f68:	05 06       	cpc	r0, r21
    1f6a:	08 95       	ret

00001f6c <__fp_round>:
    1f6c:	09 2e       	mov	r0, r25
    1f6e:	03 94       	inc	r0
    1f70:	00 0c       	add	r0, r0
    1f72:	11 f4       	brne	.+4      	; 0x1f78 <__fp_round+0xc>
    1f74:	88 23       	and	r24, r24
    1f76:	52 f0       	brmi	.+20     	; 0x1f8c <__fp_round+0x20>
    1f78:	bb 0f       	add	r27, r27
    1f7a:	40 f4       	brcc	.+16     	; 0x1f8c <__fp_round+0x20>
    1f7c:	bf 2b       	or	r27, r31
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__fp_round+0x18>
    1f80:	60 ff       	sbrs	r22, 0
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <__fp_round+0x20>
    1f84:	6f 5f       	subi	r22, 0xFF	; 255
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	8f 4f       	sbci	r24, 0xFF	; 255
    1f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f8c:	08 95       	ret

00001f8e <__fp_split3>:
    1f8e:	57 fd       	sbrc	r21, 7
    1f90:	90 58       	subi	r25, 0x80	; 128
    1f92:	44 0f       	add	r20, r20
    1f94:	55 1f       	adc	r21, r21
    1f96:	59 f0       	breq	.+22     	; 0x1fae <__fp_splitA+0x10>
    1f98:	5f 3f       	cpi	r21, 0xFF	; 255
    1f9a:	71 f0       	breq	.+28     	; 0x1fb8 <__fp_splitA+0x1a>
    1f9c:	47 95       	ror	r20

00001f9e <__fp_splitA>:
    1f9e:	88 0f       	add	r24, r24
    1fa0:	97 fb       	bst	r25, 7
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	61 f0       	breq	.+24     	; 0x1fbe <__fp_splitA+0x20>
    1fa6:	9f 3f       	cpi	r25, 0xFF	; 255
    1fa8:	79 f0       	breq	.+30     	; 0x1fc8 <__fp_splitA+0x2a>
    1faa:	87 95       	ror	r24
    1fac:	08 95       	ret
    1fae:	12 16       	cp	r1, r18
    1fb0:	13 06       	cpc	r1, r19
    1fb2:	14 06       	cpc	r1, r20
    1fb4:	55 1f       	adc	r21, r21
    1fb6:	f2 cf       	rjmp	.-28     	; 0x1f9c <__fp_split3+0xe>
    1fb8:	46 95       	lsr	r20
    1fba:	f1 df       	rcall	.-30     	; 0x1f9e <__fp_splitA>
    1fbc:	08 c0       	rjmp	.+16     	; 0x1fce <__fp_splitA+0x30>
    1fbe:	16 16       	cp	r1, r22
    1fc0:	17 06       	cpc	r1, r23
    1fc2:	18 06       	cpc	r1, r24
    1fc4:	99 1f       	adc	r25, r25
    1fc6:	f1 cf       	rjmp	.-30     	; 0x1faa <__fp_splitA+0xc>
    1fc8:	86 95       	lsr	r24
    1fca:	71 05       	cpc	r23, r1
    1fcc:	61 05       	cpc	r22, r1
    1fce:	08 94       	sec
    1fd0:	08 95       	ret

00001fd2 <__fp_zero>:
    1fd2:	e8 94       	clt

00001fd4 <__fp_szero>:
    1fd4:	bb 27       	eor	r27, r27
    1fd6:	66 27       	eor	r22, r22
    1fd8:	77 27       	eor	r23, r23
    1fda:	cb 01       	movw	r24, r22
    1fdc:	97 f9       	bld	r25, 7
    1fde:	08 95       	ret

00001fe0 <__mulsf3>:
    1fe0:	0e 94 03 10 	call	0x2006	; 0x2006 <__mulsf3x>
    1fe4:	0c 94 b6 0f 	jmp	0x1f6c	; 0x1f6c <__fp_round>
    1fe8:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__fp_pscA>
    1fec:	38 f0       	brcs	.+14     	; 0x1ffc <__mulsf3+0x1c>
    1fee:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <__fp_pscB>
    1ff2:	20 f0       	brcs	.+8      	; 0x1ffc <__mulsf3+0x1c>
    1ff4:	95 23       	and	r25, r21
    1ff6:	11 f0       	breq	.+4      	; 0x1ffc <__mulsf3+0x1c>
    1ff8:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_inf>
    1ffc:	0c 94 a5 0f 	jmp	0x1f4a	; 0x1f4a <__fp_nan>
    2000:	11 24       	eor	r1, r1
    2002:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__fp_szero>

00002006 <__mulsf3x>:
    2006:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <__fp_split3>
    200a:	70 f3       	brcs	.-36     	; 0x1fe8 <__mulsf3+0x8>

0000200c <__mulsf3_pse>:
    200c:	95 9f       	mul	r25, r21
    200e:	c1 f3       	breq	.-16     	; 0x2000 <__mulsf3+0x20>
    2010:	95 0f       	add	r25, r21
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	55 1f       	adc	r21, r21
    2016:	62 9f       	mul	r22, r18
    2018:	f0 01       	movw	r30, r0
    201a:	72 9f       	mul	r23, r18
    201c:	bb 27       	eor	r27, r27
    201e:	f0 0d       	add	r31, r0
    2020:	b1 1d       	adc	r27, r1
    2022:	63 9f       	mul	r22, r19
    2024:	aa 27       	eor	r26, r26
    2026:	f0 0d       	add	r31, r0
    2028:	b1 1d       	adc	r27, r1
    202a:	aa 1f       	adc	r26, r26
    202c:	64 9f       	mul	r22, r20
    202e:	66 27       	eor	r22, r22
    2030:	b0 0d       	add	r27, r0
    2032:	a1 1d       	adc	r26, r1
    2034:	66 1f       	adc	r22, r22
    2036:	82 9f       	mul	r24, r18
    2038:	22 27       	eor	r18, r18
    203a:	b0 0d       	add	r27, r0
    203c:	a1 1d       	adc	r26, r1
    203e:	62 1f       	adc	r22, r18
    2040:	73 9f       	mul	r23, r19
    2042:	b0 0d       	add	r27, r0
    2044:	a1 1d       	adc	r26, r1
    2046:	62 1f       	adc	r22, r18
    2048:	83 9f       	mul	r24, r19
    204a:	a0 0d       	add	r26, r0
    204c:	61 1d       	adc	r22, r1
    204e:	22 1f       	adc	r18, r18
    2050:	74 9f       	mul	r23, r20
    2052:	33 27       	eor	r19, r19
    2054:	a0 0d       	add	r26, r0
    2056:	61 1d       	adc	r22, r1
    2058:	23 1f       	adc	r18, r19
    205a:	84 9f       	mul	r24, r20
    205c:	60 0d       	add	r22, r0
    205e:	21 1d       	adc	r18, r1
    2060:	82 2f       	mov	r24, r18
    2062:	76 2f       	mov	r23, r22
    2064:	6a 2f       	mov	r22, r26
    2066:	11 24       	eor	r1, r1
    2068:	9f 57       	subi	r25, 0x7F	; 127
    206a:	50 40       	sbci	r21, 0x00	; 0
    206c:	9a f0       	brmi	.+38     	; 0x2094 <__mulsf3_pse+0x88>
    206e:	f1 f0       	breq	.+60     	; 0x20ac <__mulsf3_pse+0xa0>
    2070:	88 23       	and	r24, r24
    2072:	4a f0       	brmi	.+18     	; 0x2086 <__mulsf3_pse+0x7a>
    2074:	ee 0f       	add	r30, r30
    2076:	ff 1f       	adc	r31, r31
    2078:	bb 1f       	adc	r27, r27
    207a:	66 1f       	adc	r22, r22
    207c:	77 1f       	adc	r23, r23
    207e:	88 1f       	adc	r24, r24
    2080:	91 50       	subi	r25, 0x01	; 1
    2082:	50 40       	sbci	r21, 0x00	; 0
    2084:	a9 f7       	brne	.-22     	; 0x2070 <__mulsf3_pse+0x64>
    2086:	9e 3f       	cpi	r25, 0xFE	; 254
    2088:	51 05       	cpc	r21, r1
    208a:	80 f0       	brcs	.+32     	; 0x20ac <__mulsf3_pse+0xa0>
    208c:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__fp_inf>
    2090:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__fp_szero>
    2094:	5f 3f       	cpi	r21, 0xFF	; 255
    2096:	e4 f3       	brlt	.-8      	; 0x2090 <__mulsf3_pse+0x84>
    2098:	98 3e       	cpi	r25, 0xE8	; 232
    209a:	d4 f3       	brlt	.-12     	; 0x2090 <__mulsf3_pse+0x84>
    209c:	86 95       	lsr	r24
    209e:	77 95       	ror	r23
    20a0:	67 95       	ror	r22
    20a2:	b7 95       	ror	r27
    20a4:	f7 95       	ror	r31
    20a6:	e7 95       	ror	r30
    20a8:	9f 5f       	subi	r25, 0xFF	; 255
    20aa:	c1 f7       	brne	.-16     	; 0x209c <__mulsf3_pse+0x90>
    20ac:	fe 2b       	or	r31, r30
    20ae:	88 0f       	add	r24, r24
    20b0:	91 1d       	adc	r25, r1
    20b2:	96 95       	lsr	r25
    20b4:	87 95       	ror	r24
    20b6:	97 f9       	bld	r25, 7
    20b8:	08 95       	ret

000020ba <__divmodhi4>:
    20ba:	97 fb       	bst	r25, 7
    20bc:	07 2e       	mov	r0, r23
    20be:	16 f4       	brtc	.+4      	; 0x20c4 <__divmodhi4+0xa>
    20c0:	00 94       	com	r0
    20c2:	07 d0       	rcall	.+14     	; 0x20d2 <__divmodhi4_neg1>
    20c4:	77 fd       	sbrc	r23, 7
    20c6:	09 d0       	rcall	.+18     	; 0x20da <__divmodhi4_neg2>
    20c8:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <__udivmodhi4>
    20cc:	07 fc       	sbrc	r0, 7
    20ce:	05 d0       	rcall	.+10     	; 0x20da <__divmodhi4_neg2>
    20d0:	3e f4       	brtc	.+14     	; 0x20e0 <__divmodhi4_exit>

000020d2 <__divmodhi4_neg1>:
    20d2:	90 95       	com	r25
    20d4:	81 95       	neg	r24
    20d6:	9f 4f       	sbci	r25, 0xFF	; 255
    20d8:	08 95       	ret

000020da <__divmodhi4_neg2>:
    20da:	70 95       	com	r23
    20dc:	61 95       	neg	r22
    20de:	7f 4f       	sbci	r23, 0xFF	; 255

000020e0 <__divmodhi4_exit>:
    20e0:	08 95       	ret

000020e2 <__udivmodsi4>:
    20e2:	a1 e2       	ldi	r26, 0x21	; 33
    20e4:	1a 2e       	mov	r1, r26
    20e6:	aa 1b       	sub	r26, r26
    20e8:	bb 1b       	sub	r27, r27
    20ea:	fd 01       	movw	r30, r26
    20ec:	0d c0       	rjmp	.+26     	; 0x2108 <__udivmodsi4_ep>

000020ee <__udivmodsi4_loop>:
    20ee:	aa 1f       	adc	r26, r26
    20f0:	bb 1f       	adc	r27, r27
    20f2:	ee 1f       	adc	r30, r30
    20f4:	ff 1f       	adc	r31, r31
    20f6:	a2 17       	cp	r26, r18
    20f8:	b3 07       	cpc	r27, r19
    20fa:	e4 07       	cpc	r30, r20
    20fc:	f5 07       	cpc	r31, r21
    20fe:	20 f0       	brcs	.+8      	; 0x2108 <__udivmodsi4_ep>
    2100:	a2 1b       	sub	r26, r18
    2102:	b3 0b       	sbc	r27, r19
    2104:	e4 0b       	sbc	r30, r20
    2106:	f5 0b       	sbc	r31, r21

00002108 <__udivmodsi4_ep>:
    2108:	66 1f       	adc	r22, r22
    210a:	77 1f       	adc	r23, r23
    210c:	88 1f       	adc	r24, r24
    210e:	99 1f       	adc	r25, r25
    2110:	1a 94       	dec	r1
    2112:	69 f7       	brne	.-38     	; 0x20ee <__udivmodsi4_loop>
    2114:	60 95       	com	r22
    2116:	70 95       	com	r23
    2118:	80 95       	com	r24
    211a:	90 95       	com	r25
    211c:	9b 01       	movw	r18, r22
    211e:	ac 01       	movw	r20, r24
    2120:	bd 01       	movw	r22, r26
    2122:	cf 01       	movw	r24, r30
    2124:	08 95       	ret

00002126 <__divmodsi4>:
    2126:	05 2e       	mov	r0, r21
    2128:	97 fb       	bst	r25, 7
    212a:	1e f4       	brtc	.+6      	; 0x2132 <__divmodsi4+0xc>
    212c:	00 94       	com	r0
    212e:	0e 94 aa 10 	call	0x2154	; 0x2154 <__negsi2>
    2132:	57 fd       	sbrc	r21, 7
    2134:	07 d0       	rcall	.+14     	; 0x2144 <__divmodsi4_neg2>
    2136:	0e 94 71 10 	call	0x20e2	; 0x20e2 <__udivmodsi4>
    213a:	07 fc       	sbrc	r0, 7
    213c:	03 d0       	rcall	.+6      	; 0x2144 <__divmodsi4_neg2>
    213e:	4e f4       	brtc	.+18     	; 0x2152 <__divmodsi4_exit>
    2140:	0c 94 aa 10 	jmp	0x2154	; 0x2154 <__negsi2>

00002144 <__divmodsi4_neg2>:
    2144:	50 95       	com	r21
    2146:	40 95       	com	r20
    2148:	30 95       	com	r19
    214a:	21 95       	neg	r18
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	4f 4f       	sbci	r20, 0xFF	; 255
    2150:	5f 4f       	sbci	r21, 0xFF	; 255

00002152 <__divmodsi4_exit>:
    2152:	08 95       	ret

00002154 <__negsi2>:
    2154:	90 95       	com	r25
    2156:	80 95       	com	r24
    2158:	70 95       	com	r23
    215a:	61 95       	neg	r22
    215c:	7f 4f       	sbci	r23, 0xFF	; 255
    215e:	8f 4f       	sbci	r24, 0xFF	; 255
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	08 95       	ret

00002164 <__tablejump2__>:
    2164:	ee 0f       	add	r30, r30
    2166:	ff 1f       	adc	r31, r31
    2168:	05 90       	lpm	r0, Z+
    216a:	f4 91       	lpm	r31, Z
    216c:	e0 2d       	mov	r30, r0
    216e:	09 94       	ijmp

00002170 <__umulhisi3>:
    2170:	a2 9f       	mul	r26, r18
    2172:	b0 01       	movw	r22, r0
    2174:	b3 9f       	mul	r27, r19
    2176:	c0 01       	movw	r24, r0
    2178:	a3 9f       	mul	r26, r19
    217a:	70 0d       	add	r23, r0
    217c:	81 1d       	adc	r24, r1
    217e:	11 24       	eor	r1, r1
    2180:	91 1d       	adc	r25, r1
    2182:	b2 9f       	mul	r27, r18
    2184:	70 0d       	add	r23, r0
    2186:	81 1d       	adc	r24, r1
    2188:	11 24       	eor	r1, r1
    218a:	91 1d       	adc	r25, r1
    218c:	08 95       	ret

0000218e <__muluhisi3>:
    218e:	0e 94 b8 10 	call	0x2170	; 0x2170 <__umulhisi3>
    2192:	a5 9f       	mul	r26, r21
    2194:	90 0d       	add	r25, r0
    2196:	b4 9f       	mul	r27, r20
    2198:	90 0d       	add	r25, r0
    219a:	a4 9f       	mul	r26, r20
    219c:	80 0d       	add	r24, r0
    219e:	91 1d       	adc	r25, r1
    21a0:	11 24       	eor	r1, r1
    21a2:	08 95       	ret

000021a4 <__udivmodhi4>:
    21a4:	aa 1b       	sub	r26, r26
    21a6:	bb 1b       	sub	r27, r27
    21a8:	51 e1       	ldi	r21, 0x11	; 17
    21aa:	07 c0       	rjmp	.+14     	; 0x21ba <__udivmodhi4_ep>

000021ac <__udivmodhi4_loop>:
    21ac:	aa 1f       	adc	r26, r26
    21ae:	bb 1f       	adc	r27, r27
    21b0:	a6 17       	cp	r26, r22
    21b2:	b7 07       	cpc	r27, r23
    21b4:	10 f0       	brcs	.+4      	; 0x21ba <__udivmodhi4_ep>
    21b6:	a6 1b       	sub	r26, r22
    21b8:	b7 0b       	sbc	r27, r23

000021ba <__udivmodhi4_ep>:
    21ba:	88 1f       	adc	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	5a 95       	dec	r21
    21c0:	a9 f7       	brne	.-22     	; 0x21ac <__udivmodhi4_loop>
    21c2:	80 95       	com	r24
    21c4:	90 95       	com	r25
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	08 95       	ret

000021cc <_exit>:
    21cc:	f8 94       	cli

000021ce <__stop_program>:
    21ce:	ff cf       	rjmp	.-2      	; 0x21ce <__stop_program>
