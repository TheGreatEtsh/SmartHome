
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a6e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000aa0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000118  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000022b6  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ed  00000000  00000000  00002eaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001135  00000000  00000000  00003897  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000318  00000000  00000000  000049cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000769  00000000  00000000  00004ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001b4e  00000000  00000000  0000544d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000120  00000000  00000000  00006f9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
// 	return 0;
// }

int main (void)
{
	H_KeyPad_Init();
  7c:	0e 94 49 00 	call	0x92	; 0x92 <H_KeyPad_Init>
	H_Lcd_Init();
  80:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <H_Lcd_Init>
	
	u8 Key = 0;
	
	while(1)
	{
		Key = H_KeyPad_Read();
  84:	0e 94 8a 00 	call	0x114	; 0x114 <H_KeyPad_Read>
		if (Key)
  88:	88 23       	and	r24, r24
  8a:	e1 f3       	breq	.-8      	; 0x84 <main+0x8>
		{
			H_Lcd_WriteCharacter(Key);
  8c:	0e 94 82 02 	call	0x504	; 0x504 <H_Lcd_WriteCharacter>
  90:	f9 cf       	rjmp	.-14     	; 0x84 <main+0x8>

00000092 <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	8e e1       	ldi	r24, 0x1E	; 30
  96:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	8f e1       	ldi	r24, 0x1F	; 31
  9e:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
  a2:	61 e0       	ldi	r22, 0x01	; 1
  a4:	80 e2       	ldi	r24, 0x20	; 32
  a6:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
  aa:	61 e0       	ldi	r22, 0x01	; 1
  ac:	81 e2       	ldi	r24, 0x21	; 33
  ae:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	8e e1       	ldi	r24, 0x1E	; 30
  b6:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	8f e1       	ldi	r24, 0x1F	; 31
  be:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
  c2:	61 e0       	ldi	r22, 0x01	; 1
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
  ca:	61 e0       	ldi	r22, 0x01	; 1
  cc:	81 e2       	ldi	r24, 0x21	; 33
  ce:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	82 e2       	ldi	r24, 0x22	; 34
  d6:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	83 e2       	ldi	r24, 0x23	; 35
  de:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	84 e2       	ldi	r24, 0x24	; 36
  e6:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	85 e2       	ldi	r24, 0x25	; 37
  ee:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	82 e2       	ldi	r24, 0x22	; 34
  f6:	0e 94 82 04 	call	0x904	; 0x904 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	83 e2       	ldi	r24, 0x23	; 35
  fe:	0e 94 82 04 	call	0x904	; 0x904 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	0e 94 82 04 	call	0x904	; 0x904 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	85 e2       	ldi	r24, 0x25	; 37
 10e:	0e 94 82 04 	call	0x904	; 0x904 <M_Dio_PinPullUp>
 112:	08 95       	ret

00000114 <H_KeyPad_Read>:
		
}
u8	 H_KeyPad_Read				(void)
{
 114:	cf 93       	push	r28
	u8 Local_u8_KeyPadArr [4][4]	={	{'7','8','9','/'},
										{'4','5','6','*'},
										{'1','2','3','-'},										
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	8e e1       	ldi	r24, 0x1E	; 30
 11a:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
 11e:	82 e2       	ldi	r24, 0x22	; 34
 120:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 124:	81 11       	cpse	r24, r1
 126:	19 c0       	rjmp	.+50     	; 0x15a <H_KeyPad_Read+0x46>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	2f ef       	ldi	r18, 0xFF	; 255
 12a:	86 e7       	ldi	r24, 0x76	; 118
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	21 50       	subi	r18, 0x01	; 1
 130:	80 40       	sbci	r24, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <H_KeyPad_Read+0x1a>
 136:	00 c0       	rjmp	.+0      	; 0x138 <H_KeyPad_Read+0x24>
 138:	00 00       	nop
 13a:	82 e2       	ldi	r24, 0x22	; 34
 13c:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 140:	81 11       	cpse	r24, r1
 142:	0d c0       	rjmp	.+26     	; 0x15e <H_KeyPad_Read+0x4a>
 144:	82 e2       	ldi	r24, 0x22	; 34
 146:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 14a:	88 23       	and	r24, r24
 14c:	d9 f3       	breq	.-10     	; 0x144 <H_KeyPad_Read+0x30>
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	8e e1       	ldi	r24, 0x1E	; 30
 152:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 156:	c7 e3       	ldi	r28, 0x37	; 55
 158:	03 c0       	rjmp	.+6      	; 0x160 <H_KeyPad_Read+0x4c>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
		
}
u8	 H_KeyPad_Read				(void)
{
	u8 Local_u8_KeypadReading		=	0;
 15a:	c0 e0       	ldi	r28, 0x00	; 0
 15c:	01 c0       	rjmp	.+2      	; 0x160 <H_KeyPad_Read+0x4c>
 15e:	c0 e0       	ldi	r28, 0x00	; 0
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][1];}}
 160:	83 e2       	ldi	r24, 0x23	; 35
 162:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 166:	81 11       	cpse	r24, r1
 168:	18 c0       	rjmp	.+48     	; 0x19a <H_KeyPad_Read+0x86>
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	86 e7       	ldi	r24, 0x76	; 118
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	21 50       	subi	r18, 0x01	; 1
 172:	80 40       	sbci	r24, 0x00	; 0
 174:	90 40       	sbci	r25, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <H_KeyPad_Read+0x5c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <H_KeyPad_Read+0x66>
 17a:	00 00       	nop
 17c:	83 e2       	ldi	r24, 0x23	; 35
 17e:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 182:	81 11       	cpse	r24, r1
 184:	0a c0       	rjmp	.+20     	; 0x19a <H_KeyPad_Read+0x86>
 186:	83 e2       	ldi	r24, 0x23	; 35
 188:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 18c:	88 23       	and	r24, r24
 18e:	d9 f3       	breq	.-10     	; 0x186 <H_KeyPad_Read+0x72>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	8e e1       	ldi	r24, 0x1E	; 30
 194:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 198:	c8 e3       	ldi	r28, 0x38	; 56
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][2];}}
 19a:	84 e2       	ldi	r24, 0x24	; 36
 19c:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 1a0:	81 11       	cpse	r24, r1
 1a2:	18 c0       	rjmp	.+48     	; 0x1d4 <H_KeyPad_Read+0xc0>
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	86 e7       	ldi	r24, 0x76	; 118
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <H_KeyPad_Read+0x96>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <H_KeyPad_Read+0xa0>
 1b4:	00 00       	nop
 1b6:	84 e2       	ldi	r24, 0x24	; 36
 1b8:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 1bc:	81 11       	cpse	r24, r1
 1be:	0a c0       	rjmp	.+20     	; 0x1d4 <H_KeyPad_Read+0xc0>
 1c0:	84 e2       	ldi	r24, 0x24	; 36
 1c2:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 1c6:	88 23       	and	r24, r24
 1c8:	d9 f3       	breq	.-10     	; 0x1c0 <H_KeyPad_Read+0xac>
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	8e e1       	ldi	r24, 0x1E	; 30
 1ce:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 1d2:	c9 e3       	ldi	r28, 0x39	; 57
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][3];}}
 1d4:	85 e2       	ldi	r24, 0x25	; 37
 1d6:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 1da:	81 11       	cpse	r24, r1
 1dc:	18 c0       	rjmp	.+48     	; 0x20e <H_KeyPad_Read+0xfa>
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	86 e7       	ldi	r24, 0x76	; 118
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <H_KeyPad_Read+0xd0>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <H_KeyPad_Read+0xda>
 1ee:	00 00       	nop
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 1f6:	81 11       	cpse	r24, r1
 1f8:	0a c0       	rjmp	.+20     	; 0x20e <H_KeyPad_Read+0xfa>
 1fa:	85 e2       	ldi	r24, 0x25	; 37
 1fc:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 200:	88 23       	and	r24, r24
 202:	d9 f3       	breq	.-10     	; 0x1fa <H_KeyPad_Read+0xe6>
 204:	61 e0       	ldi	r22, 0x01	; 1
 206:	8e e1       	ldi	r24, 0x1E	; 30
 208:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 20c:	cf e2       	ldi	r28, 0x2F	; 47
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
 20e:	61 e0       	ldi	r22, 0x01	; 1
 210:	8e e1       	ldi	r24, 0x1E	; 30
 212:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,LOW);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	8f e1       	ldi	r24, 0x1F	; 31
 21a:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][0];}}
 21e:	82 e2       	ldi	r24, 0x22	; 34
 220:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 224:	81 11       	cpse	r24, r1
 226:	18 c0       	rjmp	.+48     	; 0x258 <H_KeyPad_Read+0x144>
 228:	2f ef       	ldi	r18, 0xFF	; 255
 22a:	86 e7       	ldi	r24, 0x76	; 118
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	21 50       	subi	r18, 0x01	; 1
 230:	80 40       	sbci	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	e1 f7       	brne	.-8      	; 0x22e <H_KeyPad_Read+0x11a>
 236:	00 c0       	rjmp	.+0      	; 0x238 <H_KeyPad_Read+0x124>
 238:	00 00       	nop
 23a:	82 e2       	ldi	r24, 0x22	; 34
 23c:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 240:	81 11       	cpse	r24, r1
 242:	0a c0       	rjmp	.+20     	; 0x258 <H_KeyPad_Read+0x144>
 244:	82 e2       	ldi	r24, 0x22	; 34
 246:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 24a:	88 23       	and	r24, r24
 24c:	d9 f3       	breq	.-10     	; 0x244 <H_KeyPad_Read+0x130>
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	8f e1       	ldi	r24, 0x1F	; 31
 252:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 256:	c4 e3       	ldi	r28, 0x34	; 52
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][1];}}
 258:	83 e2       	ldi	r24, 0x23	; 35
 25a:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 25e:	81 11       	cpse	r24, r1
 260:	18 c0       	rjmp	.+48     	; 0x292 <H_KeyPad_Read+0x17e>
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	86 e7       	ldi	r24, 0x76	; 118
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <H_KeyPad_Read+0x154>
 270:	00 c0       	rjmp	.+0      	; 0x272 <H_KeyPad_Read+0x15e>
 272:	00 00       	nop
 274:	83 e2       	ldi	r24, 0x23	; 35
 276:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 27a:	81 11       	cpse	r24, r1
 27c:	0a c0       	rjmp	.+20     	; 0x292 <H_KeyPad_Read+0x17e>
 27e:	83 e2       	ldi	r24, 0x23	; 35
 280:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 284:	88 23       	and	r24, r24
 286:	d9 f3       	breq	.-10     	; 0x27e <H_KeyPad_Read+0x16a>
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	8f e1       	ldi	r24, 0x1F	; 31
 28c:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 290:	c5 e3       	ldi	r28, 0x35	; 53
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][2];}}
 292:	84 e2       	ldi	r24, 0x24	; 36
 294:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 298:	81 11       	cpse	r24, r1
 29a:	18 c0       	rjmp	.+48     	; 0x2cc <H_KeyPad_Read+0x1b8>
 29c:	2f ef       	ldi	r18, 0xFF	; 255
 29e:	86 e7       	ldi	r24, 0x76	; 118
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	21 50       	subi	r18, 0x01	; 1
 2a4:	80 40       	sbci	r24, 0x00	; 0
 2a6:	90 40       	sbci	r25, 0x00	; 0
 2a8:	e1 f7       	brne	.-8      	; 0x2a2 <H_KeyPad_Read+0x18e>
 2aa:	00 c0       	rjmp	.+0      	; 0x2ac <H_KeyPad_Read+0x198>
 2ac:	00 00       	nop
 2ae:	84 e2       	ldi	r24, 0x24	; 36
 2b0:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 2b4:	81 11       	cpse	r24, r1
 2b6:	0a c0       	rjmp	.+20     	; 0x2cc <H_KeyPad_Read+0x1b8>
 2b8:	84 e2       	ldi	r24, 0x24	; 36
 2ba:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 2be:	88 23       	and	r24, r24
 2c0:	d9 f3       	breq	.-10     	; 0x2b8 <H_KeyPad_Read+0x1a4>
 2c2:	61 e0       	ldi	r22, 0x01	; 1
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 2ca:	c6 e3       	ldi	r28, 0x36	; 54
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][3];}}
 2cc:	85 e2       	ldi	r24, 0x25	; 37
 2ce:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 2d2:	81 11       	cpse	r24, r1
 2d4:	18 c0       	rjmp	.+48     	; 0x306 <H_KeyPad_Read+0x1f2>
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	86 e7       	ldi	r24, 0x76	; 118
 2da:	91 e0       	ldi	r25, 0x01	; 1
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	80 40       	sbci	r24, 0x00	; 0
 2e0:	90 40       	sbci	r25, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <H_KeyPad_Read+0x1c8>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <H_KeyPad_Read+0x1d2>
 2e6:	00 00       	nop
 2e8:	85 e2       	ldi	r24, 0x25	; 37
 2ea:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 2ee:	81 11       	cpse	r24, r1
 2f0:	0a c0       	rjmp	.+20     	; 0x306 <H_KeyPad_Read+0x1f2>
 2f2:	85 e2       	ldi	r24, 0x25	; 37
 2f4:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 2f8:	88 23       	and	r24, r24
 2fa:	d9 f3       	breq	.-10     	; 0x2f2 <H_KeyPad_Read+0x1de>
 2fc:	61 e0       	ldi	r22, 0x01	; 1
 2fe:	8f e1       	ldi	r24, 0x1F	; 31
 300:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 304:	ca e2       	ldi	r28, 0x2A	; 42
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	8f e1       	ldi	r24, 0x1F	; 31
 30a:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,LOW);
 30e:	60 e0       	ldi	r22, 0x00	; 0
 310:	80 e2       	ldi	r24, 0x20	; 32
 312:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
		
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][0];}}
 316:	82 e2       	ldi	r24, 0x22	; 34
 318:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 31c:	81 11       	cpse	r24, r1
 31e:	18 c0       	rjmp	.+48     	; 0x350 <H_KeyPad_Read+0x23c>
 320:	2f ef       	ldi	r18, 0xFF	; 255
 322:	86 e7       	ldi	r24, 0x76	; 118
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	21 50       	subi	r18, 0x01	; 1
 328:	80 40       	sbci	r24, 0x00	; 0
 32a:	90 40       	sbci	r25, 0x00	; 0
 32c:	e1 f7       	brne	.-8      	; 0x326 <H_KeyPad_Read+0x212>
 32e:	00 c0       	rjmp	.+0      	; 0x330 <H_KeyPad_Read+0x21c>
 330:	00 00       	nop
 332:	82 e2       	ldi	r24, 0x22	; 34
 334:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 338:	81 11       	cpse	r24, r1
 33a:	0a c0       	rjmp	.+20     	; 0x350 <H_KeyPad_Read+0x23c>
 33c:	82 e2       	ldi	r24, 0x22	; 34
 33e:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 342:	88 23       	and	r24, r24
 344:	d9 f3       	breq	.-10     	; 0x33c <H_KeyPad_Read+0x228>
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	80 e2       	ldi	r24, 0x20	; 32
 34a:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 34e:	c1 e3       	ldi	r28, 0x31	; 49
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][1];}}
 350:	83 e2       	ldi	r24, 0x23	; 35
 352:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 356:	81 11       	cpse	r24, r1
 358:	18 c0       	rjmp	.+48     	; 0x38a <H_KeyPad_Read+0x276>
 35a:	2f ef       	ldi	r18, 0xFF	; 255
 35c:	86 e7       	ldi	r24, 0x76	; 118
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	21 50       	subi	r18, 0x01	; 1
 362:	80 40       	sbci	r24, 0x00	; 0
 364:	90 40       	sbci	r25, 0x00	; 0
 366:	e1 f7       	brne	.-8      	; 0x360 <H_KeyPad_Read+0x24c>
 368:	00 c0       	rjmp	.+0      	; 0x36a <H_KeyPad_Read+0x256>
 36a:	00 00       	nop
 36c:	83 e2       	ldi	r24, 0x23	; 35
 36e:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 372:	81 11       	cpse	r24, r1
 374:	0a c0       	rjmp	.+20     	; 0x38a <H_KeyPad_Read+0x276>
 376:	83 e2       	ldi	r24, 0x23	; 35
 378:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 37c:	88 23       	and	r24, r24
 37e:	d9 f3       	breq	.-10     	; 0x376 <H_KeyPad_Read+0x262>
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	80 e2       	ldi	r24, 0x20	; 32
 384:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 388:	c2 e3       	ldi	r28, 0x32	; 50
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][2];}}
 38a:	84 e2       	ldi	r24, 0x24	; 36
 38c:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 390:	81 11       	cpse	r24, r1
 392:	18 c0       	rjmp	.+48     	; 0x3c4 <H_KeyPad_Read+0x2b0>
 394:	2f ef       	ldi	r18, 0xFF	; 255
 396:	86 e7       	ldi	r24, 0x76	; 118
 398:	91 e0       	ldi	r25, 0x01	; 1
 39a:	21 50       	subi	r18, 0x01	; 1
 39c:	80 40       	sbci	r24, 0x00	; 0
 39e:	90 40       	sbci	r25, 0x00	; 0
 3a0:	e1 f7       	brne	.-8      	; 0x39a <H_KeyPad_Read+0x286>
 3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <H_KeyPad_Read+0x290>
 3a4:	00 00       	nop
 3a6:	84 e2       	ldi	r24, 0x24	; 36
 3a8:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 3ac:	81 11       	cpse	r24, r1
 3ae:	0a c0       	rjmp	.+20     	; 0x3c4 <H_KeyPad_Read+0x2b0>
 3b0:	84 e2       	ldi	r24, 0x24	; 36
 3b2:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 3b6:	88 23       	and	r24, r24
 3b8:	d9 f3       	breq	.-10     	; 0x3b0 <H_KeyPad_Read+0x29c>
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 3c2:	c3 e3       	ldi	r28, 0x33	; 51
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][3];}}
 3c4:	85 e2       	ldi	r24, 0x25	; 37
 3c6:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 3ca:	81 11       	cpse	r24, r1
 3cc:	18 c0       	rjmp	.+48     	; 0x3fe <H_KeyPad_Read+0x2ea>
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	86 e7       	ldi	r24, 0x76	; 118
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	80 40       	sbci	r24, 0x00	; 0
 3d8:	90 40       	sbci	r25, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <H_KeyPad_Read+0x2c0>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <H_KeyPad_Read+0x2ca>
 3de:	00 00       	nop
 3e0:	85 e2       	ldi	r24, 0x25	; 37
 3e2:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 3e6:	81 11       	cpse	r24, r1
 3e8:	0a c0       	rjmp	.+20     	; 0x3fe <H_KeyPad_Read+0x2ea>
 3ea:	85 e2       	ldi	r24, 0x25	; 37
 3ec:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 3f0:	88 23       	and	r24, r24
 3f2:	d9 f3       	breq	.-10     	; 0x3ea <H_KeyPad_Read+0x2d6>
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	80 e2       	ldi	r24, 0x20	; 32
 3f8:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 3fc:	cd e2       	ldi	r28, 0x2D	; 45
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	80 e2       	ldi	r24, 0x20	; 32
 402:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
				
	M_Dio_PinWrite(KEYPAD_R3_PIN,LOW);
 406:	60 e0       	ldi	r22, 0x00	; 0
 408:	81 e2       	ldi	r24, 0x21	; 33
 40a:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][0];}}
 40e:	82 e2       	ldi	r24, 0x22	; 34
 410:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 414:	81 11       	cpse	r24, r1
 416:	18 c0       	rjmp	.+48     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 418:	2f ef       	ldi	r18, 0xFF	; 255
 41a:	86 e7       	ldi	r24, 0x76	; 118
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	21 50       	subi	r18, 0x01	; 1
 420:	80 40       	sbci	r24, 0x00	; 0
 422:	90 40       	sbci	r25, 0x00	; 0
 424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	82 e2       	ldi	r24, 0x22	; 34
 42c:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 430:	81 11       	cpse	r24, r1
 432:	0a c0       	rjmp	.+20     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 434:	82 e2       	ldi	r24, 0x22	; 34
 436:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 43a:	88 23       	and	r24, r24
 43c:	d9 f3       	breq	.-10     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	81 e2       	ldi	r24, 0x21	; 33
 442:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 446:	c3 e4       	ldi	r28, 0x43	; 67
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][1];}}
 448:	83 e2       	ldi	r24, 0x23	; 35
 44a:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 44e:	81 11       	cpse	r24, r1
 450:	18 c0       	rjmp	.+48     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 452:	2f ef       	ldi	r18, 0xFF	; 255
 454:	86 e7       	ldi	r24, 0x76	; 118
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	21 50       	subi	r18, 0x01	; 1
 45a:	80 40       	sbci	r24, 0x00	; 0
 45c:	90 40       	sbci	r25, 0x00	; 0
 45e:	e1 f7       	brne	.-8      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 460:	00 c0       	rjmp	.+0      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 462:	00 00       	nop
 464:	83 e2       	ldi	r24, 0x23	; 35
 466:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 46a:	81 11       	cpse	r24, r1
 46c:	0a c0       	rjmp	.+20     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 46e:	83 e2       	ldi	r24, 0x23	; 35
 470:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 474:	88 23       	and	r24, r24
 476:	d9 f3       	breq	.-10     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	81 e2       	ldi	r24, 0x21	; 33
 47c:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 480:	c0 e3       	ldi	r28, 0x30	; 48
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][2];}}
 482:	84 e2       	ldi	r24, 0x24	; 36
 484:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 488:	81 11       	cpse	r24, r1
 48a:	18 c0       	rjmp	.+48     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 48c:	2f ef       	ldi	r18, 0xFF	; 255
 48e:	86 e7       	ldi	r24, 0x76	; 118
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	21 50       	subi	r18, 0x01	; 1
 494:	80 40       	sbci	r24, 0x00	; 0
 496:	90 40       	sbci	r25, 0x00	; 0
 498:	e1 f7       	brne	.-8      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 49c:	00 00       	nop
 49e:	84 e2       	ldi	r24, 0x24	; 36
 4a0:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 4a4:	81 11       	cpse	r24, r1
 4a6:	0a c0       	rjmp	.+20     	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4a8:	84 e2       	ldi	r24, 0x24	; 36
 4aa:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 4ae:	88 23       	and	r24, r24
 4b0:	d9 f3       	breq	.-10     	; 0x4a8 <__EEPROM_REGION_LENGTH__+0xa8>
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	81 e2       	ldi	r24, 0x21	; 33
 4b6:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 4ba:	cd e3       	ldi	r28, 0x3D	; 61
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][3];}}
 4bc:	85 e2       	ldi	r24, 0x25	; 37
 4be:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 4c2:	81 11       	cpse	r24, r1
 4c4:	18 c0       	rjmp	.+48     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4c6:	2f ef       	ldi	r18, 0xFF	; 255
 4c8:	86 e7       	ldi	r24, 0x76	; 118
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	21 50       	subi	r18, 0x01	; 1
 4ce:	80 40       	sbci	r24, 0x00	; 0
 4d0:	90 40       	sbci	r25, 0x00	; 0
 4d2:	e1 f7       	brne	.-8      	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d6:	00 00       	nop
 4d8:	85 e2       	ldi	r24, 0x25	; 37
 4da:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 4de:	81 11       	cpse	r24, r1
 4e0:	0a c0       	rjmp	.+20     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4e2:	85 e2       	ldi	r24, 0x25	; 37
 4e4:	0e 94 3e 04 	call	0x87c	; 0x87c <M_Dio_PinRead>
 4e8:	88 23       	and	r24, r24
 4ea:	d9 f3       	breq	.-10     	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
 4ec:	61 e0       	ldi	r22, 0x01	; 1
 4ee:	81 e2       	ldi	r24, 0x21	; 33
 4f0:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 4f4:	cb e2       	ldi	r28, 0x2B	; 43
	
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
 4f6:	61 e0       	ldi	r22, 0x01	; 1
 4f8:	81 e2       	ldi	r24, 0x21	; 33
 4fa:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	
	return Local_u8_KeypadReading ;
 4fe:	8c 2f       	mov	r24, r28
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <H_Lcd_WriteCharacter>:
	
}


void H_Lcd_WriteCharacter	(u8 Local_u8_Character)
{
 504:	cf 93       	push	r28
 506:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	8b e0       	ldi	r24, 0x0B	; 11
 50c:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	#elif		LCD_MODE	==	_4_BIT_MODE
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character & 0XF0);	
 510:	8b b3       	in	r24, 0x1b	; 27
 512:	8f 70       	andi	r24, 0x0F	; 15
 514:	9c 2f       	mov	r25, r28
 516:	90 7f       	andi	r25, 0xF0	; 240
 518:	89 2b       	or	r24, r25
 51a:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	8d e0       	ldi	r24, 0x0D	; 13
 520:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 524:	8f e9       	ldi	r24, 0x9F	; 159
 526:	9f e0       	ldi	r25, 0x0F	; 15
 528:	01 97       	sbiw	r24, 0x01	; 1
 52a:	f1 f7       	brne	.-4      	; 0x528 <H_Lcd_WriteCharacter+0x24>
 52c:	00 c0       	rjmp	.+0      	; 0x52e <H_Lcd_WriteCharacter+0x2a>
 52e:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	8d e0       	ldi	r24, 0x0D	; 13
 534:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character << 4);
 538:	2b b3       	in	r18, 0x1b	; 27
 53a:	30 e1       	ldi	r19, 0x10	; 16
 53c:	c3 9f       	mul	r28, r19
 53e:	c0 01       	movw	r24, r0
 540:	11 24       	eor	r1, r1
 542:	92 2f       	mov	r25, r18
 544:	9f 70       	andi	r25, 0x0F	; 15
 546:	89 2b       	or	r24, r25
 548:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	8d e0       	ldi	r24, 0x0D	; 13
 54e:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 552:	8f e9       	ldi	r24, 0x9F	; 159
 554:	9f e0       	ldi	r25, 0x0F	; 15
 556:	01 97       	sbiw	r24, 0x01	; 1
 558:	f1 f7       	brne	.-4      	; 0x556 <H_Lcd_WriteCharacter+0x52>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <H_Lcd_WriteCharacter+0x58>
 55c:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 55e:	60 e0       	ldi	r22, 0x00	; 0
 560:	8d e0       	ldi	r24, 0x0D	; 13
 562:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	#endif 

	
}
 566:	cf 91       	pop	r28
 568:	08 95       	ret

0000056a <H_Lcd_WriteCommand>:

void H_Lcd_WriteCommand		(u8 Local_u8_Command)
{
 56a:	cf 93       	push	r28
 56c:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	8b e0       	ldi	r24, 0x0B	; 11
 572:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	
	#elif		LCD_MODE	==	_4_BIT_MODE
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command & 0XF0);
 576:	8b b3       	in	r24, 0x1b	; 27
 578:	8f 70       	andi	r24, 0x0F	; 15
 57a:	9c 2f       	mov	r25, r28
 57c:	90 7f       	andi	r25, 0xF0	; 240
 57e:	89 2b       	or	r24, r25
 580:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	8d e0       	ldi	r24, 0x0D	; 13
 586:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 58a:	8f e9       	ldi	r24, 0x9F	; 159
 58c:	9f e0       	ldi	r25, 0x0F	; 15
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	f1 f7       	brne	.-4      	; 0x58e <H_Lcd_WriteCommand+0x24>
 592:	00 c0       	rjmp	.+0      	; 0x594 <H_Lcd_WriteCommand+0x2a>
 594:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 596:	60 e0       	ldi	r22, 0x00	; 0
 598:	8d e0       	ldi	r24, 0x0D	; 13
 59a:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 59e:	8f e1       	ldi	r24, 0x1F	; 31
 5a0:	9e e4       	ldi	r25, 0x4E	; 78
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <H_Lcd_WriteCommand+0x38>
 5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <H_Lcd_WriteCommand+0x3e>
 5a8:	00 00       	nop
	_delay_ms(5);

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command << 4);
 5aa:	2b b3       	in	r18, 0x1b	; 27
 5ac:	30 e1       	ldi	r19, 0x10	; 16
 5ae:	c3 9f       	mul	r28, r19
 5b0:	c0 01       	movw	r24, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	92 2f       	mov	r25, r18
 5b6:	9f 70       	andi	r25, 0x0F	; 15
 5b8:	89 2b       	or	r24, r25
 5ba:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	8d e0       	ldi	r24, 0x0D	; 13
 5c0:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 5c4:	8f e9       	ldi	r24, 0x9F	; 159
 5c6:	9f e0       	ldi	r25, 0x0F	; 15
 5c8:	01 97       	sbiw	r24, 0x01	; 1
 5ca:	f1 f7       	brne	.-4      	; 0x5c8 <H_Lcd_WriteCommand+0x5e>
 5cc:	00 c0       	rjmp	.+0      	; 0x5ce <H_Lcd_WriteCommand+0x64>
 5ce:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	8d e0       	ldi	r24, 0x0D	; 13
 5d4:	0e 94 b5 03 	call	0x76a	; 0x76a <M_Dio_PinWrite>
 5d8:	8f e1       	ldi	r24, 0x1F	; 31
 5da:	9e e4       	ldi	r25, 0x4E	; 78
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	f1 f7       	brne	.-4      	; 0x5dc <H_Lcd_WriteCommand+0x72>
 5e0:	00 c0       	rjmp	.+0      	; 0x5e2 <H_Lcd_WriteCommand+0x78>
 5e2:	00 00       	nop
	_delay_ms(5);
	#endif

}
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <H_Lcd_Init>:
	M_Dio_PinMode(LCD_DATA_1_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_2_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_3_PIN,OUTPUT);
	#elif	LCD_MODE	==	_4_BIT_MODE
	#endif
	M_Dio_PinMode(LCD_DATA_4_PIN,OUTPUT);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	8e e0       	ldi	r24, 0x0E	; 14
 5ec:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_5_PIN,OUTPUT);
 5f0:	61 e0       	ldi	r22, 0x01	; 1
 5f2:	8f e0       	ldi	r24, 0x0F	; 15
 5f4:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_6_PIN,OUTPUT);
 5f8:	61 e0       	ldi	r22, 0x01	; 1
 5fa:	80 e1       	ldi	r24, 0x10	; 16
 5fc:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_7_PIN,OUTPUT);
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	81 e1       	ldi	r24, 0x11	; 17
 604:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	8b e0       	ldi	r24, 0x0B	; 11
 60c:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
 610:	61 e0       	ldi	r22, 0x01	; 1
 612:	8c e0       	ldi	r24, 0x0C	; 12
 614:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);	
 618:	61 e0       	ldi	r22, 0x01	; 1
 61a:	8d e0       	ldi	r24, 0x0D	; 13
 61c:	0e 94 2c 03 	call	0x658	; 0x658 <M_Dio_PinMode>
 620:	2f ef       	ldi	r18, 0xFF	; 255
 622:	83 ed       	ldi	r24, 0xD3	; 211
 624:	90 e3       	ldi	r25, 0x30	; 48
 626:	21 50       	subi	r18, 0x01	; 1
 628:	80 40       	sbci	r24, 0x00	; 0
 62a:	90 40       	sbci	r25, 0x00	; 0
 62c:	e1 f7       	brne	.-8      	; 0x626 <H_Lcd_Init+0x3e>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <H_Lcd_Init+0x48>
 630:	00 00       	nop
	_delay_ms(1000);
	
	#if			LCD_MODE	==	_8_BIT_MODE	
	H_Lcd_WriteCommand(LCD_CMD_SELECT_8_BIT_MODE);				// to select 8 bit mode
	#elif		LCD_MODE	==	_4_BIT_MODE	
	H_Lcd_WriteCommand(0X33);
 632:	83 e3       	ldi	r24, 0x33	; 51
 634:	0e 94 b5 02 	call	0x56a	; 0x56a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0X32);
 638:	82 e3       	ldi	r24, 0x32	; 50
 63a:	0e 94 b5 02 	call	0x56a	; 0x56a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_SELECT_4_BIT_MODE);				// to select 4 bit mode
 63e:	88 e2       	ldi	r24, 0x28	; 40
 640:	0e 94 b5 02 	call	0x56a	; 0x56a <H_Lcd_WriteCommand>
	#endif		
	H_Lcd_WriteCommand(LCD_CMD_DISPLAY_ON_CURSOR_OFF);			// to Display ON, cursor OFF
 644:	8c e0       	ldi	r24, 0x0C	; 12
 646:	0e 94 b5 02 	call	0x56a	; 0x56a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);							// to clear LCD
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	0e 94 b5 02 	call	0x56a	; 0x56a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_RETURN_HOME);					// to return home
 650:	82 e0       	ldi	r24, 0x02	; 2
 652:	0e 94 b5 02 	call	0x56a	; 0x56a <H_Lcd_WriteCommand>
 656:	08 95       	ret

00000658 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin);		break;
		case 2: TogBit(PORTB,Local_u8_Pin);		break;
		case 3: TogBit(PORTC,Local_u8_Pin);		break;
		case 4: TogBit(PORTD,Local_u8_Pin);		break;
 658:	9d ec       	ldi	r25, 0xCD	; 205
 65a:	89 9f       	mul	r24, r25
 65c:	91 2d       	mov	r25, r1
 65e:	11 24       	eor	r1, r1
 660:	29 2f       	mov	r18, r25
 662:	26 95       	lsr	r18
 664:	26 95       	lsr	r18
 666:	26 95       	lsr	r18
 668:	22 0f       	add	r18, r18
 66a:	32 2f       	mov	r19, r18
 66c:	33 0f       	add	r19, r19
 66e:	33 0f       	add	r19, r19
 670:	23 0f       	add	r18, r19
 672:	82 1b       	sub	r24, r18
 674:	28 2f       	mov	r18, r24
 676:	96 95       	lsr	r25
 678:	96 95       	lsr	r25
 67a:	96 95       	lsr	r25
 67c:	66 23       	and	r22, r22
 67e:	19 f0       	breq	.+6      	; 0x686 <M_Dio_PinMode+0x2e>
 680:	61 30       	cpi	r22, 0x01	; 1
 682:	e1 f1       	breq	.+120    	; 0x6fc <M_Dio_PinMode+0xa4>
 684:	08 95       	ret
 686:	92 30       	cpi	r25, 0x02	; 2
 688:	a9 f0       	breq	.+42     	; 0x6b4 <M_Dio_PinMode+0x5c>
 68a:	18 f4       	brcc	.+6      	; 0x692 <M_Dio_PinMode+0x3a>
 68c:	91 30       	cpi	r25, 0x01	; 1
 68e:	31 f0       	breq	.+12     	; 0x69c <M_Dio_PinMode+0x44>
 690:	08 95       	ret
 692:	93 30       	cpi	r25, 0x03	; 3
 694:	d9 f0       	breq	.+54     	; 0x6cc <M_Dio_PinMode+0x74>
 696:	94 30       	cpi	r25, 0x04	; 4
 698:	29 f1       	breq	.+74     	; 0x6e4 <M_Dio_PinMode+0x8c>
 69a:	08 95       	ret
 69c:	3a b3       	in	r19, 0x1a	; 26
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
 6a2:	02 c0       	rjmp	.+4      	; 0x6a8 <M_Dio_PinMode+0x50>
 6a4:	88 0f       	add	r24, r24
 6a6:	99 1f       	adc	r25, r25
 6a8:	2a 95       	dec	r18
 6aa:	e2 f7       	brpl	.-8      	; 0x6a4 <M_Dio_PinMode+0x4c>
 6ac:	80 95       	com	r24
 6ae:	83 23       	and	r24, r19
 6b0:	8a bb       	out	0x1a, r24	; 26
 6b2:	08 95       	ret
 6b4:	37 b3       	in	r19, 0x17	; 23
 6b6:	81 e0       	ldi	r24, 0x01	; 1
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	02 c0       	rjmp	.+4      	; 0x6c0 <M_Dio_PinMode+0x68>
 6bc:	88 0f       	add	r24, r24
 6be:	99 1f       	adc	r25, r25
 6c0:	2a 95       	dec	r18
 6c2:	e2 f7       	brpl	.-8      	; 0x6bc <M_Dio_PinMode+0x64>
 6c4:	80 95       	com	r24
 6c6:	83 23       	and	r24, r19
 6c8:	87 bb       	out	0x17, r24	; 23
 6ca:	08 95       	ret
 6cc:	34 b3       	in	r19, 0x14	; 20
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <M_Dio_PinMode+0x80>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	2a 95       	dec	r18
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <M_Dio_PinMode+0x7c>
 6dc:	80 95       	com	r24
 6de:	83 23       	and	r24, r19
 6e0:	84 bb       	out	0x14, r24	; 20
 6e2:	08 95       	ret
 6e4:	31 b3       	in	r19, 0x11	; 17
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <M_Dio_PinMode+0x98>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	2a 95       	dec	r18
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <M_Dio_PinMode+0x94>
 6f4:	80 95       	com	r24
 6f6:	83 23       	and	r24, r19
 6f8:	81 bb       	out	0x11, r24	; 17
 6fa:	08 95       	ret
 6fc:	92 30       	cpi	r25, 0x02	; 2
 6fe:	a1 f0       	breq	.+40     	; 0x728 <M_Dio_PinMode+0xd0>
 700:	18 f4       	brcc	.+6      	; 0x708 <M_Dio_PinMode+0xb0>
 702:	91 30       	cpi	r25, 0x01	; 1
 704:	31 f0       	breq	.+12     	; 0x712 <M_Dio_PinMode+0xba>
 706:	08 95       	ret
 708:	93 30       	cpi	r25, 0x03	; 3
 70a:	c9 f0       	breq	.+50     	; 0x73e <M_Dio_PinMode+0xe6>
 70c:	94 30       	cpi	r25, 0x04	; 4
 70e:	11 f1       	breq	.+68     	; 0x754 <M_Dio_PinMode+0xfc>
 710:	08 95       	ret
 712:	3a b3       	in	r19, 0x1a	; 26
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	02 c0       	rjmp	.+4      	; 0x71e <M_Dio_PinMode+0xc6>
 71a:	88 0f       	add	r24, r24
 71c:	99 1f       	adc	r25, r25
 71e:	2a 95       	dec	r18
 720:	e2 f7       	brpl	.-8      	; 0x71a <M_Dio_PinMode+0xc2>
 722:	83 2b       	or	r24, r19
 724:	8a bb       	out	0x1a, r24	; 26
 726:	08 95       	ret
 728:	37 b3       	in	r19, 0x17	; 23
 72a:	81 e0       	ldi	r24, 0x01	; 1
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <M_Dio_PinMode+0xdc>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	2a 95       	dec	r18
 736:	e2 f7       	brpl	.-8      	; 0x730 <M_Dio_PinMode+0xd8>
 738:	83 2b       	or	r24, r19
 73a:	87 bb       	out	0x17, r24	; 23
 73c:	08 95       	ret
 73e:	34 b3       	in	r19, 0x14	; 20
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	02 c0       	rjmp	.+4      	; 0x74a <M_Dio_PinMode+0xf2>
 746:	88 0f       	add	r24, r24
 748:	99 1f       	adc	r25, r25
 74a:	2a 95       	dec	r18
 74c:	e2 f7       	brpl	.-8      	; 0x746 <M_Dio_PinMode+0xee>
 74e:	83 2b       	or	r24, r19
 750:	84 bb       	out	0x14, r24	; 20
 752:	08 95       	ret
 754:	31 b3       	in	r19, 0x11	; 17
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <M_Dio_PinMode+0x108>
 75c:	88 0f       	add	r24, r24
 75e:	99 1f       	adc	r25, r25
 760:	2a 95       	dec	r18
 762:	e2 f7       	brpl	.-8      	; 0x75c <M_Dio_PinMode+0x104>
 764:	83 2b       	or	r24, r19
 766:	81 bb       	out	0x11, r24	; 17
 768:	08 95       	ret

0000076a <M_Dio_PinWrite>:
 76a:	9d ec       	ldi	r25, 0xCD	; 205
 76c:	89 9f       	mul	r24, r25
 76e:	91 2d       	mov	r25, r1
 770:	11 24       	eor	r1, r1
 772:	29 2f       	mov	r18, r25
 774:	26 95       	lsr	r18
 776:	26 95       	lsr	r18
 778:	26 95       	lsr	r18
 77a:	22 0f       	add	r18, r18
 77c:	32 2f       	mov	r19, r18
 77e:	33 0f       	add	r19, r19
 780:	33 0f       	add	r19, r19
 782:	23 0f       	add	r18, r19
 784:	82 1b       	sub	r24, r18
 786:	28 2f       	mov	r18, r24
 788:	96 95       	lsr	r25
 78a:	96 95       	lsr	r25
 78c:	96 95       	lsr	r25
 78e:	66 23       	and	r22, r22
 790:	19 f0       	breq	.+6      	; 0x798 <M_Dio_PinWrite+0x2e>
 792:	61 30       	cpi	r22, 0x01	; 1
 794:	e1 f1       	breq	.+120    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 796:	08 95       	ret
 798:	92 30       	cpi	r25, 0x02	; 2
 79a:	a9 f0       	breq	.+42     	; 0x7c6 <M_Dio_PinWrite+0x5c>
 79c:	18 f4       	brcc	.+6      	; 0x7a4 <M_Dio_PinWrite+0x3a>
 79e:	91 30       	cpi	r25, 0x01	; 1
 7a0:	31 f0       	breq	.+12     	; 0x7ae <M_Dio_PinWrite+0x44>
 7a2:	08 95       	ret
 7a4:	93 30       	cpi	r25, 0x03	; 3
 7a6:	d9 f0       	breq	.+54     	; 0x7de <M_Dio_PinWrite+0x74>
 7a8:	94 30       	cpi	r25, 0x04	; 4
 7aa:	29 f1       	breq	.+74     	; 0x7f6 <M_Dio_PinWrite+0x8c>
 7ac:	08 95       	ret
 7ae:	3b b3       	in	r19, 0x1b	; 27
 7b0:	81 e0       	ldi	r24, 0x01	; 1
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	02 c0       	rjmp	.+4      	; 0x7ba <M_Dio_PinWrite+0x50>
 7b6:	88 0f       	add	r24, r24
 7b8:	99 1f       	adc	r25, r25
 7ba:	2a 95       	dec	r18
 7bc:	e2 f7       	brpl	.-8      	; 0x7b6 <M_Dio_PinWrite+0x4c>
 7be:	80 95       	com	r24
 7c0:	83 23       	and	r24, r19
 7c2:	8b bb       	out	0x1b, r24	; 27
 7c4:	08 95       	ret
 7c6:	38 b3       	in	r19, 0x18	; 24
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <M_Dio_PinWrite+0x68>
 7ce:	88 0f       	add	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	2a 95       	dec	r18
 7d4:	e2 f7       	brpl	.-8      	; 0x7ce <M_Dio_PinWrite+0x64>
 7d6:	80 95       	com	r24
 7d8:	83 23       	and	r24, r19
 7da:	88 bb       	out	0x18, r24	; 24
 7dc:	08 95       	ret
 7de:	35 b3       	in	r19, 0x15	; 21
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <M_Dio_PinWrite+0x80>
 7e6:	88 0f       	add	r24, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	2a 95       	dec	r18
 7ec:	e2 f7       	brpl	.-8      	; 0x7e6 <M_Dio_PinWrite+0x7c>
 7ee:	80 95       	com	r24
 7f0:	83 23       	and	r24, r19
 7f2:	85 bb       	out	0x15, r24	; 21
 7f4:	08 95       	ret
 7f6:	32 b3       	in	r19, 0x12	; 18
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7fe:	88 0f       	add	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	2a 95       	dec	r18
 804:	e2 f7       	brpl	.-8      	; 0x7fe <M_Dio_PinWrite+0x94>
 806:	80 95       	com	r24
 808:	83 23       	and	r24, r19
 80a:	82 bb       	out	0x12, r24	; 18
 80c:	08 95       	ret
 80e:	92 30       	cpi	r25, 0x02	; 2
 810:	a1 f0       	breq	.+40     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 812:	18 f4       	brcc	.+6      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 814:	91 30       	cpi	r25, 0x01	; 1
 816:	31 f0       	breq	.+12     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 818:	08 95       	ret
 81a:	93 30       	cpi	r25, 0x03	; 3
 81c:	c9 f0       	breq	.+50     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 81e:	94 30       	cpi	r25, 0x04	; 4
 820:	11 f1       	breq	.+68     	; 0x866 <__stack+0x7>
 822:	08 95       	ret
 824:	3b b3       	in	r19, 0x1b	; 27
 826:	81 e0       	ldi	r24, 0x01	; 1
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 82c:	88 0f       	add	r24, r24
 82e:	99 1f       	adc	r25, r25
 830:	2a 95       	dec	r18
 832:	e2 f7       	brpl	.-8      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 834:	83 2b       	or	r24, r19
 836:	8b bb       	out	0x1b, r24	; 27
 838:	08 95       	ret
 83a:	38 b3       	in	r19, 0x18	; 24
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	2a 95       	dec	r18
 848:	e2 f7       	brpl	.-8      	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 84a:	83 2b       	or	r24, r19
 84c:	88 bb       	out	0x18, r24	; 24
 84e:	08 95       	ret
 850:	35 b3       	in	r19, 0x15	; 21
 852:	81 e0       	ldi	r24, 0x01	; 1
 854:	90 e0       	ldi	r25, 0x00	; 0
 856:	02 c0       	rjmp	.+4      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 858:	88 0f       	add	r24, r24
 85a:	99 1f       	adc	r25, r25
 85c:	2a 95       	dec	r18
 85e:	e2 f7       	brpl	.-8      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 860:	83 2b       	or	r24, r19
 862:	85 bb       	out	0x15, r24	; 21
 864:	08 95       	ret
 866:	32 b3       	in	r19, 0x12	; 18
 868:	81 e0       	ldi	r24, 0x01	; 1
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <__stack+0x13>
 86e:	88 0f       	add	r24, r24
 870:	99 1f       	adc	r25, r25
 872:	2a 95       	dec	r18
 874:	e2 f7       	brpl	.-8      	; 0x86e <__stack+0xf>
 876:	83 2b       	or	r24, r19
 878:	82 bb       	out	0x12, r24	; 18
 87a:	08 95       	ret

0000087c <M_Dio_PinRead>:
	
}

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
 87c:	9d ec       	ldi	r25, 0xCD	; 205
 87e:	89 9f       	mul	r24, r25
 880:	91 2d       	mov	r25, r1
 882:	11 24       	eor	r1, r1
 884:	29 2f       	mov	r18, r25
 886:	26 95       	lsr	r18
 888:	26 95       	lsr	r18
 88a:	26 95       	lsr	r18
 88c:	22 0f       	add	r18, r18
 88e:	32 2f       	mov	r19, r18
 890:	33 0f       	add	r19, r19
 892:	33 0f       	add	r19, r19
 894:	23 0f       	add	r18, r19
 896:	82 1b       	sub	r24, r18
 898:	28 2f       	mov	r18, r24
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
 89a:	89 2f       	mov	r24, r25
 89c:	86 95       	lsr	r24
 89e:	86 95       	lsr	r24
 8a0:	86 95       	lsr	r24
	u8 Local_u8_Pin_Value	=	0;
	
	switch(Local_u8_Port)
 8a2:	82 30       	cpi	r24, 0x02	; 2
 8a4:	91 f0       	breq	.+36     	; 0x8ca <M_Dio_PinRead+0x4e>
 8a6:	18 f4       	brcc	.+6      	; 0x8ae <M_Dio_PinRead+0x32>
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	31 f0       	breq	.+12     	; 0x8b8 <M_Dio_PinRead+0x3c>
 8ac:	29 c0       	rjmp	.+82     	; 0x900 <M_Dio_PinRead+0x84>
 8ae:	83 30       	cpi	r24, 0x03	; 3
 8b0:	a9 f0       	breq	.+42     	; 0x8dc <M_Dio_PinRead+0x60>
 8b2:	84 30       	cpi	r24, 0x04	; 4
 8b4:	e1 f0       	breq	.+56     	; 0x8ee <M_Dio_PinRead+0x72>
 8b6:	24 c0       	rjmp	.+72     	; 0x900 <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_Pin_Value = GetBit(PINA,Local_u8_Pin);		break;
 8b8:	89 b3       	in	r24, 0x19	; 25
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	02 c0       	rjmp	.+4      	; 0x8c2 <M_Dio_PinRead+0x46>
 8be:	95 95       	asr	r25
 8c0:	87 95       	ror	r24
 8c2:	2a 95       	dec	r18
 8c4:	e2 f7       	brpl	.-8      	; 0x8be <M_Dio_PinRead+0x42>
 8c6:	81 70       	andi	r24, 0x01	; 1
 8c8:	08 95       	ret
		case 2: Local_u8_Pin_Value = GetBit(PINB,Local_u8_Pin);		break;
 8ca:	86 b3       	in	r24, 0x16	; 22
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <M_Dio_PinRead+0x58>
 8d0:	95 95       	asr	r25
 8d2:	87 95       	ror	r24
 8d4:	2a 95       	dec	r18
 8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <M_Dio_PinRead+0x54>
 8d8:	81 70       	andi	r24, 0x01	; 1
 8da:	08 95       	ret
		case 3: Local_u8_Pin_Value = GetBit(PINC,Local_u8_Pin);		break;
 8dc:	83 b3       	in	r24, 0x13	; 19
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <M_Dio_PinRead+0x6a>
 8e2:	95 95       	asr	r25
 8e4:	87 95       	ror	r24
 8e6:	2a 95       	dec	r18
 8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <M_Dio_PinRead+0x66>
 8ea:	81 70       	andi	r24, 0x01	; 1
 8ec:	08 95       	ret
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
 8ee:	80 b3       	in	r24, 0x10	; 16
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <M_Dio_PinRead+0x7c>
 8f4:	95 95       	asr	r25
 8f6:	87 95       	ror	r24
 8f8:	2a 95       	dec	r18
 8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <M_Dio_PinRead+0x78>
 8fc:	81 70       	andi	r24, 0x01	; 1
 8fe:	08 95       	ret

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
	u8 Local_u8_Pin_Value	=	0;
 900:	80 e0       	ldi	r24, 0x00	; 0
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
		default:								break;
	}
	
	return Local_u8_Pin_Value;
}
 902:	08 95       	ret

00000904 <M_Dio_PinPullUp>:

void M_Dio_PinPullUp	(u8 Local_u8_PinNumber, u8 Local_u8_PullUpState)
{
	u8 Local_u8_Pin		=	Local_u8_PinNumber % 10;
 904:	9d ec       	ldi	r25, 0xCD	; 205
 906:	89 9f       	mul	r24, r25
 908:	91 2d       	mov	r25, r1
 90a:	11 24       	eor	r1, r1
 90c:	29 2f       	mov	r18, r25
 90e:	26 95       	lsr	r18
 910:	26 95       	lsr	r18
 912:	26 95       	lsr	r18
 914:	22 0f       	add	r18, r18
 916:	32 2f       	mov	r19, r18
 918:	33 0f       	add	r19, r19
 91a:	33 0f       	add	r19, r19
 91c:	23 0f       	add	r18, r19
 91e:	82 1b       	sub	r24, r18
 920:	28 2f       	mov	r18, r24
	u8 Local_u8_Port	=	Local_u8_PinNumber / 10;
 922:	96 95       	lsr	r25
 924:	96 95       	lsr	r25
 926:	96 95       	lsr	r25
	switch(Local_u8_PullUpState)
 928:	66 23       	and	r22, r22
 92a:	f1 f1       	breq	.+124    	; 0x9a8 <M_Dio_PinPullUp+0xa4>
 92c:	61 30       	cpi	r22, 0x01	; 1
 92e:	09 f0       	breq	.+2      	; 0x932 <M_Dio_PinPullUp+0x2e>
 930:	71 c0       	rjmp	.+226    	; 0xa14 <M_Dio_PinPullUp+0x110>
	{
		case PULLUP_DISABLE:
		switch(Local_u8_Port)
 932:	92 30       	cpi	r25, 0x02	; 2
 934:	a9 f0       	breq	.+42     	; 0x960 <M_Dio_PinPullUp+0x5c>
 936:	18 f4       	brcc	.+6      	; 0x93e <M_Dio_PinPullUp+0x3a>
 938:	91 30       	cpi	r25, 0x01	; 1
 93a:	31 f0       	breq	.+12     	; 0x948 <M_Dio_PinPullUp+0x44>
 93c:	08 95       	ret
 93e:	93 30       	cpi	r25, 0x03	; 3
 940:	d9 f0       	breq	.+54     	; 0x978 <M_Dio_PinPullUp+0x74>
 942:	94 30       	cpi	r25, 0x04	; 4
 944:	29 f1       	breq	.+74     	; 0x990 <M_Dio_PinPullUp+0x8c>
 946:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin);		break;
 948:	3b b3       	in	r19, 0x1b	; 27
 94a:	81 e0       	ldi	r24, 0x01	; 1
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <M_Dio_PinPullUp+0x50>
 950:	88 0f       	add	r24, r24
 952:	99 1f       	adc	r25, r25
 954:	2a 95       	dec	r18
 956:	e2 f7       	brpl	.-8      	; 0x950 <M_Dio_PinPullUp+0x4c>
 958:	80 95       	com	r24
 95a:	83 23       	and	r24, r19
 95c:	8b bb       	out	0x1b, r24	; 27
 95e:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin);		break;
 960:	38 b3       	in	r19, 0x18	; 24
 962:	81 e0       	ldi	r24, 0x01	; 1
 964:	90 e0       	ldi	r25, 0x00	; 0
 966:	02 c0       	rjmp	.+4      	; 0x96c <M_Dio_PinPullUp+0x68>
 968:	88 0f       	add	r24, r24
 96a:	99 1f       	adc	r25, r25
 96c:	2a 95       	dec	r18
 96e:	e2 f7       	brpl	.-8      	; 0x968 <M_Dio_PinPullUp+0x64>
 970:	80 95       	com	r24
 972:	83 23       	and	r24, r19
 974:	88 bb       	out	0x18, r24	; 24
 976:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin);		break;
 978:	35 b3       	in	r19, 0x15	; 21
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	02 c0       	rjmp	.+4      	; 0x984 <M_Dio_PinPullUp+0x80>
 980:	88 0f       	add	r24, r24
 982:	99 1f       	adc	r25, r25
 984:	2a 95       	dec	r18
 986:	e2 f7       	brpl	.-8      	; 0x980 <M_Dio_PinPullUp+0x7c>
 988:	80 95       	com	r24
 98a:	83 23       	and	r24, r19
 98c:	85 bb       	out	0x15, r24	; 21
 98e:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin);		break;
 990:	32 b3       	in	r19, 0x12	; 18
 992:	81 e0       	ldi	r24, 0x01	; 1
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	02 c0       	rjmp	.+4      	; 0x99c <M_Dio_PinPullUp+0x98>
 998:	88 0f       	add	r24, r24
 99a:	99 1f       	adc	r25, r25
 99c:	2a 95       	dec	r18
 99e:	e2 f7       	brpl	.-8      	; 0x998 <M_Dio_PinPullUp+0x94>
 9a0:	80 95       	com	r24
 9a2:	83 23       	and	r24, r19
 9a4:	82 bb       	out	0x12, r24	; 18
 9a6:	08 95       	ret
			default:								break;
		}
		break;
		
		case PULLUP_ENABLE:
		switch(Local_u8_Port)
 9a8:	92 30       	cpi	r25, 0x02	; 2
 9aa:	a1 f0       	breq	.+40     	; 0x9d4 <M_Dio_PinPullUp+0xd0>
 9ac:	18 f4       	brcc	.+6      	; 0x9b4 <M_Dio_PinPullUp+0xb0>
 9ae:	91 30       	cpi	r25, 0x01	; 1
 9b0:	31 f0       	breq	.+12     	; 0x9be <M_Dio_PinPullUp+0xba>
 9b2:	08 95       	ret
 9b4:	93 30       	cpi	r25, 0x03	; 3
 9b6:	c9 f0       	breq	.+50     	; 0x9ea <M_Dio_PinPullUp+0xe6>
 9b8:	94 30       	cpi	r25, 0x04	; 4
 9ba:	11 f1       	breq	.+68     	; 0xa00 <M_Dio_PinPullUp+0xfc>
 9bc:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin);		break;
 9be:	3b b3       	in	r19, 0x1b	; 27
 9c0:	81 e0       	ldi	r24, 0x01	; 1
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <M_Dio_PinPullUp+0xc6>
 9c6:	88 0f       	add	r24, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	2a 95       	dec	r18
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <M_Dio_PinPullUp+0xc2>
 9ce:	83 2b       	or	r24, r19
 9d0:	8b bb       	out	0x1b, r24	; 27
 9d2:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin);		break;
 9d4:	38 b3       	in	r19, 0x18	; 24
 9d6:	81 e0       	ldi	r24, 0x01	; 1
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	02 c0       	rjmp	.+4      	; 0x9e0 <M_Dio_PinPullUp+0xdc>
 9dc:	88 0f       	add	r24, r24
 9de:	99 1f       	adc	r25, r25
 9e0:	2a 95       	dec	r18
 9e2:	e2 f7       	brpl	.-8      	; 0x9dc <M_Dio_PinPullUp+0xd8>
 9e4:	83 2b       	or	r24, r19
 9e6:	88 bb       	out	0x18, r24	; 24
 9e8:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin);		break;
 9ea:	35 b3       	in	r19, 0x15	; 21
 9ec:	81 e0       	ldi	r24, 0x01	; 1
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	02 c0       	rjmp	.+4      	; 0x9f6 <M_Dio_PinPullUp+0xf2>
 9f2:	88 0f       	add	r24, r24
 9f4:	99 1f       	adc	r25, r25
 9f6:	2a 95       	dec	r18
 9f8:	e2 f7       	brpl	.-8      	; 0x9f2 <M_Dio_PinPullUp+0xee>
 9fa:	83 2b       	or	r24, r19
 9fc:	85 bb       	out	0x15, r24	; 21
 9fe:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin);		break;
 a00:	32 b3       	in	r19, 0x12	; 18
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	02 c0       	rjmp	.+4      	; 0xa0c <M_Dio_PinPullUp+0x108>
 a08:	88 0f       	add	r24, r24
 a0a:	99 1f       	adc	r25, r25
 a0c:	2a 95       	dec	r18
 a0e:	e2 f7       	brpl	.-8      	; 0xa08 <M_Dio_PinPullUp+0x104>
 a10:	83 2b       	or	r24, r19
 a12:	82 bb       	out	0x12, r24	; 18
 a14:	08 95       	ret

00000a16 <_exit>:
 a16:	f8 94       	cli

00000a18 <__stop_program>:
 a18:	ff cf       	rjmp	.-2      	; 0xa18 <__stop_program>
