
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e66  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00800060  00001e66  00001efa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800164  00800164  00001ffe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001ffe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002030  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000428  00000000  00000000  0000206c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004516  00000000  00000000  00002494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001514  00000000  00000000  000069aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000022cb  00000000  00000000  00007ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008ec  00000000  00000000  0000a18c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e32  00000000  00000000  0000aa78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000027fe  00000000  00000000  0000b8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  0000e0a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e6       	ldi	r30, 0x66	; 102
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 36       	cpi	r26, 0x67	; 103
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 78 04 	call	0x8f0	; 0x8f0 <main>
      8a:	0c 94 31 0f 	jmp	0x1e62	; 0x1e62 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BreakDownMode>:
		H_Lcd_WriteString("Door Opened");
	}
}

void Relay_Switch()
{
      92:	0e 94 94 04 	call	0x928	; 0x928 <H_Buzzer_Init>
      96:	0e 94 99 04 	call	0x932	; 0x932 <H_Buzzer_On>
      9a:	ff cf       	rjmp	.-2      	; 0x9a <BreakDownMode+0x8>

0000009c <AC_Switch>:
      9c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <__data_end>
      a0:	81 11       	cpse	r24, r1
      a2:	23 c0       	rjmp	.+70     	; 0xea <AC_Switch+0x4e>
      a4:	0e 94 a9 04 	call	0x952	; 0x952 <H_DcMotor_SetDirection>
      a8:	0e 94 f2 08 	call	0x11e4	; 0x11e4 <H_Lm35_Read>
      ac:	bc 01       	movw	r22, r24
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__floatunsisf>
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	4a ef       	ldi	r20, 0xFA	; 250
      bc:	53 e4       	ldi	r21, 0x43	; 67
      be:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divsf3>
      c2:	20 e0       	ldi	r18, 0x00	; 0
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	48 ec       	ldi	r20, 0xC8	; 200
      c8:	52 e4       	ldi	r21, 0x42	; 66
      ca:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__mulsf3>
      ce:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__fixunssfsi>
      d2:	86 2f       	mov	r24, r22
      d4:	0e 94 b2 04 	call	0x964	; 0x964 <H_DcMotor_SetSpeed>
      d8:	0e 94 b5 04 	call	0x96a	; 0x96a <H_DcMotor_Start>
      dc:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
      e0:	82 e6       	ldi	r24, 0x62	; 98
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
      e8:	df cf       	rjmp	.-66     	; 0xa8 <AC_Switch+0xc>
      ea:	81 30       	cpi	r24, 0x01	; 1
      ec:	41 f4       	brne	.+16     	; 0xfe <AC_Switch+0x62>
      ee:	0e 94 b8 04 	call	0x970	; 0x970 <H_DcMotor_Stop>
      f2:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
      f6:	89 e6       	ldi	r24, 0x69	; 105
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
      fe:	08 95       	ret

00000100 <Door_Switch>:
     100:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Door>
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	71 f4       	brne	.+28     	; 0x124 <Door_Switch+0x24>
     108:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Door>
     10c:	60 e0       	ldi	r22, 0x00	; 0
     10e:	70 e0       	ldi	r23, 0x00	; 0
     110:	cb 01       	movw	r24, r22
     112:	0e 94 0c 09 	call	0x1218	; 0x1218 <H_Servo_SetAngel>
     116:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
     11a:	81 e7       	ldi	r24, 0x71	; 113
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
     122:	08 95       	ret
     124:	81 11       	cpse	r24, r1
     126:	0f c0       	rjmp	.+30     	; 0x146 <Door_Switch+0x46>
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Door>
     12e:	60 e0       	ldi	r22, 0x00	; 0
     130:	70 e0       	ldi	r23, 0x00	; 0
     132:	80 ef       	ldi	r24, 0xF0	; 240
     134:	92 e4       	ldi	r25, 0x42	; 66
     136:	0e 94 0c 09 	call	0x1218	; 0x1218 <H_Servo_SetAngel>
     13a:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
     13e:	8d e7       	ldi	r24, 0x7D	; 125
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
     146:	08 95       	ret

00000148 <User_MainScreen>:
void User_MainScreen()
{
	u8 key;
	while (1)
	{
		key= H_KeyPad_Read();
     148:	0e 94 3a 05 	call	0xa74	; 0xa74 <H_KeyPad_Read>
		if(key!=0)
     14c:	88 23       	and	r24, r24
     14e:	e1 f3       	breq	.-8      	; 0x148 <User_MainScreen>
		{
			switch(key)
     150:	8a 32       	cpi	r24, 0x2A	; 42
     152:	d1 f7       	brne	.-12     	; 0x148 <User_MainScreen>
			{
				case '*':	 AC_Switch();	 break;
     154:	0e 94 4e 00 	call	0x9c	; 0x9c <AC_Switch>
     158:	f7 cf       	rjmp	.-18     	; 0x148 <User_MainScreen>

0000015a <AddUser>:
		}		
	}
}

void AddUser (u8* ID, u8* Password)
{
     15a:	af 92       	push	r10
     15c:	bf 92       	push	r11
     15e:	cf 92       	push	r12
     160:	df 92       	push	r13
     162:	ef 92       	push	r14
     164:	ff 92       	push	r15
     166:	0f 93       	push	r16
     168:	1f 93       	push	r17
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	8c 01       	movw	r16, r24
     170:	7b 01       	movw	r14, r22
	u8 NumberOfUsers = H_Eeprom_Read(0,100);
     172:	64 e6       	ldi	r22, 0x64	; 100
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
     17a:	b8 2e       	mov	r11, r24
	if (NumberOfUsers <10)
     17c:	29 e0       	ldi	r18, 0x09	; 9
     17e:	28 17       	cp	r18, r24
     180:	08 f4       	brcc	.+2      	; 0x184 <AddUser+0x2a>
     182:	b0 c0       	rjmp	.+352    	; 0x2e4 <AddUser+0x18a>
	{
		u8 Counter = 0, UserLocation  = 0; 
	
		if (NumberOfUsers > 0)
     184:	81 11       	cpse	r24, r1
     186:	24 c0       	rjmp	.+72     	; 0x1d0 <AddUser+0x76>
     188:	5f c0       	rjmp	.+190    	; 0x248 <AddUser+0xee>
			u8 WrongEntry = 0;
		
			for (; Counter < NumberOfUsers; Counter++)
			{
				
				UserLocation = (Counter*7);
     18a:	dd 2d       	mov	r29, r13
     18c:	dd 0f       	add	r29, r29
     18e:	dd 0f       	add	r29, r29
     190:	dd 0f       	add	r29, r29
     192:	dd 19       	sub	r29, r13
				u8 Check = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 3;
     194:	0f 2e       	mov	r0, r31
     196:	f3 e0       	ldi	r31, 0x03	; 3
     198:	cf 2e       	mov	r12, r31
     19a:	f0 2d       	mov	r31, r0
     19c:	c0 e0       	ldi	r28, 0x00	; 0
			
				for (; Check < 3; Check++)
     19e:	0d c0       	rjmp	.+26     	; 0x1ba <AddUser+0x60>
				{
					EEPROMDataLocation = UserLocation+Check;
     1a0:	6c 2f       	mov	r22, r28
     1a2:	6d 0f       	add	r22, r29
					EEPROMData = H_Eeprom_Read(0, EEPROMDataLocation);
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
					if (ID[Check] == EEPROMData )
     1aa:	f8 01       	movw	r30, r16
     1ac:	ec 0f       	add	r30, r28
     1ae:	f1 1d       	adc	r31, r1
     1b0:	90 81       	ld	r25, Z
     1b2:	89 13       	cpse	r24, r25
     1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <AddUser+0x5e>
					{
						ValidEntries--;
     1b6:	ca 94       	dec	r12
			{
				
				UserLocation = (Counter*7);
				u8 Check = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 3;
			
				for (; Check < 3; Check++)
     1b8:	cf 5f       	subi	r28, 0xFF	; 255
     1ba:	c3 30       	cpi	r28, 0x03	; 3
     1bc:	88 f3       	brcs	.-30     	; 0x1a0 <AddUser+0x46>
						ValidEntries--;
					}
				
				}
			
				if (ValidEntries == 0)
     1be:	c1 10       	cpse	r12, r1
     1c0:	05 c0       	rjmp	.+10     	; 0x1cc <AddUser+0x72>
				{
					/*print on LCD invalid username*/
					WrongEntry ++;
     1c2:	a3 94       	inc	r10
					H_Lcd_WriteString("Invalid Username");
     1c4:	89 e8       	ldi	r24, 0x89	; 137
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
	
		if (NumberOfUsers > 0)
		{
			u8 WrongEntry = 0;
		
			for (; Counter < NumberOfUsers; Counter++)
     1cc:	d3 94       	inc	r13
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <AddUser+0x7a>
     1d0:	a1 2c       	mov	r10, r1
     1d2:	d1 2c       	mov	r13, r1
     1d4:	db 14       	cp	r13, r11
     1d6:	c8 f2       	brcs	.-78     	; 0x18a <AddUser+0x30>
				
				}
			}
		
		
			if (WrongEntry == 0)
     1d8:	a1 10       	cpse	r10, r1
     1da:	92 c0       	rjmp	.+292    	; 0x300 <AddUser+0x1a6>
			{
				/*print on LCD valid entry*/
				H_Lcd_WriteString("Valid Entry");
     1dc:	8a e9       	ldi	r24, 0x9A	; 154
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	91 ee       	ldi	r25, 0xE1	; 225
     1e8:	24 e0       	ldi	r18, 0x04	; 4
     1ea:	81 50       	subi	r24, 0x01	; 1
     1ec:	90 40       	sbci	r25, 0x00	; 0
     1ee:	20 40       	sbci	r18, 0x00	; 0
     1f0:	e1 f7       	brne	.-8      	; 0x1ea <AddUser+0x90>
     1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <AddUser+0x9a>
     1f4:	00 00       	nop
				_delay_ms(100);
				u8 Check = 0, EEPROMDataLocation = 0;
				UserLocation = NumberOfUsers * 7;
     1f6:	db 2d       	mov	r29, r11
     1f8:	dd 0f       	add	r29, r29
     1fa:	dd 0f       	add	r29, r29
     1fc:	dd 0f       	add	r29, r29
     1fe:	db 19       	sub	r29, r11
			if (WrongEntry == 0)
			{
				/*print on LCD valid entry*/
				H_Lcd_WriteString("Valid Entry");
				_delay_ms(100);
				u8 Check = 0, EEPROMDataLocation = 0;
     200:	c0 e0       	ldi	r28, 0x00	; 0
				UserLocation = NumberOfUsers * 7;
				for (; Check < 3; Check++)
     202:	0a c0       	rjmp	.+20     	; 0x218 <AddUser+0xbe>
				{
					EEPROMDataLocation = UserLocation+Check;
     204:	4c 2f       	mov	r20, r28
     206:	4d 0f       	add	r20, r29
					H_Eeprom_Write(ID[Check],0, EEPROMDataLocation);
     208:	f8 01       	movw	r30, r16
     20a:	ec 0f       	add	r30, r28
     20c:	f1 1d       	adc	r31, r1
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
				/*print on LCD valid entry*/
				H_Lcd_WriteString("Valid Entry");
				_delay_ms(100);
				u8 Check = 0, EEPROMDataLocation = 0;
				UserLocation = NumberOfUsers * 7;
				for (; Check < 3; Check++)
     216:	cf 5f       	subi	r28, 0xFF	; 255
     218:	c3 30       	cpi	r28, 0x03	; 3
     21a:	a0 f3       	brcs	.-24     	; 0x204 <AddUser+0xaa>
     21c:	c0 e0       	ldi	r28, 0x00	; 0
     21e:	0b c0       	rjmp	.+22     	; 0x236 <AddUser+0xdc>
					H_Eeprom_Write(ID[Check],0, EEPROMDataLocation);
				}
		
				for (Check = 0; Check < 4; Check++)
				{
					EEPROMDataLocation = UserLocation+Check+3;
     220:	4c 2f       	mov	r20, r28
     222:	4d 0f       	add	r20, r29
     224:	4d 5f       	subi	r20, 0xFD	; 253
					H_Eeprom_Write(Password[Check],0, EEPROMDataLocation);
     226:	f7 01       	movw	r30, r14
     228:	ec 0f       	add	r30, r28
     22a:	f1 1d       	adc	r31, r1
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
				{
					EEPROMDataLocation = UserLocation+Check;
					H_Eeprom_Write(ID[Check],0, EEPROMDataLocation);
				}
		
				for (Check = 0; Check < 4; Check++)
     234:	cf 5f       	subi	r28, 0xFF	; 255
     236:	c4 30       	cpi	r28, 0x04	; 4
     238:	98 f3       	brcs	.-26     	; 0x220 <AddUser+0xc6>
				{
					EEPROMDataLocation = UserLocation+Check+3;
					H_Eeprom_Write(Password[Check],0, EEPROMDataLocation);
				}
				NumberOfUsers++;
				H_Eeprom_Write(NumberOfUsers,0,100);
     23a:	44 e6       	ldi	r20, 0x64	; 100
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	8b 0d       	add	r24, r11
     242:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
     246:	5c c0       	rjmp	.+184    	; 0x300 <AddUser+0x1a6>
     248:	8f ef       	ldi	r24, 0xFF	; 255
     24a:	91 ee       	ldi	r25, 0xE1	; 225
     24c:	24 e0       	ldi	r18, 0x04	; 4
     24e:	81 50       	subi	r24, 0x01	; 1
     250:	90 40       	sbci	r25, 0x00	; 0
     252:	20 40       	sbci	r18, 0x00	; 0
     254:	e1 f7       	brne	.-8      	; 0x24e <AddUser+0xf4>
     256:	00 c0       	rjmp	.+0      	; 0x258 <AddUser+0xfe>
     258:	00 00       	nop
			}
		}
		else /*There isn't any user yet*/
		{
			_delay_ms(100);
			H_Lcd_Clear();
     25a:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
			H_Lcd_WriteString("Valid Entry");
     25e:	8a e9       	ldi	r24, 0x9A	; 154
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
			u8 Check = 0, EEPROMDataLocation = 0;
			UserLocation = NumberOfUsers * 7;			/*UserLocation = 0*/
     266:	db 2d       	mov	r29, r11
     268:	dd 0f       	add	r29, r29
     26a:	dd 0f       	add	r29, r29
     26c:	dd 0f       	add	r29, r29
     26e:	db 19       	sub	r29, r11
		else /*There isn't any user yet*/
		{
			_delay_ms(100);
			H_Lcd_Clear();
			H_Lcd_WriteString("Valid Entry");
			u8 Check = 0, EEPROMDataLocation = 0;
     270:	c0 e0       	ldi	r28, 0x00	; 0
			UserLocation = NumberOfUsers * 7;			/*UserLocation = 0*/
			for (; Check < 3; Check++)
     272:	0a c0       	rjmp	.+20     	; 0x288 <AddUser+0x12e>
			{
				EEPROMDataLocation = UserLocation+Check;
     274:	4c 2f       	mov	r20, r28
     276:	4d 0f       	add	r20, r29
				H_Eeprom_Write(ID[Check],0, EEPROMDataLocation);
     278:	f8 01       	movw	r30, r16
     27a:	ec 0f       	add	r30, r28
     27c:	f1 1d       	adc	r31, r1
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	80 81       	ld	r24, Z
     282:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
			_delay_ms(100);
			H_Lcd_Clear();
			H_Lcd_WriteString("Valid Entry");
			u8 Check = 0, EEPROMDataLocation = 0;
			UserLocation = NumberOfUsers * 7;			/*UserLocation = 0*/
			for (; Check < 3; Check++)
     286:	cf 5f       	subi	r28, 0xFF	; 255
     288:	c3 30       	cpi	r28, 0x03	; 3
     28a:	a0 f3       	brcs	.-24     	; 0x274 <AddUser+0x11a>
     28c:	c0 e0       	ldi	r28, 0x00	; 0
     28e:	0b c0       	rjmp	.+22     	; 0x2a6 <AddUser+0x14c>
				H_Eeprom_Write(ID[Check],0, EEPROMDataLocation);
			}
		
			for (Check = 0; Check < 4; Check++)
			{
				EEPROMDataLocation = UserLocation+Check+3;
     290:	4c 2f       	mov	r20, r28
     292:	4d 0f       	add	r20, r29
     294:	4d 5f       	subi	r20, 0xFD	; 253
				H_Eeprom_Write(Password[Check],0, EEPROMDataLocation);
     296:	f7 01       	movw	r30, r14
     298:	ec 0f       	add	r30, r28
     29a:	f1 1d       	adc	r31, r1
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	80 81       	ld	r24, Z
     2a0:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
			{
				EEPROMDataLocation = UserLocation+Check;
				H_Eeprom_Write(ID[Check],0, EEPROMDataLocation);
			}
		
			for (Check = 0; Check < 4; Check++)
     2a4:	cf 5f       	subi	r28, 0xFF	; 255
     2a6:	c4 30       	cpi	r28, 0x04	; 4
     2a8:	98 f3       	brcs	.-26     	; 0x290 <AddUser+0x136>
			{
				EEPROMDataLocation = UserLocation+Check+3;
				H_Eeprom_Write(Password[Check],0, EEPROMDataLocation);
			}
			NumberOfUsers++;
			H_Eeprom_Write(NumberOfUsers,0,100);
     2aa:	44 e6       	ldi	r20, 0x64	; 100
     2ac:	60 e0       	ldi	r22, 0x00	; 0
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	8b 0d       	add	r24, r11
     2b2:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
			
			H_Lcd_WriteString("User Added");
     2b6:	86 ea       	ldi	r24, 0xA6	; 166
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
			H_Lcd_GoTo(1,0);
     2be:	60 e0       	ldi	r22, 0x00	; 0
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
			H_Lcd_WriteString("No of Users");
     2c6:	81 eb       	ldi	r24, 0xB1	; 177
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
			H_Lcd_WriteNumber(H_Eeprom_Read(0,100));
     2ce:	64 e6       	ldi	r22, 0x64	; 100
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
     2d6:	68 2f       	mov	r22, r24
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <H_Lcd_WriteNumber>
     2e2:	0e c0       	rjmp	.+28     	; 0x300 <AddUser+0x1a6>
		}
	}
	else /*Number of users is equal or more than 10 users */
	{
		/*Print on LCD you reached max number of users*/
		H_Lcd_Clear();
     2e4:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
		H_Lcd_WriteString("Reached max");
     2e8:	8d eb       	ldi	r24, 0xBD	; 189
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
		H_Lcd_GoTo(1,0);
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
		H_Lcd_WriteString("Number Of Users");
     2f8:	89 ec       	ldi	r24, 0xC9	; 201
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
	}
}
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	ff 90       	pop	r15
     30a:	ef 90       	pop	r14
     30c:	df 90       	pop	r13
     30e:	cf 90       	pop	r12
     310:	bf 90       	pop	r11
     312:	af 90       	pop	r10
     314:	08 95       	ret

00000316 <DeleteUser>:

void DeleteUser (u8 NumberOfUsers, u8* ID)
{
     316:	cf 92       	push	r12
     318:	df 92       	push	r13
     31a:	ef 92       	push	r14
     31c:	ff 92       	push	r15
     31e:	0f 93       	push	r16
     320:	1f 93       	push	r17
     322:	cf 93       	push	r28
     324:	df 93       	push	r29
	if (NumberOfUsers > 0)
     326:	81 11       	cpse	r24, r1
     328:	53 c0       	rjmp	.+166    	; 0x3d0 <DeleteUser+0xba>
     32a:	62 c0       	rjmp	.+196    	; 0x3f0 <DeleteUser+0xda>
	{
		u8 Counter = 0, UserLocation  = 0, PerfectMatch = 0;
	
		for (; Counter < NumberOfUsers; Counter++)
		{
			UserLocation = (Counter*7);
     32c:	df 2d       	mov	r29, r15
     32e:	dd 0f       	add	r29, r29
     330:	dd 0f       	add	r29, r29
     332:	dd 0f       	add	r29, r29
     334:	df 19       	sub	r29, r15
			u8 Check = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 0;
     336:	e1 2c       	mov	r14, r1
     338:	c0 e0       	ldi	r28, 0x00	; 0
			
			for (; Check < 3; Check++)
     33a:	0d c0       	rjmp	.+26     	; 0x356 <DeleteUser+0x40>
			{
				EEPROMDataLocation = UserLocation+Check;
     33c:	6c 2f       	mov	r22, r28
     33e:	6d 0f       	add	r22, r29
				EEPROMData = H_Eeprom_Read(0, EEPROMDataLocation);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
				if (ID[Check] == EEPROMData )
     346:	f8 01       	movw	r30, r16
     348:	ec 0f       	add	r30, r28
     34a:	f1 1d       	adc	r31, r1
     34c:	90 81       	ld	r25, Z
     34e:	89 13       	cpse	r24, r25
     350:	01 c0       	rjmp	.+2      	; 0x354 <DeleteUser+0x3e>
				{
					ValidEntries++;
     352:	e3 94       	inc	r14
		for (; Counter < NumberOfUsers; Counter++)
		{
			UserLocation = (Counter*7);
			u8 Check = 0, EEPROMData = 0, EEPROMDataLocation = 0, ValidEntries = 0;
			
			for (; Check < 3; Check++)
     354:	cf 5f       	subi	r28, 0xFF	; 255
     356:	c3 30       	cpi	r28, 0x03	; 3
     358:	88 f3       	brcs	.-30     	; 0x33c <DeleteUser+0x26>
					ValidEntries++;
				}
				
			}
			
			if (ValidEntries == 3)
     35a:	23 e0       	ldi	r18, 0x03	; 3
     35c:	e2 12       	cpse	r14, r18
     35e:	0e c0       	rjmp	.+28     	; 0x37c <DeleteUser+0x66>
			{
				/*print on LCD valid username*/
				H_Lcd_WriteString("Valid Username");
     360:	89 ed       	ldi	r24, 0xD9	; 217
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	93 ec       	ldi	r25, 0xC3	; 195
     36c:	29 e0       	ldi	r18, 0x09	; 9
     36e:	81 50       	subi	r24, 0x01	; 1
     370:	90 40       	sbci	r25, 0x00	; 0
     372:	20 40       	sbci	r18, 0x00	; 0
     374:	e1 f7       	brne	.-8      	; 0x36e <DeleteUser+0x58>
     376:	00 c0       	rjmp	.+0      	; 0x378 <DeleteUser+0x62>
     378:	00 00       	nop
				_delay_ms(200);
				PerfectMatch ++;
     37a:	c3 94       	inc	r12
				
			}
			if (PerfectMatch == 1)
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	c8 12       	cpse	r12, r24
     380:	25 c0       	rjmp	.+74     	; 0x3cc <DeleteUser+0xb6>
     382:	0d c0       	rjmp	.+26     	; 0x39e <DeleteUser+0x88>
			{
				u8 Check = 0, EEPROMDataLocation = 0;
				for (; Check < 3; Check++)
				{
					EEPROMDataLocation = UserLocation+Check;
     384:	ec 2e       	mov	r14, r28
     386:	ed 0e       	add	r14, r29
					EEPROMData = H_Eeprom_Read(0,(EEPROMDataLocation+7));
     388:	67 e0       	ldi	r22, 0x07	; 7
     38a:	6e 0d       	add	r22, r14
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
					H_Eeprom_Write(EEPROMData,0, EEPROMDataLocation);
     392:	4e 2d       	mov	r20, r14
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
				
			}
			if (PerfectMatch == 1)
			{
				u8 Check = 0, EEPROMDataLocation = 0;
				for (; Check < 3; Check++)
     39a:	cf 5f       	subi	r28, 0xFF	; 255
     39c:	01 c0       	rjmp	.+2      	; 0x3a0 <DeleteUser+0x8a>
     39e:	c0 e0       	ldi	r28, 0x00	; 0
     3a0:	c3 30       	cpi	r28, 0x03	; 3
     3a2:	80 f3       	brcs	.-32     	; 0x384 <DeleteUser+0x6e>
     3a4:	c0 e0       	ldi	r28, 0x00	; 0
     3a6:	10 c0       	rjmp	.+32     	; 0x3c8 <DeleteUser+0xb2>
					H_Eeprom_Write(EEPROMData,0, EEPROMDataLocation);
				}
				Check = 0;
				for (; Check < 4; Check++)
				{
					EEPROMDataLocation = UserLocation+Check+3;
     3a8:	6c 2f       	mov	r22, r28
     3aa:	6d 0f       	add	r22, r29
     3ac:	0f 2e       	mov	r0, r31
     3ae:	f3 e0       	ldi	r31, 0x03	; 3
     3b0:	ef 2e       	mov	r14, r31
     3b2:	f0 2d       	mov	r31, r0
     3b4:	e6 0e       	add	r14, r22
					EEPROMData = H_Eeprom_Read(0,(EEPROMDataLocation+7));
     3b6:	66 5f       	subi	r22, 0xF6	; 246
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
					H_Eeprom_Write(EEPROMData,0, EEPROMDataLocation);
     3be:	4e 2d       	mov	r20, r14
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
					EEPROMDataLocation = UserLocation+Check;
					EEPROMData = H_Eeprom_Read(0,(EEPROMDataLocation+7));
					H_Eeprom_Write(EEPROMData,0, EEPROMDataLocation);
				}
				Check = 0;
				for (; Check < 4; Check++)
     3c6:	cf 5f       	subi	r28, 0xFF	; 255
     3c8:	c4 30       	cpi	r28, 0x04	; 4
     3ca:	70 f3       	brcs	.-36     	; 0x3a8 <DeleteUser+0x92>
{
	if (NumberOfUsers > 0)
	{
		u8 Counter = 0, UserLocation  = 0, PerfectMatch = 0;
	
		for (; Counter < NumberOfUsers; Counter++)
     3cc:	f3 94       	inc	r15
     3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <DeleteUser+0xc2>
     3d0:	8b 01       	movw	r16, r22
     3d2:	d8 2e       	mov	r13, r24
     3d4:	c1 2c       	mov	r12, r1
     3d6:	f1 2c       	mov	r15, r1
     3d8:	fd 14       	cp	r15, r13
     3da:	08 f4       	brcc	.+2      	; 0x3de <DeleteUser+0xc8>
     3dc:	a7 cf       	rjmp	.-178    	; 0x32c <DeleteUser+0x16>
				}
				
				
			}
		}
		if (PerfectMatch == 1)
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	c9 12       	cpse	r12, r25
     3e2:	06 c0       	rjmp	.+12     	; 0x3f0 <DeleteUser+0xda>
		{	
			NumberOfUsers--;
			H_Eeprom_Write(NumberOfUsers,0,100);
     3e4:	44 e6       	ldi	r20, 0x64	; 100
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	8f ef       	ldi	r24, 0xFF	; 255
     3ea:	8d 0d       	add	r24, r13
     3ec:	0e 94 be 04 	call	0x97c	; 0x97c <H_Eeprom_Write>
	{
		/*print on LCD There is no any users yet*/
		
	}
	
}
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	1f 91       	pop	r17
     3f6:	0f 91       	pop	r16
     3f8:	ff 90       	pop	r15
     3fa:	ef 90       	pop	r14
     3fc:	df 90       	pop	r13
     3fe:	cf 90       	pop	r12
     400:	08 95       	ret

00000402 <UserLogin>:
	}
	return 0;
}

u8 UserLogin (u8* ID, u8* Password)
{
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	cf 92       	push	r12
     408:	df 92       	push	r13
     40a:	ef 92       	push	r14
     40c:	ff 92       	push	r15
     40e:	0f 93       	push	r16
     410:	1f 93       	push	r17
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	7c 01       	movw	r14, r24
     418:	8b 01       	movw	r16, r22
	u8 NumberOfUsers = H_Eeprom_Read(0,100);
     41a:	64 e6       	ldi	r22, 0x64	; 100
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
     422:	b8 2e       	mov	r11, r24
	u8 UserLocation = 0, ValidUsername = 0, ValidPassword = 0, Counter = 0, EEPROMData = 0, WrongEntry = 0, EEPROMDataLocation = 0;
	if (NumberOfUsers > 0)
     424:	81 11       	cpse	r24, r1
     426:	33 c0       	rjmp	.+102    	; 0x48e <UserLogin+0x8c>
     428:	51 c0       	rjmp	.+162    	; 0x4cc <UserLogin+0xca>
	{
		for (;Counter < NumberOfUsers; Counter++)
		{
			ValidPassword = 0;
			ValidUsername = 0;
			UserLocation = Counter*7;
     42a:	dd 2d       	mov	r29, r13
     42c:	dd 0f       	add	r29, r29
     42e:	dd 0f       	add	r29, r29
     430:	dd 0f       	add	r29, r29
     432:	dd 19       	sub	r29, r13
			u8 Check = 0;
     434:	c0 e0       	ldi	r28, 0x00	; 0
	if (NumberOfUsers > 0)
	{
		for (;Counter < NumberOfUsers; Counter++)
		{
			ValidPassword = 0;
			ValidUsername = 0;
     436:	c1 2c       	mov	r12, r1
			UserLocation = Counter*7;
			u8 Check = 0;
			
			for(;Check < 3; Check++)
     438:	0d c0       	rjmp	.+26     	; 0x454 <UserLogin+0x52>
			{	
				EEPROMDataLocation = UserLocation+ Check;
     43a:	6c 2f       	mov	r22, r28
     43c:	6d 0f       	add	r22, r29
				EEPROMData = H_Eeprom_Read(0,(EEPROMDataLocation));
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
				if (ID[Check] == EEPROMData)
     444:	f7 01       	movw	r30, r14
     446:	ec 0f       	add	r30, r28
     448:	f1 1d       	adc	r31, r1
     44a:	90 81       	ld	r25, Z
     44c:	89 13       	cpse	r24, r25
     44e:	01 c0       	rjmp	.+2      	; 0x452 <UserLogin+0x50>
				{
					ValidUsername++;
     450:	c3 94       	inc	r12
			ValidPassword = 0;
			ValidUsername = 0;
			UserLocation = Counter*7;
			u8 Check = 0;
			
			for(;Check < 3; Check++)
     452:	cf 5f       	subi	r28, 0xFF	; 255
     454:	c3 30       	cpi	r28, 0x03	; 3
     456:	88 f3       	brcs	.-30     	; 0x43a <UserLogin+0x38>
     458:	c0 e0       	ldi	r28, 0x00	; 0
     45a:	a1 2c       	mov	r10, r1
     45c:	0e c0       	rjmp	.+28     	; 0x47a <UserLogin+0x78>

			}
			
			for (Check = 0;Check < 4; Check++)
			{
				EEPROMDataLocation = UserLocation+Check+3;
     45e:	6c 2f       	mov	r22, r28
     460:	6d 0f       	add	r22, r29
     462:	6d 5f       	subi	r22, 0xFD	; 253
				EEPROMData = H_Eeprom_Read(0,(EEPROMDataLocation));
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
				if (Password[Check] == EEPROMData)
     46a:	f8 01       	movw	r30, r16
     46c:	ec 0f       	add	r30, r28
     46e:	f1 1d       	adc	r31, r1
     470:	90 81       	ld	r25, Z
     472:	89 13       	cpse	r24, r25
     474:	01 c0       	rjmp	.+2      	; 0x478 <UserLogin+0x76>
				{
					ValidPassword++;
     476:	a3 94       	inc	r10
					ValidUsername++;
				}

			}
			
			for (Check = 0;Check < 4; Check++)
     478:	cf 5f       	subi	r28, 0xFF	; 255
     47a:	c4 30       	cpi	r28, 0x04	; 4
     47c:	80 f3       	brcs	.-32     	; 0x45e <UserLogin+0x5c>
					ValidPassword++;
				}

			}
			
			if (ValidUsername == 3 && ValidPassword == 4)
     47e:	83 e0       	ldi	r24, 0x03	; 3
     480:	c8 12       	cpse	r12, r24
     482:	03 c0       	rjmp	.+6      	; 0x48a <UserLogin+0x88>
     484:	84 e0       	ldi	r24, 0x04	; 4
     486:	a8 16       	cp	r10, r24
     488:	39 f0       	breq	.+14     	; 0x498 <UserLogin+0x96>
{
	u8 NumberOfUsers = H_Eeprom_Read(0,100);
	u8 UserLocation = 0, ValidUsername = 0, ValidPassword = 0, Counter = 0, EEPROMData = 0, WrongEntry = 0, EEPROMDataLocation = 0;
	if (NumberOfUsers > 0)
	{
		for (;Counter < NumberOfUsers; Counter++)
     48a:	d3 94       	inc	r13
     48c:	01 c0       	rjmp	.+2      	; 0x490 <UserLogin+0x8e>
     48e:	d1 2c       	mov	r13, r1
     490:	db 14       	cp	r13, r11
     492:	58 f2       	brcs	.-106    	; 0x42a <UserLogin+0x28>
     494:	a1 2c       	mov	r10, r1
     496:	c1 2c       	mov	r12, r1
			{
				ValidUsername = 0;
				ValidPassword = 0;
			}	
		}
		if (ValidUsername == 3 && ValidPassword == 4)
     498:	83 e0       	ldi	r24, 0x03	; 3
     49a:	c8 12       	cpse	r12, r24
     49c:	09 c0       	rjmp	.+18     	; 0x4b0 <UserLogin+0xae>
     49e:	84 e0       	ldi	r24, 0x04	; 4
     4a0:	a8 12       	cpse	r10, r24
     4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <UserLogin+0xae>
		{
			/*print on LCD Login Successful*/
			H_Lcd_WriteString("Login Successful");
     4a4:	88 ee       	ldi	r24, 0xE8	; 232
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
}

u8 UserLogin (u8* ID, u8* Password)
{
	u8 NumberOfUsers = H_Eeprom_Read(0,100);
	u8 UserLocation = 0, ValidUsername = 0, ValidPassword = 0, Counter = 0, EEPROMData = 0, WrongEntry = 0, EEPROMDataLocation = 0;
     4ac:	80 e0       	ldi	r24, 0x00	; 0
			}	
		}
		if (ValidUsername == 3 && ValidPassword == 4)
		{
			/*print on LCD Login Successful*/
			H_Lcd_WriteString("Login Successful");
     4ae:	1b c0       	rjmp	.+54     	; 0x4e6 <UserLogin+0xe4>
		}
		else
		{
			/*print on LCD Invalid Username Or Password*/
			H_Lcd_WriteString("Invalid Username");
     4b0:	89 e8       	ldi	r24, 0x89	; 137
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
			H_Lcd_GoTo(1,0);
     4b8:	60 e0       	ldi	r22, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
			H_Lcd_WriteString("Or Password");
     4c0:	89 ef       	ldi	r24, 0xF9	; 249
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
			WrongEntry++;
     4c8:	81 e0       	ldi	r24, 0x01	; 1
     4ca:	0d c0       	rjmp	.+26     	; 0x4e6 <UserLogin+0xe4>
		}
	}
	else
	{
		/*print on LCD There is no users added yet*/
		H_Lcd_WriteString("There is no users");
     4cc:	85 e0       	ldi	r24, 0x05	; 5
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
		H_Lcd_GoTo(1,0);
     4d4:	60 e0       	ldi	r22, 0x00	; 0
     4d6:	81 e0       	ldi	r24, 0x01	; 1
     4d8:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
		H_Lcd_WriteString("added yet");
     4dc:	87 e1       	ldi	r24, 0x17	; 23
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
}

u8 UserLogin (u8* ID, u8* Password)
{
	u8 NumberOfUsers = H_Eeprom_Read(0,100);
	u8 UserLocation = 0, ValidUsername = 0, ValidPassword = 0, Counter = 0, EEPROMData = 0, WrongEntry = 0, EEPROMDataLocation = 0;
     4e4:	80 e0       	ldi	r24, 0x00	; 0
		H_Lcd_GoTo(1,0);
		H_Lcd_WriteString("added yet");
	}
	
	return WrongEntry;
}
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	1f 91       	pop	r17
     4ec:	0f 91       	pop	r16
     4ee:	ff 90       	pop	r15
     4f0:	ef 90       	pop	r14
     4f2:	df 90       	pop	r13
     4f4:	cf 90       	pop	r12
     4f6:	bf 90       	pop	r11
     4f8:	af 90       	pop	r10
     4fa:	08 95       	ret

000004fc <InputID>:
/************************************************************************/
/*Parameters input array to save in it the input from keypad			*/
/*for the ID															*/
/************************************************************************/
void InputID (u8* ID)
{
     4fc:	ef 92       	push	r14
     4fe:	ff 92       	push	r15
     500:	0f 93       	push	r16
     502:	1f 93       	push	r17
     504:	cf 93       	push	r28
     506:	8c 01       	movw	r16, r24
	H_Lcd_Clear();
     508:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
	H_Lcd_WriteString("User ID:");
     50c:	81 e2       	ldi	r24, 0x21	; 33
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
	
	u8 KeyPressed = 0, DigitsEntered = 0;
     514:	c0 e0       	ldi	r28, 0x00	; 0
	while (DigitsEntered < 3)
     516:	13 c0       	rjmp	.+38     	; 0x53e <InputID+0x42>
	{
		KeyPressed = H_KeyPad_Read();
     518:	0e 94 3a 05 	call	0xa74	; 0xa74 <H_KeyPad_Read>
		if (KeyPressed)
     51c:	88 23       	and	r24, r24
     51e:	79 f0       	breq	.+30     	; 0x53e <InputID+0x42>
		{
			ID[DigitsEntered] = KeyPressed;
     520:	78 01       	movw	r14, r16
     522:	ec 0e       	add	r14, r28
     524:	f1 1c       	adc	r15, r1
     526:	f7 01       	movw	r30, r14
     528:	80 83       	st	Z, r24
			/*Print on LCD Numbers Entered*/
			H_Lcd_GoTo(0,9+DigitsEntered);
     52a:	69 e0       	ldi	r22, 0x09	; 9
     52c:	6c 0f       	add	r22, r28
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
			H_Lcd_WriteCharacter(ID[DigitsEntered]);
     534:	f7 01       	movw	r30, r14
     536:	80 81       	ld	r24, Z
     538:	0e 94 32 07 	call	0xe64	; 0xe64 <H_Lcd_WriteCharacter>
			DigitsEntered++;
     53c:	cf 5f       	subi	r28, 0xFF	; 255
{
	H_Lcd_Clear();
	H_Lcd_WriteString("User ID:");
	
	u8 KeyPressed = 0, DigitsEntered = 0;
	while (DigitsEntered < 3)
     53e:	c3 30       	cpi	r28, 0x03	; 3
     540:	58 f3       	brcs	.-42     	; 0x518 <InputID+0x1c>
     542:	ff ef       	ldi	r31, 0xFF	; 255
     544:	25 ea       	ldi	r18, 0xA5	; 165
     546:	8e e0       	ldi	r24, 0x0E	; 14
     548:	f1 50       	subi	r31, 0x01	; 1
     54a:	20 40       	sbci	r18, 0x00	; 0
     54c:	80 40       	sbci	r24, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <InputID+0x4c>
     550:	00 c0       	rjmp	.+0      	; 0x552 <InputID+0x56>
     552:	00 00       	nop
			H_Lcd_WriteCharacter(ID[DigitsEntered]);
			DigitsEntered++;
		}
	}	
	_delay_ms(300);
}
     554:	cf 91       	pop	r28
     556:	1f 91       	pop	r17
     558:	0f 91       	pop	r16
     55a:	ff 90       	pop	r15
     55c:	ef 90       	pop	r14
     55e:	08 95       	ret

00000560 <InputPassword>:
/************************************************************************/
/*Parameters input array to save in it the input from keypad			*/
/*for the password														*/
/************************************************************************/
void InputPassword (u8* Password)
{	
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	8c 01       	movw	r16, r24
	H_Lcd_GoTo(1,0);
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
	H_Lcd_WriteString("Password:");
     570:	8a e2       	ldi	r24, 0x2A	; 42
     572:	91 e0       	ldi	r25, 0x01	; 1
     574:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
	H_Lcd_GoTo(1,9);
     578:	69 e0       	ldi	r22, 0x09	; 9
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
	u8 KeyPressed = 0, DigitsEntered = 0;
     580:	c0 e0       	ldi	r28, 0x00	; 0
	while (DigitsEntered < 4)
     582:	0c c0       	rjmp	.+24     	; 0x59c <InputPassword+0x3c>
	{
		KeyPressed = H_KeyPad_Read();
     584:	0e 94 3a 05 	call	0xa74	; 0xa74 <H_KeyPad_Read>
		if (KeyPressed)
     588:	88 23       	and	r24, r24
     58a:	41 f0       	breq	.+16     	; 0x59c <InputPassword+0x3c>
		{
			Password[DigitsEntered] = KeyPressed; 
     58c:	f8 01       	movw	r30, r16
     58e:	ec 0f       	add	r30, r28
     590:	f1 1d       	adc	r31, r1
     592:	80 83       	st	Z, r24
			/*Print on LCD Stars for every character entered*/
			H_Lcd_WriteCharacter('*');
     594:	8a e2       	ldi	r24, 0x2A	; 42
     596:	0e 94 32 07 	call	0xe64	; 0xe64 <H_Lcd_WriteCharacter>
			DigitsEntered++;
     59a:	cf 5f       	subi	r28, 0xFF	; 255
{	
	H_Lcd_GoTo(1,0);
	H_Lcd_WriteString("Password:");
	H_Lcd_GoTo(1,9);
	u8 KeyPressed = 0, DigitsEntered = 0;
	while (DigitsEntered < 4)
     59c:	c4 30       	cpi	r28, 0x04	; 4
     59e:	90 f3       	brcs	.-28     	; 0x584 <InputPassword+0x24>
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	85 ea       	ldi	r24, 0xA5	; 165
     5a4:	9e e0       	ldi	r25, 0x0E	; 14
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	80 40       	sbci	r24, 0x00	; 0
     5aa:	90 40       	sbci	r25, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <InputPassword+0x46>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <InputPassword+0x50>
     5b0:	00 00       	nop
			H_Lcd_WriteCharacter('*');
			DigitsEntered++;
		}
	}
	_delay_ms(300);
}
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	08 95       	ret

000005ba <Login_System_Init>:
	}
	
	return 0;
}

void Login_System_Init(){
     5ba:	cf 93       	push	r28
     5bc:	df 93       	push	r29
     5be:	cd b7       	in	r28, 0x3d	; 61
     5c0:	de b7       	in	r29, 0x3e	; 62
     5c2:	27 97       	sbiw	r28, 0x07	; 7
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
	
	//Save Init Admin Username and pass to EEPROM
	//Save Admin ID
	u8 UserID[3]={0,0,0}, UserPassword[4]={0,0,0,0};
     5ce:	19 82       	std	Y+1, r1	; 0x01
     5d0:	1a 82       	std	Y+2, r1	; 0x02
     5d2:	1b 82       	std	Y+3, r1	; 0x03
     5d4:	1c 82       	std	Y+4, r1	; 0x04
     5d6:	1d 82       	std	Y+5, r1	; 0x05
     5d8:	1e 82       	std	Y+6, r1	; 0x06
     5da:	1f 82       	std	Y+7, r1	; 0x07
		
	InputID(UserID);
     5dc:	ce 01       	movw	r24, r28
     5de:	01 96       	adiw	r24, 0x01	; 1
     5e0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <InputID>
	InputPassword(UserPassword);
     5e4:	ce 01       	movw	r24, r28
     5e6:	04 96       	adiw	r24, 0x04	; 4
     5e8:	0e 94 b0 02 	call	0x560	; 0x560 <InputPassword>
	AddUser (UserID, UserPassword);
     5ec:	be 01       	movw	r22, r28
     5ee:	6c 5f       	subi	r22, 0xFC	; 252
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	ce 01       	movw	r24, r28
     5f4:	01 96       	adiw	r24, 0x01	; 1
     5f6:	0e 94 ad 00 	call	0x15a	; 0x15a <AddUser>
}
     5fa:	27 96       	adiw	r28, 0x07	; 7
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <UserMode>:
	}
	
}

void UserMode()
{
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	cd b7       	in	r28, 0x3d	; 61
     612:	de b7       	in	r29, 0x3e	; 62
     614:	27 97       	sbiw	r28, 0x07	; 7
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	f8 94       	cli
     61a:	de bf       	out	0x3e, r29	; 62
     61c:	0f be       	out	0x3f, r0	; 63
     61e:	cd bf       	out	0x3d, r28	; 61
	u8 UserId[3]={0}, UserPass[4]={0};
     620:	19 82       	std	Y+1, r1	; 0x01
     622:	1a 82       	std	Y+2, r1	; 0x02
     624:	1b 82       	std	Y+3, r1	; 0x03
     626:	1c 82       	std	Y+4, r1	; 0x04
     628:	1d 82       	std	Y+5, r1	; 0x05
     62a:	1e 82       	std	Y+6, r1	; 0x06
     62c:	1f 82       	std	Y+7, r1	; 0x07
	InputID(UserId);
     62e:	ce 01       	movw	r24, r28
     630:	01 96       	adiw	r24, 0x01	; 1
     632:	0e 94 7e 02 	call	0x4fc	; 0x4fc <InputID>
	InputPassword(UserPass);
     636:	ce 01       	movw	r24, r28
     638:	04 96       	adiw	r24, 0x04	; 4
     63a:	0e 94 b0 02 	call	0x560	; 0x560 <InputPassword>
	
	u8	Trial=0, SuccessLogin=0;
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	10 e0       	ldi	r17, 0x00	; 0
	while(SuccessLogin != 1){
     642:	16 c0       	rjmp	.+44     	; 0x670 <UserMode+0x64>
		Trial++;
     644:	1f 5f       	subi	r17, 0xFF	; 255
		if(Trial > 3)
     646:	14 30       	cpi	r17, 0x04	; 4
     648:	60 f0       	brcs	.+24     	; 0x662 <UserMode+0x56>
		{
			H_Lcd_Clear();
     64a:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
			H_Lcd_GoTo(0,2);
     64e:	62 e0       	ldi	r22, 0x02	; 2
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
			H_Lcd_WriteString("Warning...");
     656:	84 e3       	ldi	r24, 0x34	; 52
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
			BreakDownMode();
     65e:	0e 94 49 00 	call	0x92	; 0x92 <BreakDownMode>
		}
		else
		{
			SuccessLogin = UserLogin(UserId,UserPass);
     662:	be 01       	movw	r22, r28
     664:	6c 5f       	subi	r22, 0xFC	; 252
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	0e 94 01 02 	call	0x402	; 0x402 <UserLogin>
	u8 UserId[3]={0}, UserPass[4]={0};
	InputID(UserId);
	InputPassword(UserPass);
	
	u8	Trial=0, SuccessLogin=0;
	while(SuccessLogin != 1){
     670:	81 30       	cpi	r24, 0x01	; 1
     672:	41 f7       	brne	.-48     	; 0x644 <UserMode+0x38>
		else
		{
			SuccessLogin = UserLogin(UserId,UserPass);
		}
	}
	User_MainScreen();
     674:	0e 94 a4 00 	call	0x148	; 0x148 <User_MainScreen>

00000678 <Admin_MainScreen>:
{
	
}

void Admin_MainScreen()
{
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
     67c:	cd b7       	in	r28, 0x3d	; 61
     67e:	de b7       	in	r29, 0x3e	; 62
     680:	27 97       	sbiw	r28, 0x07	; 7
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
	u8 Bleutooth_Data = 0, NumberOfUsers=0;
	while (1)
	{
		u8 UserId[3]={0}, UserPass[4]={0};
     68c:	1d 82       	std	Y+5, r1	; 0x05
     68e:	1e 82       	std	Y+6, r1	; 0x06
     690:	1f 82       	std	Y+7, r1	; 0x07
     692:	19 82       	std	Y+1, r1	; 0x01
     694:	1a 82       	std	Y+2, r1	; 0x02
     696:	1b 82       	std	Y+3, r1	; 0x03
     698:	1c 82       	std	Y+4, r1	; 0x04
		Bleutooth_Data = H_Hc05_Rec();
     69a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <H_Hc05_Rec>
		switch(Bleutooth_Data)
     69e:	84 34       	cpi	r24, 0x44	; 68
     6a0:	71 f1       	breq	.+92     	; 0x6fe <Admin_MainScreen+0x86>
     6a2:	28 f4       	brcc	.+10     	; 0x6ae <Admin_MainScreen+0x36>
     6a4:	81 34       	cpi	r24, 0x41	; 65
     6a6:	41 f0       	breq	.+16     	; 0x6b8 <Admin_MainScreen+0x40>
     6a8:	82 34       	cpi	r24, 0x42	; 66
     6aa:	49 f0       	breq	.+18     	; 0x6be <Admin_MainScreen+0x46>
     6ac:	ef cf       	rjmp	.-34     	; 0x68c <Admin_MainScreen+0x14>
     6ae:	85 35       	cpi	r24, 0x55	; 85
     6b0:	49 f1       	breq	.+82     	; 0x704 <Admin_MainScreen+0x8c>
     6b2:	83 36       	cpi	r24, 0x63	; 99
     6b4:	a1 f0       	breq	.+40     	; 0x6de <Admin_MainScreen+0x66>
     6b6:	ea cf       	rjmp	.-44     	; 0x68c <Admin_MainScreen+0x14>
		{
			case 'A':		 AC_Switch();					break;
     6b8:	0e 94 4e 00 	call	0x9c	; 0x9c <AC_Switch>
     6bc:	e7 cf       	rjmp	.-50     	; 0x68c <Admin_MainScreen+0x14>
			case 'B':	InputID(UserId); InputPassword(UserPass);
     6be:	ce 01       	movw	r24, r28
     6c0:	05 96       	adiw	r24, 0x05	; 5
     6c2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <InputID>
     6c6:	ce 01       	movw	r24, r28
     6c8:	01 96       	adiw	r24, 0x01	; 1
     6ca:	0e 94 b0 02 	call	0x560	; 0x560 <InputPassword>
							AddUser(UserId,UserPass);		break;
     6ce:	be 01       	movw	r22, r28
     6d0:	6f 5f       	subi	r22, 0xFF	; 255
     6d2:	7f 4f       	sbci	r23, 0xFF	; 255
     6d4:	ce 01       	movw	r24, r28
     6d6:	05 96       	adiw	r24, 0x05	; 5
     6d8:	0e 94 ad 00 	call	0x15a	; 0x15a <AddUser>
     6dc:	d7 cf       	rjmp	.-82     	; 0x68c <Admin_MainScreen+0x14>
			case 'c':	NumberOfUsers = H_Eeprom_Read(0,100);
     6de:	64 e6       	ldi	r22, 0x64	; 100
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
     6e6:	18 2f       	mov	r17, r24
							InputID(UserId);
     6e8:	ce 01       	movw	r24, r28
     6ea:	05 96       	adiw	r24, 0x05	; 5
     6ec:	0e 94 7e 02 	call	0x4fc	; 0x4fc <InputID>
							DeleteUser(NumberOfUsers,UserId);	break;
     6f0:	be 01       	movw	r22, r28
     6f2:	6b 5f       	subi	r22, 0xFB	; 251
     6f4:	7f 4f       	sbci	r23, 0xFF	; 255
     6f6:	81 2f       	mov	r24, r17
     6f8:	0e 94 8b 01 	call	0x316	; 0x316 <DeleteUser>
     6fc:	c7 cf       	rjmp	.-114    	; 0x68c <Admin_MainScreen+0x14>
							
			case 'D':		 Door_Switch();					break;
     6fe:	0e 94 80 00 	call	0x100	; 0x100 <Door_Switch>
			case 'R':			Relay_Switch();				break;
			case 'U':			UserMode();					break;
			default:									    break;
		}
	}
     702:	c4 cf       	rjmp	.-120    	; 0x68c <Admin_MainScreen+0x14>
							InputID(UserId);
							DeleteUser(NumberOfUsers,UserId);	break;
							
			case 'D':		 Door_Switch();					break;
			case 'R':			Relay_Switch();				break;
			case 'U':			UserMode();					break;
     704:	0e 94 06 03 	call	0x60c	; 0x60c <UserMode>

00000708 <AdminLogin>:
	}
	
}

u8 AdminLogin (u8* ID, u8* Password)
{
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	cd b7       	in	r28, 0x3d	; 61
     71a:	de b7       	in	r29, 0x3e	; 62
     71c:	27 97       	sbiw	r28, 0x07	; 7
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	6c 01       	movw	r12, r24
     72a:	7b 01       	movw	r14, r22
	H_Lcd_Clear();
     72c:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
	H_Lcd_WriteString("User ID:");
     730:	81 e2       	ldi	r24, 0x21	; 33
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>

	u8 UserID[3]={0,0,0}, UserPassword[4]={0,0,0,0};
     738:	19 82       	std	Y+1, r1	; 0x01
     73a:	1a 82       	std	Y+2, r1	; 0x02
     73c:	1b 82       	std	Y+3, r1	; 0x03
     73e:	1c 82       	std	Y+4, r1	; 0x04
     740:	1d 82       	std	Y+5, r1	; 0x05
     742:	1e 82       	std	Y+6, r1	; 0x06
     744:	1f 82       	std	Y+7, r1	; 0x07
	InputID(UserID);
     746:	ce 01       	movw	r24, r28
     748:	01 96       	adiw	r24, 0x01	; 1
     74a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <InputID>
	
	H_Lcd_GoTo(1,0);
     74e:	60 e0       	ldi	r22, 0x00	; 0
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
	H_Lcd_WriteString("Password:");
     756:	8a e2       	ldi	r24, 0x2A	; 42
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
	InputPassword(UserPassword);
     75e:	ce 01       	movw	r24, r28
     760:	04 96       	adiw	r24, 0x04	; 4
     762:	0e 94 b0 02 	call	0x560	; 0x560 <InputPassword>

	u8 ByteAddress = 0, ValidUsername = 0, ValidPassword = 0, Counter = 0, EEPROMData = 0;
     766:	10 e0       	ldi	r17, 0x00	; 0
     768:	00 e0       	ldi	r16, 0x00	; 0
	for (; Counter < 3; Counter++)
     76a:	0d c0       	rjmp	.+26     	; 0x786 <AdminLogin+0x7e>
	{
		ByteAddress = 101+Counter;
     76c:	65 e6       	ldi	r22, 0x65	; 101
     76e:	61 0f       	add	r22, r17
		EEPROMData = H_Eeprom_Read(0,ByteAddress);
     770:	80 e0       	ldi	r24, 0x00	; 0
     772:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
		if (ID[Counter] == EEPROMData)
     776:	f6 01       	movw	r30, r12
     778:	e1 0f       	add	r30, r17
     77a:	f1 1d       	adc	r31, r1
     77c:	90 81       	ld	r25, Z
     77e:	89 13       	cpse	r24, r25
     780:	01 c0       	rjmp	.+2      	; 0x784 <AdminLogin+0x7c>
		{
			ValidUsername++;
     782:	0f 5f       	subi	r16, 0xFF	; 255
	H_Lcd_GoTo(1,0);
	H_Lcd_WriteString("Password:");
	InputPassword(UserPassword);

	u8 ByteAddress = 0, ValidUsername = 0, ValidPassword = 0, Counter = 0, EEPROMData = 0;
	for (; Counter < 3; Counter++)
     784:	1f 5f       	subi	r17, 0xFF	; 255
     786:	13 30       	cpi	r17, 0x03	; 3
     788:	88 f3       	brcs	.-30     	; 0x76c <AdminLogin+0x64>
     78a:	10 e0       	ldi	r17, 0x00	; 0
     78c:	d1 2c       	mov	r13, r1
     78e:	0d c0       	rjmp	.+26     	; 0x7aa <AdminLogin+0xa2>
			/*Do Nothing*/
		}
	}
	for (Counter = 0; Counter < 4; Counter++)
	{
		ByteAddress = 101+Counter+3;
     790:	68 e6       	ldi	r22, 0x68	; 104
     792:	61 0f       	add	r22, r17
		EEPROMData = H_Eeprom_Read(0,ByteAddress);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <H_Eeprom_Read>
		if (Password[Counter] == EEPROMData)
     79a:	f7 01       	movw	r30, r14
     79c:	e1 0f       	add	r30, r17
     79e:	f1 1d       	adc	r31, r1
     7a0:	90 81       	ld	r25, Z
     7a2:	89 13       	cpse	r24, r25
     7a4:	01 c0       	rjmp	.+2      	; 0x7a8 <AdminLogin+0xa0>
		{
			ValidPassword++;
     7a6:	d3 94       	inc	r13
		else
		{
			/*Do Nothing*/
		}
	}
	for (Counter = 0; Counter < 4; Counter++)
     7a8:	1f 5f       	subi	r17, 0xFF	; 255
     7aa:	14 30       	cpi	r17, 0x04	; 4
     7ac:	88 f3       	brcs	.-30     	; 0x790 <AdminLogin+0x88>
		{
			/*Do Nothing*/
		}
		
	}
	if ((ValidUsername == 3) && (ValidPassword == 4))
     7ae:	03 30       	cpi	r16, 0x03	; 3
     7b0:	49 f4       	brne	.+18     	; 0x7c4 <AdminLogin+0xbc>
     7b2:	84 e0       	ldi	r24, 0x04	; 4
     7b4:	d8 12       	cpse	r13, r24
     7b6:	06 c0       	rjmp	.+12     	; 0x7c4 <AdminLogin+0xbc>
	{
		/*Print on LCD Login Successful*/
		H_Lcd_WriteString("Login Successful");
     7b8:	88 ee       	ldi	r24, 0xE8	; 232
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
		return 1;
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	2c c0       	rjmp	.+88     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	else if ((ValidPassword == 4) && (ValidUsername != 3)  )
     7c4:	84 e0       	ldi	r24, 0x04	; 4
     7c6:	d8 12       	cpse	r13, r24
     7c8:	08 c0       	rjmp	.+16     	; 0x7da <AdminLogin+0xd2>
     7ca:	03 30       	cpi	r16, 0x03	; 3
     7cc:	31 f0       	breq	.+12     	; 0x7da <AdminLogin+0xd2>
	{
		/*Print on LCD invalid Username*/
		H_Lcd_WriteString("Invalid Username");
     7ce:	89 e8       	ldi	r24, 0x89	; 137
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
		return 0;
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	21 c0       	rjmp	.+66     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	else if ((ValidUsername == 3) && (ValidPassword != 4))
     7da:	03 30       	cpi	r16, 0x03	; 3
     7dc:	49 f4       	brne	.+18     	; 0x7f0 <AdminLogin+0xe8>
     7de:	84 e0       	ldi	r24, 0x04	; 4
     7e0:	d8 16       	cp	r13, r24
     7e2:	31 f0       	breq	.+12     	; 0x7f0 <AdminLogin+0xe8>
	{
		/*Print on LCD Invalid Password*/
		H_Lcd_WriteString("Invalid Password");
     7e4:	8f e3       	ldi	r24, 0x3F	; 63
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
		return 0;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	16 c0       	rjmp	.+44     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	}
	else if ((ValidUsername != 3) && (ValidPassword != 4))
     7f0:	03 30       	cpi	r16, 0x03	; 3
     7f2:	89 f0       	breq	.+34     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	d8 16       	cp	r13, r24
     7f8:	81 f0       	breq	.+32     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
	{
		H_Lcd_WriteString("Invalid Username");
     7fa:	89 e8       	ldi	r24, 0x89	; 137
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
		H_Lcd_GoTo(1,0);
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
		H_Lcd_WriteString("Invalid Password");
     80a:	8f e3       	ldi	r24, 0x3F	; 63
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
		/*Print on LCD Invalid Username & Invalid Password*/
		return 0;
     812:	80 e0       	ldi	r24, 0x00	; 0
     814:	03 c0       	rjmp	.+6      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	} 
	else
	{
		/*Do Nothing*/
	}
	return 0;
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	01 c0       	rjmp	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
     81a:	80 e0       	ldi	r24, 0x00	; 0
}
     81c:	27 96       	adiw	r28, 0x07	; 7
     81e:	0f b6       	in	r0, 0x3f	; 63
     820:	f8 94       	cli
     822:	de bf       	out	0x3e, r29	; 62
     824:	0f be       	out	0x3f, r0	; 63
     826:	cd bf       	out	0x3d, r28	; 61
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	1f 91       	pop	r17
     82e:	0f 91       	pop	r16
     830:	ff 90       	pop	r15
     832:	ef 90       	pop	r14
     834:	df 90       	pop	r13
     836:	cf 90       	pop	r12
     838:	08 95       	ret

0000083a <welcomeScreen_Login>:
	H_Buzzer_Init();
	H_Buzzer_On();
	while(1);
}

void welcomeScreen_Login(){
     83a:	1f 93       	push	r17
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
     844:	27 97       	sbiw	r28, 0x07	; 7
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	f8 94       	cli
     84a:	de bf       	out	0x3e, r29	; 62
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	cd bf       	out	0x3d, r28	; 61
     850:	2f ef       	ldi	r18, 0xFF	; 255
     852:	89 e6       	ldi	r24, 0x69	; 105
     854:	98 e1       	ldi	r25, 0x18	; 24
     856:	21 50       	subi	r18, 0x01	; 1
     858:	80 40       	sbci	r24, 0x00	; 0
     85a:	90 40       	sbci	r25, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <welcomeScreen_Login+0x1c>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
	_delay_ms(500);
	H_Lcd_Clear();
     862:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
	H_Lcd_GoTo(0,4);
     866:	64 e0       	ldi	r22, 0x04	; 4
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
	H_Lcd_WriteString("Welcome");
     86e:	80 e5       	ldi	r24, 0x50	; 80
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
	
	H_Lcd_GoTo(1,3);
     876:	63 e0       	ldi	r22, 0x03	; 3
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
	H_Lcd_WriteString("Smart Home");
     87e:	88 e5       	ldi	r24, 0x58	; 88
     880:	91 e0       	ldi	r25, 0x01	; 1
     882:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
     886:	2f ef       	ldi	r18, 0xFF	; 255
     888:	8b e7       	ldi	r24, 0x7B	; 123
     88a:	92 e9       	ldi	r25, 0x92	; 146
     88c:	21 50       	subi	r18, 0x01	; 1
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	e1 f7       	brne	.-8      	; 0x88c <__stack+0x2d>
     894:	00 c0       	rjmp	.+0      	; 0x896 <__stack+0x37>
     896:	00 00       	nop
	_delay_ms(3000);
	
	u8	Trial=0, SuccessLogin=0, UserID[3]={0,0,0}, UserPassword[4]={0,0,0,0};
     898:	19 82       	std	Y+1, r1	; 0x01
     89a:	1a 82       	std	Y+2, r1	; 0x02
     89c:	1b 82       	std	Y+3, r1	; 0x03
     89e:	1c 82       	std	Y+4, r1	; 0x04
     8a0:	1d 82       	std	Y+5, r1	; 0x05
     8a2:	1e 82       	std	Y+6, r1	; 0x06
     8a4:	1f 82       	std	Y+7, r1	; 0x07
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	10 e0       	ldi	r17, 0x00	; 0
	while(SuccessLogin != 1){
     8aa:	16 c0       	rjmp	.+44     	; 0x8d8 <__stack+0x79>
		Trial++;
     8ac:	1f 5f       	subi	r17, 0xFF	; 255
		if(Trial > 3)
     8ae:	14 30       	cpi	r17, 0x04	; 4
     8b0:	60 f0       	brcs	.+24     	; 0x8ca <__stack+0x6b>
		{
			H_Lcd_Clear();
     8b2:	0e 94 ba 08 	call	0x1174	; 0x1174 <H_Lcd_Clear>
			H_Lcd_GoTo(0,2);
     8b6:	62 e0       	ldi	r22, 0x02	; 2
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
			H_Lcd_WriteString("Warning...");
     8be:	84 e3       	ldi	r24, 0x34	; 52
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Lcd_WriteString>
			BreakDownMode();
     8c6:	0e 94 49 00 	call	0x92	; 0x92 <BreakDownMode>
		}
		else
		{
			SuccessLogin = AdminLogin(UserID,UserPassword);
     8ca:	be 01       	movw	r22, r28
     8cc:	6c 5f       	subi	r22, 0xFC	; 252
     8ce:	7f 4f       	sbci	r23, 0xFF	; 255
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	0e 94 84 03 	call	0x708	; 0x708 <AdminLogin>
	H_Lcd_GoTo(1,3);
	H_Lcd_WriteString("Smart Home");
	_delay_ms(3000);
	
	u8	Trial=0, SuccessLogin=0, UserID[3]={0,0,0}, UserPassword[4]={0,0,0,0};
	while(SuccessLogin != 1){
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	41 f7       	brne	.-48     	; 0x8ac <__stack+0x4d>
		else
		{
			SuccessLogin = AdminLogin(UserID,UserPassword);
		}
	}
}
     8dc:	27 96       	adiw	r28, 0x07	; 7
     8de:	0f b6       	in	r0, 0x3f	; 63
     8e0:	f8 94       	cli
     8e2:	de bf       	out	0x3e, r29	; 62
     8e4:	0f be       	out	0x3f, r0	; 63
     8e6:	cd bf       	out	0x3d, r28	; 61
     8e8:	df 91       	pop	r29
     8ea:	cf 91       	pop	r28
     8ec:	1f 91       	pop	r17
     8ee:	08 95       	ret

000008f0 <main>:
u8 PageAddress=1;


int main ()
{
	H_Lcd_Init();
     8f0:	0e 94 a4 07 	call	0xf48	; 0xf48 <H_Lcd_Init>
	H_KeyPad_Init();
     8f4:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <H_KeyPad_Init>
	H_Eeprom_Init();
     8f8:	0e 94 bb 04 	call	0x976	; 0x976 <H_Eeprom_Init>
	
	H_Hc05_Init();
     8fc:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <H_Hc05_Init>
	H_Lm35_Init();
     900:	0e 94 ef 08 	call	0x11de	; 0x11de <H_Lm35_Init>
	H_DcMotor_Init();
     904:	0e 94 9e 04 	call	0x93c	; 0x93c <H_DcMotor_Init>
	H_Servo_Init();
     908:	0e 94 01 09 	call	0x1202	; 0x1202 <H_Servo_Init>
	Door_Switch();
     90c:	0e 94 80 00 	call	0x100	; 0x100 <Door_Switch>
	//System_Init();
	
	if (FRIST_USE	==	TRUE)
     910:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	21 f4       	brne	.+8      	; 0x920 <main+0x30>
	{
		Login_System_Init();
     918:	0e 94 dd 02 	call	0x5ba	; 0x5ba <Login_System_Init>
		FRIST_USE=FALSE;
     91c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	else
	{
		/*DO Nothing*/
	}
		
	welcomeScreen_Login();
     920:	0e 94 1d 04 	call	0x83a	; 0x83a <welcomeScreen_Login>
	Admin_MainScreen();
     924:	0e 94 3c 03 	call	0x678	; 0x678 <Admin_MainScreen>

00000928 <H_Buzzer_Init>:

#include "Buzzer.h"

void	H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZERPIN,OUTPUT);
     928:	61 e0       	ldi	r22, 0x01	; 1
     92a:	8a e2       	ldi	r24, 0x2A	; 42
     92c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
     930:	08 95       	ret

00000932 <H_Buzzer_On>:
}

void	H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZERPIN,HIGH);
     932:	61 e0       	ldi	r22, 0x01	; 1
     934:	8a e2       	ldi	r24, 0x2A	; 42
     936:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     93a:	08 95       	ret

0000093c <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init				(void)
{
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	85 e1       	ldi	r24, 0x15	; 21
     940:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_0,OUTPUT);
     944:	61 e0       	ldi	r22, 0x01	; 1
     946:	84 e1       	ldi	r24, 0x14	; 20
     948:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Pwm0_Init();
     94c:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <M_Pwm0_Init>
     950:	08 95       	ret

00000952 <H_DcMotor_SetDirection>:
}


void H_DcMotor_SetDirection(u8 Local_u8_Direction)
{
	M_Dio_PinWrite(DC_MOTOR_PIN_0,HIGH);
     952:	61 e0       	ldi	r22, 0x01	; 1
     954:	84 e1       	ldi	r24, 0x14	; 20
     956:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_1,LOW);	
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	85 e1       	ldi	r24, 0x15	; 21
     95e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     962:	08 95       	ret

00000964 <H_DcMotor_SetSpeed>:
}


void H_DcMotor_SetSpeed(u8 Local_u8_Speed)
{
	M_Pwm0_SetDutyCycle(Local_u8_Speed);
     964:	0e 94 0d 0c 	call	0x181a	; 0x181a <M_Pwm0_SetDutyCycle>
     968:	08 95       	ret

0000096a <H_DcMotor_Start>:
}


void H_DcMotor_Start(void)
{
	M_Pwm0_Start();
     96a:	0e 94 2d 0c 	call	0x185a	; 0x185a <M_Pwm0_Start>
     96e:	08 95       	ret

00000970 <H_DcMotor_Stop>:
}


void H_DcMotor_Stop				(void)
{
	M_Pwm0_Stop();
     970:	0e 94 30 0c 	call	0x1860	; 0x1860 <M_Pwm0_Stop>
     974:	08 95       	ret

00000976 <H_Eeprom_Init>:
 */ 
#include "Eeprom.h"

void H_Eeprom_Init(void)
{
	M_I2c_Init();
     976:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <M_I2c_Init>
     97a:	08 95       	ret

0000097c <H_Eeprom_Write>:
}
void H_Eeprom_Write(u8 Local_u8_Data,u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     97c:	1f 93       	push	r17
     97e:	cf 93       	push	r28
     980:	df 93       	push	r29
	if(Local_u8_PageAddress < 8)
     982:	68 30       	cpi	r22, 0x08	; 8
     984:	88 f4       	brcc	.+34     	; 0x9a8 <H_Eeprom_Write+0x2c>
     986:	14 2f       	mov	r17, r20
     988:	c6 2f       	mov	r28, r22
     98a:	d8 2f       	mov	r29, r24
	{
		M_I2c_StartCondition();
     98c:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <M_I2c_StartCondition>
		M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     990:	8c 2f       	mov	r24, r28
     992:	80 65       	ori	r24, 0x50	; 80
     994:	0e 94 85 0b 	call	0x170a	; 0x170a <M_I2c_SendSlaveAddressWrite>
		M_I2c_SendSByte(Local_u8_ByteAddress);
     998:	81 2f       	mov	r24, r17
     99a:	0e 94 ae 0b 	call	0x175c	; 0x175c <M_I2c_SendSByte>
		M_I2c_SendSByte(Local_u8_Data);
     99e:	8d 2f       	mov	r24, r29
     9a0:	0e 94 ae 0b 	call	0x175c	; 0x175c <M_I2c_SendSByte>
		M_I2c_StopCondition();
     9a4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <M_I2c_StopCondition>
	}
}
     9a8:	df 91       	pop	r29
     9aa:	cf 91       	pop	r28
     9ac:	1f 91       	pop	r17
     9ae:	08 95       	ret

000009b0 <H_Eeprom_Read>:
u8   H_Eeprom_Read(u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	c8 2f       	mov	r28, r24
     9b6:	d6 2f       	mov	r29, r22
	u8 Local_u8_Data = 0;
	M_I2c_StartCondition();
     9b8:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <M_I2c_StartCondition>
	M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     9bc:	c0 65       	ori	r28, 0x50	; 80
     9be:	8c 2f       	mov	r24, r28
     9c0:	0e 94 85 0b 	call	0x170a	; 0x170a <M_I2c_SendSlaveAddressWrite>
	M_I2c_SendSByte(Local_u8_ByteAddress);
     9c4:	8d 2f       	mov	r24, r29
     9c6:	0e 94 ae 0b 	call	0x175c	; 0x175c <M_I2c_SendSByte>
	M_I2c_RepeatedStart();
     9ca:	0e 94 cd 0b 	call	0x179a	; 0x179a <M_I2c_RepeatedStart>
	M_I2c_SendSlaveAddressRead((0x50 | Local_u8_PageAddress));
     9ce:	8c 2f       	mov	r24, r28
     9d0:	0e 94 98 0b 	call	0x1730	; 0x1730 <M_I2c_SendSlaveAddressRead>
	Local_u8_Data = M_I2c_ReadByteNoAck();
     9d4:	0e 94 c6 0b 	call	0x178c	; 0x178c <M_I2c_ReadByteNoAck>
     9d8:	c8 2f       	mov	r28, r24
	M_I2c_StopCondition();
     9da:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <M_I2c_StopCondition>
	return Local_u8_Data;
     9de:	8c 2f       	mov	r24, r28
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <H_Hc05_Init>:
{
	M_Uart_Init();
}
void H_Hc05_Send(u8 Local_u8_Data)
{
	M_Uart_Write(Local_u8_Data);
     9e6:	0e 94 8d 0c 	call	0x191a	; 0x191a <M_Uart_Init>
     9ea:	08 95       	ret

000009ec <H_Hc05_Rec>:
}
u8   H_Hc05_Rec(void)
{
	u8 Local_u8_Data = 0;
	Local_u8_Data = M_Uart_Read();
     9ec:	0e 94 a1 0c 	call	0x1942	; 0x1942 <M_Uart_Read>
	return Local_u8_Data;
     9f0:	08 95       	ret

000009f2 <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	88 e2       	ldi	r24, 0x28	; 40
     9f6:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	89 e2       	ldi	r24, 0x29	; 41
     9fe:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     a02:	61 e0       	ldi	r22, 0x01	; 1
     a04:	8a e2       	ldi	r24, 0x2A	; 42
     a06:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     a0a:	61 e0       	ldi	r22, 0x01	; 1
     a0c:	8b e2       	ldi	r24, 0x2B	; 43
     a0e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     a12:	61 e0       	ldi	r22, 0x01	; 1
     a14:	88 e2       	ldi	r24, 0x28	; 40
     a16:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     a1a:	61 e0       	ldi	r22, 0x01	; 1
     a1c:	89 e2       	ldi	r24, 0x29	; 41
     a1e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     a22:	61 e0       	ldi	r22, 0x01	; 1
     a24:	8a e2       	ldi	r24, 0x2A	; 42
     a26:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	8b e2       	ldi	r24, 0x2B	; 43
     a2e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	8c e2       	ldi	r24, 0x2C	; 44
     a36:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	8d e2       	ldi	r24, 0x2D	; 45
     a3e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     a42:	60 e0       	ldi	r22, 0x00	; 0
     a44:	8e e2       	ldi	r24, 0x2E	; 46
     a46:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	8f e2       	ldi	r24, 0x2F	; 47
     a4e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
     a52:	60 e0       	ldi	r22, 0x00	; 0
     a54:	8c e2       	ldi	r24, 0x2C	; 44
     a56:	0e 94 b2 0a 	call	0x1564	; 0x1564 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	8d e2       	ldi	r24, 0x2D	; 45
     a5e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	8e e2       	ldi	r24, 0x2E	; 46
     a66:	0e 94 b2 0a 	call	0x1564	; 0x1564 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	8f e2       	ldi	r24, 0x2F	; 47
     a6e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <M_Dio_PinPullUp>
     a72:	08 95       	ret

00000a74 <H_KeyPad_Read>:
		
}
u8	 H_KeyPad_Read				(void)
{
     a74:	cf 93       	push	r28
	u8 Local_u8_KeyPadArr [4][4]	={	{'7','8','9','/'},
										{'4','5','6','*'},
										{'1','2','3','-'},										
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
     a76:	60 e0       	ldi	r22, 0x00	; 0
     a78:	88 e2       	ldi	r24, 0x28	; 40
     a7a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
     a7e:	8c e2       	ldi	r24, 0x2C	; 44
     a80:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     a84:	81 11       	cpse	r24, r1
     a86:	19 c0       	rjmp	.+50     	; 0xaba <H_KeyPad_Read+0x46>
     a88:	2f ef       	ldi	r18, 0xFF	; 255
     a8a:	86 e7       	ldi	r24, 0x76	; 118
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	80 40       	sbci	r24, 0x00	; 0
     a92:	90 40       	sbci	r25, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <H_KeyPad_Read+0x1a>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <H_KeyPad_Read+0x24>
     a98:	00 00       	nop
     a9a:	8c e2       	ldi	r24, 0x2C	; 44
     a9c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     aa0:	81 11       	cpse	r24, r1
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <H_KeyPad_Read+0x4a>
     aa4:	8c e2       	ldi	r24, 0x2C	; 44
     aa6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     aaa:	88 23       	and	r24, r24
     aac:	d9 f3       	breq	.-10     	; 0xaa4 <H_KeyPad_Read+0x30>
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	88 e2       	ldi	r24, 0x28	; 40
     ab2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     ab6:	c7 e3       	ldi	r28, 0x37	; 55
     ab8:	03 c0       	rjmp	.+6      	; 0xac0 <H_KeyPad_Read+0x4c>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
		
}
u8	 H_KeyPad_Read				(void)
{
	u8 Local_u8_KeypadReading		=	0;
     aba:	c0 e0       	ldi	r28, 0x00	; 0
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <H_KeyPad_Read+0x4c>
     abe:	c0 e0       	ldi	r28, 0x00	; 0
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][1];}}
     ac0:	8d e2       	ldi	r24, 0x2D	; 45
     ac2:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     ac6:	81 11       	cpse	r24, r1
     ac8:	18 c0       	rjmp	.+48     	; 0xafa <H_KeyPad_Read+0x86>
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	86 e7       	ldi	r24, 0x76	; 118
     ace:	91 e0       	ldi	r25, 0x01	; 1
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <H_KeyPad_Read+0x5c>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <H_KeyPad_Read+0x66>
     ada:	00 00       	nop
     adc:	8d e2       	ldi	r24, 0x2D	; 45
     ade:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     ae2:	81 11       	cpse	r24, r1
     ae4:	0a c0       	rjmp	.+20     	; 0xafa <H_KeyPad_Read+0x86>
     ae6:	8d e2       	ldi	r24, 0x2D	; 45
     ae8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     aec:	88 23       	and	r24, r24
     aee:	d9 f3       	breq	.-10     	; 0xae6 <H_KeyPad_Read+0x72>
     af0:	61 e0       	ldi	r22, 0x01	; 1
     af2:	88 e2       	ldi	r24, 0x28	; 40
     af4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     af8:	c8 e3       	ldi	r28, 0x38	; 56
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][2];}}
     afa:	8e e2       	ldi	r24, 0x2E	; 46
     afc:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     b00:	81 11       	cpse	r24, r1
     b02:	18 c0       	rjmp	.+48     	; 0xb34 <H_KeyPad_Read+0xc0>
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	86 e7       	ldi	r24, 0x76	; 118
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	21 50       	subi	r18, 0x01	; 1
     b0c:	80 40       	sbci	r24, 0x00	; 0
     b0e:	90 40       	sbci	r25, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <H_KeyPad_Read+0x96>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <H_KeyPad_Read+0xa0>
     b14:	00 00       	nop
     b16:	8e e2       	ldi	r24, 0x2E	; 46
     b18:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     b1c:	81 11       	cpse	r24, r1
     b1e:	0a c0       	rjmp	.+20     	; 0xb34 <H_KeyPad_Read+0xc0>
     b20:	8e e2       	ldi	r24, 0x2E	; 46
     b22:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     b26:	88 23       	and	r24, r24
     b28:	d9 f3       	breq	.-10     	; 0xb20 <H_KeyPad_Read+0xac>
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     b32:	c9 e3       	ldi	r28, 0x39	; 57
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][3];}}
     b34:	8f e2       	ldi	r24, 0x2F	; 47
     b36:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     b3a:	81 11       	cpse	r24, r1
     b3c:	18 c0       	rjmp	.+48     	; 0xb6e <H_KeyPad_Read+0xfa>
     b3e:	2f ef       	ldi	r18, 0xFF	; 255
     b40:	86 e7       	ldi	r24, 0x76	; 118
     b42:	91 e0       	ldi	r25, 0x01	; 1
     b44:	21 50       	subi	r18, 0x01	; 1
     b46:	80 40       	sbci	r24, 0x00	; 0
     b48:	90 40       	sbci	r25, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <H_KeyPad_Read+0xd0>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <H_KeyPad_Read+0xda>
     b4e:	00 00       	nop
     b50:	8f e2       	ldi	r24, 0x2F	; 47
     b52:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     b56:	81 11       	cpse	r24, r1
     b58:	0a c0       	rjmp	.+20     	; 0xb6e <H_KeyPad_Read+0xfa>
     b5a:	8f e2       	ldi	r24, 0x2F	; 47
     b5c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     b60:	88 23       	and	r24, r24
     b62:	d9 f3       	breq	.-10     	; 0xb5a <H_KeyPad_Read+0xe6>
     b64:	61 e0       	ldi	r22, 0x01	; 1
     b66:	88 e2       	ldi	r24, 0x28	; 40
     b68:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     b6c:	cf e2       	ldi	r28, 0x2F	; 47
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     b6e:	61 e0       	ldi	r22, 0x01	; 1
     b70:	88 e2       	ldi	r24, 0x28	; 40
     b72:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,LOW);
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	89 e2       	ldi	r24, 0x29	; 41
     b7a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][0];}}
     b7e:	8c e2       	ldi	r24, 0x2C	; 44
     b80:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     b84:	81 11       	cpse	r24, r1
     b86:	18 c0       	rjmp	.+48     	; 0xbb8 <H_KeyPad_Read+0x144>
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	86 e7       	ldi	r24, 0x76	; 118
     b8c:	91 e0       	ldi	r25, 0x01	; 1
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <H_KeyPad_Read+0x11a>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <H_KeyPad_Read+0x124>
     b98:	00 00       	nop
     b9a:	8c e2       	ldi	r24, 0x2C	; 44
     b9c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     ba0:	81 11       	cpse	r24, r1
     ba2:	0a c0       	rjmp	.+20     	; 0xbb8 <H_KeyPad_Read+0x144>
     ba4:	8c e2       	ldi	r24, 0x2C	; 44
     ba6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     baa:	88 23       	and	r24, r24
     bac:	d9 f3       	breq	.-10     	; 0xba4 <H_KeyPad_Read+0x130>
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	89 e2       	ldi	r24, 0x29	; 41
     bb2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     bb6:	c4 e3       	ldi	r28, 0x34	; 52
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][1];}}
     bb8:	8d e2       	ldi	r24, 0x2D	; 45
     bba:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     bbe:	81 11       	cpse	r24, r1
     bc0:	18 c0       	rjmp	.+48     	; 0xbf2 <H_KeyPad_Read+0x17e>
     bc2:	2f ef       	ldi	r18, 0xFF	; 255
     bc4:	86 e7       	ldi	r24, 0x76	; 118
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	80 40       	sbci	r24, 0x00	; 0
     bcc:	90 40       	sbci	r25, 0x00	; 0
     bce:	e1 f7       	brne	.-8      	; 0xbc8 <H_KeyPad_Read+0x154>
     bd0:	00 c0       	rjmp	.+0      	; 0xbd2 <H_KeyPad_Read+0x15e>
     bd2:	00 00       	nop
     bd4:	8d e2       	ldi	r24, 0x2D	; 45
     bd6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     bda:	81 11       	cpse	r24, r1
     bdc:	0a c0       	rjmp	.+20     	; 0xbf2 <H_KeyPad_Read+0x17e>
     bde:	8d e2       	ldi	r24, 0x2D	; 45
     be0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     be4:	88 23       	and	r24, r24
     be6:	d9 f3       	breq	.-10     	; 0xbde <H_KeyPad_Read+0x16a>
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	89 e2       	ldi	r24, 0x29	; 41
     bec:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     bf0:	c5 e3       	ldi	r28, 0x35	; 53
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][2];}}
     bf2:	8e e2       	ldi	r24, 0x2E	; 46
     bf4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     bf8:	81 11       	cpse	r24, r1
     bfa:	18 c0       	rjmp	.+48     	; 0xc2c <H_KeyPad_Read+0x1b8>
     bfc:	2f ef       	ldi	r18, 0xFF	; 255
     bfe:	86 e7       	ldi	r24, 0x76	; 118
     c00:	91 e0       	ldi	r25, 0x01	; 1
     c02:	21 50       	subi	r18, 0x01	; 1
     c04:	80 40       	sbci	r24, 0x00	; 0
     c06:	90 40       	sbci	r25, 0x00	; 0
     c08:	e1 f7       	brne	.-8      	; 0xc02 <H_KeyPad_Read+0x18e>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <H_KeyPad_Read+0x198>
     c0c:	00 00       	nop
     c0e:	8e e2       	ldi	r24, 0x2E	; 46
     c10:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     c14:	81 11       	cpse	r24, r1
     c16:	0a c0       	rjmp	.+20     	; 0xc2c <H_KeyPad_Read+0x1b8>
     c18:	8e e2       	ldi	r24, 0x2E	; 46
     c1a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     c1e:	88 23       	and	r24, r24
     c20:	d9 f3       	breq	.-10     	; 0xc18 <H_KeyPad_Read+0x1a4>
     c22:	61 e0       	ldi	r22, 0x01	; 1
     c24:	89 e2       	ldi	r24, 0x29	; 41
     c26:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     c2a:	c6 e3       	ldi	r28, 0x36	; 54
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][3];}}
     c2c:	8f e2       	ldi	r24, 0x2F	; 47
     c2e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     c32:	81 11       	cpse	r24, r1
     c34:	18 c0       	rjmp	.+48     	; 0xc66 <H_KeyPad_Read+0x1f2>
     c36:	2f ef       	ldi	r18, 0xFF	; 255
     c38:	86 e7       	ldi	r24, 0x76	; 118
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	21 50       	subi	r18, 0x01	; 1
     c3e:	80 40       	sbci	r24, 0x00	; 0
     c40:	90 40       	sbci	r25, 0x00	; 0
     c42:	e1 f7       	brne	.-8      	; 0xc3c <H_KeyPad_Read+0x1c8>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <H_KeyPad_Read+0x1d2>
     c46:	00 00       	nop
     c48:	8f e2       	ldi	r24, 0x2F	; 47
     c4a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     c4e:	81 11       	cpse	r24, r1
     c50:	0a c0       	rjmp	.+20     	; 0xc66 <H_KeyPad_Read+0x1f2>
     c52:	8f e2       	ldi	r24, 0x2F	; 47
     c54:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     c58:	88 23       	and	r24, r24
     c5a:	d9 f3       	breq	.-10     	; 0xc52 <H_KeyPad_Read+0x1de>
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	89 e2       	ldi	r24, 0x29	; 41
     c60:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     c64:	ca e2       	ldi	r28, 0x2A	; 42
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     c66:	61 e0       	ldi	r22, 0x01	; 1
     c68:	89 e2       	ldi	r24, 0x29	; 41
     c6a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,LOW);
     c6e:	60 e0       	ldi	r22, 0x00	; 0
     c70:	8a e2       	ldi	r24, 0x2A	; 42
     c72:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
		
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][0];}}
     c76:	8c e2       	ldi	r24, 0x2C	; 44
     c78:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     c7c:	81 11       	cpse	r24, r1
     c7e:	18 c0       	rjmp	.+48     	; 0xcb0 <H_KeyPad_Read+0x23c>
     c80:	2f ef       	ldi	r18, 0xFF	; 255
     c82:	86 e7       	ldi	r24, 0x76	; 118
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	21 50       	subi	r18, 0x01	; 1
     c88:	80 40       	sbci	r24, 0x00	; 0
     c8a:	90 40       	sbci	r25, 0x00	; 0
     c8c:	e1 f7       	brne	.-8      	; 0xc86 <H_KeyPad_Read+0x212>
     c8e:	00 c0       	rjmp	.+0      	; 0xc90 <H_KeyPad_Read+0x21c>
     c90:	00 00       	nop
     c92:	8c e2       	ldi	r24, 0x2C	; 44
     c94:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     c98:	81 11       	cpse	r24, r1
     c9a:	0a c0       	rjmp	.+20     	; 0xcb0 <H_KeyPad_Read+0x23c>
     c9c:	8c e2       	ldi	r24, 0x2C	; 44
     c9e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     ca2:	88 23       	and	r24, r24
     ca4:	d9 f3       	breq	.-10     	; 0xc9c <H_KeyPad_Read+0x228>
     ca6:	61 e0       	ldi	r22, 0x01	; 1
     ca8:	8a e2       	ldi	r24, 0x2A	; 42
     caa:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     cae:	c1 e3       	ldi	r28, 0x31	; 49
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][1];}}
     cb0:	8d e2       	ldi	r24, 0x2D	; 45
     cb2:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     cb6:	81 11       	cpse	r24, r1
     cb8:	18 c0       	rjmp	.+48     	; 0xcea <H_KeyPad_Read+0x276>
     cba:	2f ef       	ldi	r18, 0xFF	; 255
     cbc:	86 e7       	ldi	r24, 0x76	; 118
     cbe:	91 e0       	ldi	r25, 0x01	; 1
     cc0:	21 50       	subi	r18, 0x01	; 1
     cc2:	80 40       	sbci	r24, 0x00	; 0
     cc4:	90 40       	sbci	r25, 0x00	; 0
     cc6:	e1 f7       	brne	.-8      	; 0xcc0 <H_KeyPad_Read+0x24c>
     cc8:	00 c0       	rjmp	.+0      	; 0xcca <H_KeyPad_Read+0x256>
     cca:	00 00       	nop
     ccc:	8d e2       	ldi	r24, 0x2D	; 45
     cce:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     cd2:	81 11       	cpse	r24, r1
     cd4:	0a c0       	rjmp	.+20     	; 0xcea <H_KeyPad_Read+0x276>
     cd6:	8d e2       	ldi	r24, 0x2D	; 45
     cd8:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     cdc:	88 23       	and	r24, r24
     cde:	d9 f3       	breq	.-10     	; 0xcd6 <H_KeyPad_Read+0x262>
     ce0:	61 e0       	ldi	r22, 0x01	; 1
     ce2:	8a e2       	ldi	r24, 0x2A	; 42
     ce4:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     ce8:	c2 e3       	ldi	r28, 0x32	; 50
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][2];}}
     cea:	8e e2       	ldi	r24, 0x2E	; 46
     cec:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     cf0:	81 11       	cpse	r24, r1
     cf2:	18 c0       	rjmp	.+48     	; 0xd24 <H_KeyPad_Read+0x2b0>
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	86 e7       	ldi	r24, 0x76	; 118
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	21 50       	subi	r18, 0x01	; 1
     cfc:	80 40       	sbci	r24, 0x00	; 0
     cfe:	90 40       	sbci	r25, 0x00	; 0
     d00:	e1 f7       	brne	.-8      	; 0xcfa <H_KeyPad_Read+0x286>
     d02:	00 c0       	rjmp	.+0      	; 0xd04 <H_KeyPad_Read+0x290>
     d04:	00 00       	nop
     d06:	8e e2       	ldi	r24, 0x2E	; 46
     d08:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d0c:	81 11       	cpse	r24, r1
     d0e:	0a c0       	rjmp	.+20     	; 0xd24 <H_KeyPad_Read+0x2b0>
     d10:	8e e2       	ldi	r24, 0x2E	; 46
     d12:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d16:	88 23       	and	r24, r24
     d18:	d9 f3       	breq	.-10     	; 0xd10 <H_KeyPad_Read+0x29c>
     d1a:	61 e0       	ldi	r22, 0x01	; 1
     d1c:	8a e2       	ldi	r24, 0x2A	; 42
     d1e:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     d22:	c3 e3       	ldi	r28, 0x33	; 51
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][3];}}
     d24:	8f e2       	ldi	r24, 0x2F	; 47
     d26:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d2a:	81 11       	cpse	r24, r1
     d2c:	18 c0       	rjmp	.+48     	; 0xd5e <H_KeyPad_Read+0x2ea>
     d2e:	2f ef       	ldi	r18, 0xFF	; 255
     d30:	86 e7       	ldi	r24, 0x76	; 118
     d32:	91 e0       	ldi	r25, 0x01	; 1
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	80 40       	sbci	r24, 0x00	; 0
     d38:	90 40       	sbci	r25, 0x00	; 0
     d3a:	e1 f7       	brne	.-8      	; 0xd34 <H_KeyPad_Read+0x2c0>
     d3c:	00 c0       	rjmp	.+0      	; 0xd3e <H_KeyPad_Read+0x2ca>
     d3e:	00 00       	nop
     d40:	8f e2       	ldi	r24, 0x2F	; 47
     d42:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d46:	81 11       	cpse	r24, r1
     d48:	0a c0       	rjmp	.+20     	; 0xd5e <H_KeyPad_Read+0x2ea>
     d4a:	8f e2       	ldi	r24, 0x2F	; 47
     d4c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d50:	88 23       	and	r24, r24
     d52:	d9 f3       	breq	.-10     	; 0xd4a <H_KeyPad_Read+0x2d6>
     d54:	61 e0       	ldi	r22, 0x01	; 1
     d56:	8a e2       	ldi	r24, 0x2A	; 42
     d58:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     d5c:	cd e2       	ldi	r28, 0x2D	; 45
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     d5e:	61 e0       	ldi	r22, 0x01	; 1
     d60:	8a e2       	ldi	r24, 0x2A	; 42
     d62:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
				
	M_Dio_PinWrite(KEYPAD_R3_PIN,LOW);
     d66:	60 e0       	ldi	r22, 0x00	; 0
     d68:	8b e2       	ldi	r24, 0x2B	; 43
     d6a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][0];}}
     d6e:	8c e2       	ldi	r24, 0x2C	; 44
     d70:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d74:	81 11       	cpse	r24, r1
     d76:	18 c0       	rjmp	.+48     	; 0xda8 <H_KeyPad_Read+0x334>
     d78:	2f ef       	ldi	r18, 0xFF	; 255
     d7a:	86 e7       	ldi	r24, 0x76	; 118
     d7c:	91 e0       	ldi	r25, 0x01	; 1
     d7e:	21 50       	subi	r18, 0x01	; 1
     d80:	80 40       	sbci	r24, 0x00	; 0
     d82:	90 40       	sbci	r25, 0x00	; 0
     d84:	e1 f7       	brne	.-8      	; 0xd7e <H_KeyPad_Read+0x30a>
     d86:	00 c0       	rjmp	.+0      	; 0xd88 <H_KeyPad_Read+0x314>
     d88:	00 00       	nop
     d8a:	8c e2       	ldi	r24, 0x2C	; 44
     d8c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d90:	81 11       	cpse	r24, r1
     d92:	0a c0       	rjmp	.+20     	; 0xda8 <H_KeyPad_Read+0x334>
     d94:	8c e2       	ldi	r24, 0x2C	; 44
     d96:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     d9a:	88 23       	and	r24, r24
     d9c:	d9 f3       	breq	.-10     	; 0xd94 <H_KeyPad_Read+0x320>
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	8b e2       	ldi	r24, 0x2B	; 43
     da2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     da6:	c3 e4       	ldi	r28, 0x43	; 67
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][1];}}
     da8:	8d e2       	ldi	r24, 0x2D	; 45
     daa:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     dae:	81 11       	cpse	r24, r1
     db0:	18 c0       	rjmp	.+48     	; 0xde2 <H_KeyPad_Read+0x36e>
     db2:	2f ef       	ldi	r18, 0xFF	; 255
     db4:	86 e7       	ldi	r24, 0x76	; 118
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	21 50       	subi	r18, 0x01	; 1
     dba:	80 40       	sbci	r24, 0x00	; 0
     dbc:	90 40       	sbci	r25, 0x00	; 0
     dbe:	e1 f7       	brne	.-8      	; 0xdb8 <H_KeyPad_Read+0x344>
     dc0:	00 c0       	rjmp	.+0      	; 0xdc2 <H_KeyPad_Read+0x34e>
     dc2:	00 00       	nop
     dc4:	8d e2       	ldi	r24, 0x2D	; 45
     dc6:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     dca:	81 11       	cpse	r24, r1
     dcc:	0a c0       	rjmp	.+20     	; 0xde2 <H_KeyPad_Read+0x36e>
     dce:	8d e2       	ldi	r24, 0x2D	; 45
     dd0:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     dd4:	88 23       	and	r24, r24
     dd6:	d9 f3       	breq	.-10     	; 0xdce <H_KeyPad_Read+0x35a>
     dd8:	61 e0       	ldi	r22, 0x01	; 1
     dda:	8b e2       	ldi	r24, 0x2B	; 43
     ddc:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     de0:	c0 e3       	ldi	r28, 0x30	; 48
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][2];}}
     de2:	8e e2       	ldi	r24, 0x2E	; 46
     de4:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     de8:	81 11       	cpse	r24, r1
     dea:	18 c0       	rjmp	.+48     	; 0xe1c <H_KeyPad_Read+0x3a8>
     dec:	2f ef       	ldi	r18, 0xFF	; 255
     dee:	86 e7       	ldi	r24, 0x76	; 118
     df0:	91 e0       	ldi	r25, 0x01	; 1
     df2:	21 50       	subi	r18, 0x01	; 1
     df4:	80 40       	sbci	r24, 0x00	; 0
     df6:	90 40       	sbci	r25, 0x00	; 0
     df8:	e1 f7       	brne	.-8      	; 0xdf2 <H_KeyPad_Read+0x37e>
     dfa:	00 c0       	rjmp	.+0      	; 0xdfc <H_KeyPad_Read+0x388>
     dfc:	00 00       	nop
     dfe:	8e e2       	ldi	r24, 0x2E	; 46
     e00:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     e04:	81 11       	cpse	r24, r1
     e06:	0a c0       	rjmp	.+20     	; 0xe1c <H_KeyPad_Read+0x3a8>
     e08:	8e e2       	ldi	r24, 0x2E	; 46
     e0a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     e0e:	88 23       	and	r24, r24
     e10:	d9 f3       	breq	.-10     	; 0xe08 <H_KeyPad_Read+0x394>
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	8b e2       	ldi	r24, 0x2B	; 43
     e16:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     e1a:	cd e3       	ldi	r28, 0x3D	; 61
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][3];}}
     e1c:	8f e2       	ldi	r24, 0x2F	; 47
     e1e:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     e22:	81 11       	cpse	r24, r1
     e24:	18 c0       	rjmp	.+48     	; 0xe56 <H_KeyPad_Read+0x3e2>
     e26:	2f ef       	ldi	r18, 0xFF	; 255
     e28:	86 e7       	ldi	r24, 0x76	; 118
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	21 50       	subi	r18, 0x01	; 1
     e2e:	80 40       	sbci	r24, 0x00	; 0
     e30:	90 40       	sbci	r25, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <H_KeyPad_Read+0x3b8>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <H_KeyPad_Read+0x3c2>
     e36:	00 00       	nop
     e38:	8f e2       	ldi	r24, 0x2F	; 47
     e3a:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     e3e:	81 11       	cpse	r24, r1
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <H_KeyPad_Read+0x3e2>
     e42:	8f e2       	ldi	r24, 0x2F	; 47
     e44:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <M_Dio_PinRead>
     e48:	88 23       	and	r24, r24
     e4a:	d9 f3       	breq	.-10     	; 0xe42 <H_KeyPad_Read+0x3ce>
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	8b e2       	ldi	r24, 0x2B	; 43
     e50:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     e54:	cb e2       	ldi	r28, 0x2B	; 43
	
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     e56:	61 e0       	ldi	r22, 0x01	; 1
     e58:	8b e2       	ldi	r24, 0x2B	; 43
     e5a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	
	return Local_u8_KeypadReading ;
     e5e:	8c 2f       	mov	r24, r28
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <H_Lcd_WriteCharacter>:
// 	#endif
// }


void H_Lcd_WriteCharacter	(u8 Local_u8_Character)
{
     e64:	cf 93       	push	r28
     e66:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
     e68:	61 e0       	ldi	r22, 0x01	; 1
     e6a:	85 e1       	ldi	r24, 0x15	; 21
     e6c:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	#elif		LCD_MODE	==	_4_BIT_MODE
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character & 0XF0);	
     e70:	8b b3       	in	r24, 0x1b	; 27
     e72:	8f 70       	andi	r24, 0x0F	; 15
     e74:	9c 2f       	mov	r25, r28
     e76:	90 7f       	andi	r25, 0xF0	; 240
     e78:	89 2b       	or	r24, r25
     e7a:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	87 e1       	ldi	r24, 0x17	; 23
     e80:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     e84:	8f e9       	ldi	r24, 0x9F	; 159
     e86:	9f e0       	ldi	r25, 0x0F	; 15
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <H_Lcd_WriteCharacter+0x24>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <H_Lcd_WriteCharacter+0x2a>
     e8e:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     e90:	60 e0       	ldi	r22, 0x00	; 0
     e92:	87 e1       	ldi	r24, 0x17	; 23
     e94:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character << 4);
     e98:	2b b3       	in	r18, 0x1b	; 27
     e9a:	30 e1       	ldi	r19, 0x10	; 16
     e9c:	c3 9f       	mul	r28, r19
     e9e:	c0 01       	movw	r24, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	92 2f       	mov	r25, r18
     ea4:	9f 70       	andi	r25, 0x0F	; 15
     ea6:	89 2b       	or	r24, r25
     ea8:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	87 e1       	ldi	r24, 0x17	; 23
     eae:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     eb2:	8f e9       	ldi	r24, 0x9F	; 159
     eb4:	9f e0       	ldi	r25, 0x0F	; 15
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <H_Lcd_WriteCharacter+0x52>
     eba:	00 c0       	rjmp	.+0      	; 0xebc <H_Lcd_WriteCharacter+0x58>
     ebc:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	87 e1       	ldi	r24, 0x17	; 23
     ec2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	#endif 

	
}
     ec6:	cf 91       	pop	r28
     ec8:	08 95       	ret

00000eca <H_Lcd_WriteCommand>:
// 	#endif
// }


void H_Lcd_WriteCommand		(u8 Local_u8_Command)
{
     eca:	cf 93       	push	r28
     ecc:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	85 e1       	ldi	r24, 0x15	; 21
     ed2:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	
	#elif		LCD_MODE	==	_4_BIT_MODE
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command & 0XF0);
     ed6:	8b b3       	in	r24, 0x1b	; 27
     ed8:	8f 70       	andi	r24, 0x0F	; 15
     eda:	9c 2f       	mov	r25, r28
     edc:	90 7f       	andi	r25, 0xF0	; 240
     ede:	89 2b       	or	r24, r25
     ee0:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	87 e1       	ldi	r24, 0x17	; 23
     ee6:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     eea:	8f e9       	ldi	r24, 0x9F	; 159
     eec:	9f e0       	ldi	r25, 0x0F	; 15
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	f1 f7       	brne	.-4      	; 0xeee <H_Lcd_WriteCommand+0x24>
     ef2:	00 c0       	rjmp	.+0      	; 0xef4 <H_Lcd_WriteCommand+0x2a>
     ef4:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	87 e1       	ldi	r24, 0x17	; 23
     efa:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     efe:	8f e1       	ldi	r24, 0x1F	; 31
     f00:	9e e4       	ldi	r25, 0x4E	; 78
     f02:	01 97       	sbiw	r24, 0x01	; 1
     f04:	f1 f7       	brne	.-4      	; 0xf02 <H_Lcd_WriteCommand+0x38>
     f06:	00 c0       	rjmp	.+0      	; 0xf08 <H_Lcd_WriteCommand+0x3e>
     f08:	00 00       	nop
	_delay_ms(5);

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command << 4);
     f0a:	2b b3       	in	r18, 0x1b	; 27
     f0c:	30 e1       	ldi	r19, 0x10	; 16
     f0e:	c3 9f       	mul	r28, r19
     f10:	c0 01       	movw	r24, r0
     f12:	11 24       	eor	r1, r1
     f14:	92 2f       	mov	r25, r18
     f16:	9f 70       	andi	r25, 0x0F	; 15
     f18:	89 2b       	or	r24, r25
     f1a:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     f1c:	61 e0       	ldi	r22, 0x01	; 1
     f1e:	87 e1       	ldi	r24, 0x17	; 23
     f20:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     f24:	8f e9       	ldi	r24, 0x9F	; 159
     f26:	9f e0       	ldi	r25, 0x0F	; 15
     f28:	01 97       	sbiw	r24, 0x01	; 1
     f2a:	f1 f7       	brne	.-4      	; 0xf28 <H_Lcd_WriteCommand+0x5e>
     f2c:	00 c0       	rjmp	.+0      	; 0xf2e <H_Lcd_WriteCommand+0x64>
     f2e:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     f30:	60 e0       	ldi	r22, 0x00	; 0
     f32:	87 e1       	ldi	r24, 0x17	; 23
     f34:	0e 94 e5 09 	call	0x13ca	; 0x13ca <M_Dio_PinWrite>
     f38:	8f e1       	ldi	r24, 0x1F	; 31
     f3a:	9e e4       	ldi	r25, 0x4E	; 78
     f3c:	01 97       	sbiw	r24, 0x01	; 1
     f3e:	f1 f7       	brne	.-4      	; 0xf3c <H_Lcd_WriteCommand+0x72>
     f40:	00 c0       	rjmp	.+0      	; 0xf42 <H_Lcd_WriteCommand+0x78>
     f42:	00 00       	nop
	_delay_ms(5);
	#endif

}
     f44:	cf 91       	pop	r28
     f46:	08 95       	ret

00000f48 <H_Lcd_Init>:
	M_Dio_PinMode(LCD_DATA_1_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_2_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_3_PIN,OUTPUT);
	#elif	LCD_MODE	==	_4_BIT_MODE
	#endif
	M_Dio_PinMode(LCD_DATA_4_PIN,OUTPUT);
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	8e e0       	ldi	r24, 0x0E	; 14
     f4c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_5_PIN,OUTPUT);
     f50:	61 e0       	ldi	r22, 0x01	; 1
     f52:	8f e0       	ldi	r24, 0x0F	; 15
     f54:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_6_PIN,OUTPUT);
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	80 e1       	ldi	r24, 0x10	; 16
     f5c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_7_PIN,OUTPUT);
     f60:	61 e0       	ldi	r22, 0x01	; 1
     f62:	81 e1       	ldi	r24, 0x11	; 17
     f64:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
     f68:	61 e0       	ldi	r22, 0x01	; 1
     f6a:	85 e1       	ldi	r24, 0x15	; 21
     f6c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	86 e1       	ldi	r24, 0x16	; 22
     f74:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);	
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	87 e1       	ldi	r24, 0x17	; 23
     f7c:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
     f80:	2f ef       	ldi	r18, 0xFF	; 255
     f82:	83 ed       	ldi	r24, 0xD3	; 211
     f84:	90 e3       	ldi	r25, 0x30	; 48
     f86:	21 50       	subi	r18, 0x01	; 1
     f88:	80 40       	sbci	r24, 0x00	; 0
     f8a:	90 40       	sbci	r25, 0x00	; 0
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <H_Lcd_Init+0x3e>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <H_Lcd_Init+0x48>
     f90:	00 00       	nop
	_delay_ms(1000);
	
	#if			LCD_MODE	==	_8_BIT_MODE	
	H_Lcd_WriteCommand(LCD_CMD_SELECT_8_BIT_MODE);				// to select 8 bit mode
	#elif		LCD_MODE	==	_4_BIT_MODE	
	H_Lcd_WriteCommand(0X33);
     f92:	83 e3       	ldi	r24, 0x33	; 51
     f94:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0X32);
     f98:	82 e3       	ldi	r24, 0x32	; 50
     f9a:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_SELECT_4_BIT_MODE);				// to select 4 bit mode
     f9e:	88 e2       	ldi	r24, 0x28	; 40
     fa0:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
	#endif		
	H_Lcd_WriteCommand(LCD_CMD_DISPLAY_ON_CURSOR_OFF);			// to Display ON, cursor OFF
     fa4:	8c e0       	ldi	r24, 0x0C	; 12
     fa6:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);							// to clear LCD
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_RETURN_HOME);					// to return home
     fb0:	82 e0       	ldi	r24, 0x02	; 2
     fb2:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
     fb6:	08 95       	ret

00000fb8 <H_Lcd_WriteNumber>:
// 	_delay_ms(5);
// 	#endif
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
     fb8:	3f 92       	push	r3
     fba:	4f 92       	push	r4
     fbc:	5f 92       	push	r5
     fbe:	6f 92       	push	r6
     fc0:	7f 92       	push	r7
     fc2:	8f 92       	push	r8
     fc4:	9f 92       	push	r9
     fc6:	af 92       	push	r10
     fc8:	bf 92       	push	r11
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	00 d0       	rcall	.+0      	; 0xfdc <H_Lcd_WriteNumber+0x24>
     fdc:	00 d0       	rcall	.+0      	; 0xfde <H_Lcd_WriteNumber+0x26>
     fde:	cd b7       	in	r28, 0x3d	; 61
     fe0:	de b7       	in	r29, 0x3e	; 62
     fe2:	4b 01       	movw	r8, r22
     fe4:	5c 01       	movw	r10, r24
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
     fe6:	2d b7       	in	r18, 0x3d	; 61
     fe8:	3e b7       	in	r19, 0x3e	; 62
     fea:	3a 83       	std	Y+2, r19	; 0x02
     fec:	29 83       	std	Y+1, r18	; 0x01
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
 	s32 check_reminder = Local_s32_Number;
 	if (Local_s32_Number == 0)
     fee:	67 2b       	or	r22, r23
     ff0:	68 2b       	or	r22, r24
     ff2:	69 2b       	or	r22, r25
     ff4:	19 f4       	brne	.+6      	; 0xffc <H_Lcd_WriteNumber+0x44>
 	{
 		H_Lcd_WriteCharacter('0');
     ff6:	80 e3       	ldi	r24, 0x30	; 48
     ff8:	0e 94 32 07 	call	0xe64	; 0xe64 <H_Lcd_WriteCharacter>
 	}
 	check_reminder*=1000;
     ffc:	a8 ee       	ldi	r26, 0xE8	; 232
     ffe:	b3 e0       	ldi	r27, 0x03	; 3
    1000:	a5 01       	movw	r20, r10
    1002:	94 01       	movw	r18, r8
    1004:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <__muluhisi3>
 	
 	if ((check_reminder % 1000)== 0)
    1008:	28 ee       	ldi	r18, 0xE8	; 232
    100a:	33 e0       	ldi	r19, 0x03	; 3
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    1014:	67 2b       	or	r22, r23
    1016:	68 2b       	or	r22, r24
    1018:	69 2b       	or	r22, r25
    101a:	09 f0       	breq	.+2      	; 0x101e <H_Lcd_WriteNumber+0x66>
    101c:	8e c0       	rjmp	.+284    	; 0x113a <H_Lcd_WriteNumber+0x182>
 	{
 		if (Local_s32_Number < 0)
    101e:	bb 20       	and	r11, r11
    1020:	5c f4       	brge	.+22     	; 0x1038 <H_Lcd_WriteNumber+0x80>
 		{
 		
 			H_Lcd_WriteCharacter('-');
    1022:	8d e2       	ldi	r24, 0x2D	; 45
    1024:	0e 94 32 07 	call	0xe64	; 0xe64 <H_Lcd_WriteCharacter>
 			Local_s32_Number = Local_s32_Number * -1;
    1028:	b0 94       	com	r11
    102a:	a0 94       	com	r10
    102c:	90 94       	com	r9
    102e:	80 94       	com	r8
    1030:	81 1c       	adc	r8, r1
    1032:	91 1c       	adc	r9, r1
    1034:	a1 1c       	adc	r10, r1
    1036:	b1 1c       	adc	r11, r1
 		}
 		if (Local_s32_Number > 0)
    1038:	18 14       	cp	r1, r8
    103a:	19 04       	cpc	r1, r9
    103c:	1a 04       	cpc	r1, r10
    103e:	1b 04       	cpc	r1, r11
    1040:	0c f0       	brlt	.+2      	; 0x1044 <H_Lcd_WriteNumber+0x8c>
    1042:	7b c0       	rjmp	.+246    	; 0x113a <H_Lcd_WriteNumber+0x182>
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
    1044:	a5 01       	movw	r20, r10
    1046:	94 01       	movw	r18, r8
 			u8  Local_u8_DigitCounter = 0;
    1048:	31 2c       	mov	r3, r1
 			while (Local_u32_Printed_Number)
    104a:	0e c0       	rjmp	.+28     	; 0x1068 <H_Lcd_WriteNumber+0xb0>
 			{
 				if (Local_u32_Printed_Number)
    104c:	21 15       	cp	r18, r1
    104e:	31 05       	cpc	r19, r1
    1050:	41 05       	cpc	r20, r1
    1052:	51 05       	cpc	r21, r1
    1054:	49 f0       	breq	.+18     	; 0x1068 <H_Lcd_WriteNumber+0xb0>
 				{
 					Local_u32_Printed_Number/= 10;
    1056:	ca 01       	movw	r24, r20
    1058:	b9 01       	movw	r22, r18
    105a:	2a e0       	ldi	r18, 0x0A	; 10
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	40 e0       	ldi	r20, 0x00	; 0
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__udivmodsi4>
 					Local_u8_DigitCounter++;
    1066:	33 94       	inc	r3
 		}
 		if (Local_s32_Number > 0)
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
 			u8  Local_u8_DigitCounter = 0;
 			while (Local_u32_Printed_Number)
    1068:	21 15       	cp	r18, r1
    106a:	31 05       	cpc	r19, r1
    106c:	41 05       	cpc	r20, r1
    106e:	51 05       	cpc	r21, r1
    1070:	69 f7       	brne	.-38     	; 0x104c <H_Lcd_WriteNumber+0x94>
 					Local_u32_Printed_Number/= 10;
 					Local_u8_DigitCounter++;
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
    1072:	8d b7       	in	r24, 0x3d	; 61
    1074:	9e b7       	in	r25, 0x3e	; 62
    1076:	9c 83       	std	Y+4, r25	; 0x04
    1078:	8b 83       	std	Y+3, r24	; 0x03
    107a:	83 2d       	mov	r24, r3
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	2d b7       	in	r18, 0x3d	; 61
    1088:	3e b7       	in	r19, 0x3e	; 62
    108a:	28 1b       	sub	r18, r24
    108c:	39 0b       	sbc	r19, r25
    108e:	0f b6       	in	r0, 0x3f	; 63
    1090:	f8 94       	cli
    1092:	3e bf       	out	0x3e, r19	; 62
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	2d bf       	out	0x3d, r18	; 61
    1098:	0d b7       	in	r16, 0x3d	; 61
    109a:	1e b7       	in	r17, 0x3e	; 62
    109c:	0f 5f       	subi	r16, 0xFF	; 255
    109e:	1f 4f       	sbci	r17, 0xFF	; 255
 			u32 Local_u8_ArrCounter = 0;
    10a0:	41 2c       	mov	r4, r1
    10a2:	51 2c       	mov	r5, r1
    10a4:	32 01       	movw	r6, r4
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    10a6:	20 c0       	rjmp	.+64     	; 0x10e8 <H_Lcd_WriteNumber+0x130>
 			{
 				Local_u8_ArrCounter ++;
    10a8:	3f ef       	ldi	r19, 0xFF	; 255
    10aa:	43 1a       	sub	r4, r19
    10ac:	53 0a       	sbc	r5, r19
    10ae:	63 0a       	sbc	r6, r19
    10b0:	73 0a       	sbc	r7, r19
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
    10b2:	c4 18       	sub	r12, r4
    10b4:	d5 08       	sbc	r13, r5
    10b6:	e6 08       	sbc	r14, r6
    10b8:	f7 08       	sbc	r15, r7
    10ba:	c5 01       	movw	r24, r10
    10bc:	b4 01       	movw	r22, r8
    10be:	2a e0       	ldi	r18, 0x0A	; 10
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	50 e0       	ldi	r21, 0x00	; 0
    10c6:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    10ca:	cc 0c       	add	r12, r12
    10cc:	dd 1c       	adc	r13, r13
    10ce:	cc 0c       	add	r12, r12
    10d0:	dd 1c       	adc	r13, r13
    10d2:	f8 01       	movw	r30, r16
    10d4:	ec 0d       	add	r30, r12
    10d6:	fd 1d       	adc	r31, r13
    10d8:	60 83       	st	Z, r22
    10da:	71 83       	std	Z+1, r23	; 0x01
    10dc:	82 83       	std	Z+2, r24	; 0x02
    10de:	93 83       	std	Z+3, r25	; 0x03
 				Local_s32_Number /= 10;
    10e0:	82 2e       	mov	r8, r18
    10e2:	93 2e       	mov	r9, r19
    10e4:	a4 2e       	mov	r10, r20
    10e6:	b5 2e       	mov	r11, r21
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
 			u32 Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    10e8:	c3 2c       	mov	r12, r3
    10ea:	d1 2c       	mov	r13, r1
    10ec:	e1 2c       	mov	r14, r1
    10ee:	f1 2c       	mov	r15, r1
    10f0:	4c 14       	cp	r4, r12
    10f2:	5d 04       	cpc	r5, r13
    10f4:	6e 04       	cpc	r6, r14
    10f6:	7f 04       	cpc	r7, r15
    10f8:	b8 f2       	brcs	.-82     	; 0x10a8 <H_Lcd_WriteNumber+0xf0>
    10fa:	81 2c       	mov	r8, r1
    10fc:	91 2c       	mov	r9, r1
    10fe:	54 01       	movw	r10, r8
    1100:	10 c0       	rjmp	.+32     	; 0x1122 <H_Lcd_WriteNumber+0x16a>
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
 			{
 				H_Lcd_WriteCharacter(arr[Local_u8_ArrCounter]+48);
    1102:	f4 01       	movw	r30, r8
    1104:	ee 0f       	add	r30, r30
    1106:	ff 1f       	adc	r31, r31
    1108:	ee 0f       	add	r30, r30
    110a:	ff 1f       	adc	r31, r31
    110c:	e0 0f       	add	r30, r16
    110e:	f1 1f       	adc	r31, r17
    1110:	80 81       	ld	r24, Z
    1112:	80 5d       	subi	r24, 0xD0	; 208
    1114:	0e 94 32 07 	call	0xe64	; 0xe64 <H_Lcd_WriteCharacter>
 				Local_u8_ArrCounter++;
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	88 1a       	sub	r8, r24
    111c:	98 0a       	sbc	r9, r24
    111e:	a8 0a       	sbc	r10, r24
    1120:	b8 0a       	sbc	r11, r24
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
 				Local_s32_Number /= 10;
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    1122:	8c 14       	cp	r8, r12
    1124:	9d 04       	cpc	r9, r13
    1126:	ae 04       	cpc	r10, r14
    1128:	bf 04       	cpc	r11, r15
    112a:	58 f3       	brcs	.-42     	; 0x1102 <H_Lcd_WriteNumber+0x14a>
    112c:	2b 81       	ldd	r18, Y+3	; 0x03
    112e:	3c 81       	ldd	r19, Y+4	; 0x04
    1130:	0f b6       	in	r0, 0x3f	; 63
    1132:	f8 94       	cli
    1134:	3e bf       	out	0x3e, r19	; 62
    1136:	0f be       	out	0x3f, r0	; 63
    1138:	2d bf       	out	0x3d, r18	; 61
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	9a 81       	ldd	r25, Y+2	; 0x02
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	9e bf       	out	0x3e, r25	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	8d bf       	out	0x3d, r24	; 61
    1148:	0f 90       	pop	r0
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	bf 90       	pop	r11
    1162:	af 90       	pop	r10
    1164:	9f 90       	pop	r9
    1166:	8f 90       	pop	r8
    1168:	7f 90       	pop	r7
    116a:	6f 90       	pop	r6
    116c:	5f 90       	pop	r5
    116e:	4f 90       	pop	r4
    1170:	3f 90       	pop	r3
    1172:	08 95       	ret

00001174 <H_Lcd_Clear>:
// 	}
// }

void H_Lcd_Clear (void)
{
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
    117a:	08 95       	ret

0000117c <H_Lcd_GoTo>:
}

void H_Lcd_GoTo	(u8 Local_u8_Row,u8 Local_u8_Coloumn )
{
    117c:	cf 93       	push	r28
    117e:	df 93       	push	r29
    1180:	00 d0       	rcall	.+0      	; 0x1182 <H_Lcd_GoTo+0x6>
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
	u8 arr [2] = {LCD_CMD_FIRST_ROW, LCD_CMD_SECOND_ROW};
    1186:	90 e8       	ldi	r25, 0x80	; 128
    1188:	99 83       	std	Y+1, r25	; 0x01
    118a:	90 ec       	ldi	r25, 0xC0	; 192
    118c:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
    118e:	e1 e0       	ldi	r30, 0x01	; 1
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	ec 0f       	add	r30, r28
    1194:	fd 1f       	adc	r31, r29
    1196:	e8 0f       	add	r30, r24
    1198:	f1 1d       	adc	r31, r1
    119a:	80 81       	ld	r24, Z
    119c:	86 0f       	add	r24, r22
    119e:	0e 94 65 07 	call	0xeca	; 0xeca <H_Lcd_WriteCommand>
	
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	08 95       	ret

000011ac <H_Lcd_WriteString>:

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	8c 01       	movw	r16, r24
	u8 Local_u8_Counter = 0;
    11b4:	c0 e0       	ldi	r28, 0x00	; 0
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <H_Lcd_WriteString+0x1e>
	{
		H_Lcd_WriteCharacter(Local_u8_PtrToString[Local_u8_Counter]);
    11b8:	0e 94 32 07 	call	0xe64	; 0xe64 <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
    11bc:	cf 5f       	subi	r28, 0xFF	; 255
		if (Local_u8_Counter == 16)
    11be:	c0 31       	cpi	r28, 0x10	; 16
    11c0:	21 f4       	brne	.+8      	; 0x11ca <H_Lcd_WriteString+0x1e>
		{
			H_Lcd_GoTo(1,0);
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 be 08 	call	0x117c	; 0x117c <H_Lcd_GoTo>
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
	u8 Local_u8_Counter = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    11ca:	f8 01       	movw	r30, r16
    11cc:	ec 0f       	add	r30, r28
    11ce:	f1 1d       	adc	r31, r1
    11d0:	80 81       	ld	r24, Z
    11d2:	81 11       	cpse	r24, r1
    11d4:	f1 cf       	rjmp	.-30     	; 0x11b8 <H_Lcd_WriteString+0xc>
		if (Local_u8_Counter == 16)
		{
			H_Lcd_GoTo(1,0);
		}
	}
    11d6:	cf 91       	pop	r28
    11d8:	1f 91       	pop	r17
    11da:	0f 91       	pop	r16
    11dc:	08 95       	ret

000011de <H_Lm35_Init>:

#include "Lm35.h"

void H_Lm35_Init				(void)
{
	M_Adc_Init();
    11de:	0e 94 23 09 	call	0x1246	; 0x1246 <M_Adc_Init>
    11e2:	08 95       	ret

000011e4 <H_Lm35_Read>:
}
u16  H_Lm35_Read				(void)
{
	u16 Local_u16_ADCReading	=	M_Adc_Read();
    11e4:	0e 94 4f 09 	call	0x129e	; 0x129e <M_Adc_Read>
	u16 Local_u16_Temp			=	(((u32)Local_u16_ADCReading * 500)/1023);
    11e8:	9c 01       	movw	r18, r24
    11ea:	a4 ef       	ldi	r26, 0xF4	; 244
    11ec:	b1 e0       	ldi	r27, 0x01	; 1
    11ee:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__umulhisi3>
    11f2:	2f ef       	ldi	r18, 0xFF	; 255
    11f4:	33 e0       	ldi	r19, 0x03	; 3
    11f6:	40 e0       	ldi	r20, 0x00	; 0
    11f8:	50 e0       	ldi	r21, 0x00	; 0
    11fa:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__udivmodsi4>
	return Local_u16_Temp;
    11fe:	c9 01       	movw	r24, r18
    1200:	08 95       	ret

00001202 <H_Servo_Init>:
	so I initialized an output pwm signal with frequency 50 hz
*/
void H_Servo_Init		(void)
{
	/*To Set Control Pin as Output*/
	M_Dio_PinMode(SERVO_OUTPUT_PIN, OUTPUT);
    1202:	61 e0       	ldi	r22, 0x01	; 1
    1204:	8d e2       	ldi	r24, 0x2D	; 45
    1206:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	
	/*To initialize PWM*/
	M_Pwm1_Init();
    120a:	0e 94 33 0c 	call	0x1866	; 0x1866 <M_Pwm1_Init>
		
	/*To set working Frequency*/
	M_Pwm1_SetFrequency(50);
    120e:	82 e3       	ldi	r24, 0x32	; 50
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <M_Pwm1_SetFrequency>
    1216:	08 95       	ret

00001218 <H_Servo_SetAngel>:
/*To set desired angel for the servo step, Servo usually works from 5% to 10% duty cycle so I mapped 0-180 degrees to 5%-10% */
void H_Servo_SetAngel	(f32 Local_f32_DesiredAngel)
{
	/*scaling from 180 degrees to 5 to 10 Percents*/
 	
	Local_f32_DesiredAngel *= 5;
    1218:	20 e0       	ldi	r18, 0x00	; 0
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	40 ea       	ldi	r20, 0xA0	; 160
    121e:	50 e4       	ldi	r21, 0x40	; 64
    1220:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__mulsf3>
 	Local_f32_DesiredAngel /= 180;
    1224:	20 e0       	ldi	r18, 0x00	; 0
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	44 e3       	ldi	r20, 0x34	; 52
    122a:	53 e4       	ldi	r21, 0x43	; 67
    122c:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divsf3>
	Local_f32_DesiredAngel += 5;
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 ea       	ldi	r20, 0xA0	; 160
    1236:	50 e4       	ldi	r21, 0x40	; 64
    1238:	0e 94 a6 0c 	call	0x194c	; 0x194c <__addsf3>
	 
	/*to set PWM Duty Cycle*/
 	M_Pwm1_SetDutyCycle(Local_f32_DesiredAngel);
    123c:	0e 94 49 0c 	call	0x1892	; 0x1892 <M_Pwm1_SetDutyCycle>
	 
	/*To start the clock*/
 	M_Pwm1_Start();
    1240:	0e 94 83 0c 	call	0x1906	; 0x1906 <M_Pwm1_Start>
    1244:	08 95       	ret

00001246 <M_Adc_Init>:
void (* Adc_void_CallBack) (void);

void M_Adc_Init (void)
{
	
	M_Dio_PinMode(PA1, INPUT);
    1246:	60 e0       	ldi	r22, 0x00	; 0
    1248:	8b e0       	ldi	r24, 0x0B	; 11
    124a:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>
	/* Step 1	->		Set Voltage Reference  */
	#if			VOLTAGE_REFERENCE		==		AREF
	ClrBit(ADMUX,REF0);
	ClrBit(ADMUX,REF1);
	#elif		VOLTAGE_REFERENCE		==		AVCC
	SetBit(ADMUX,REF0);
    124e:	87 b1       	in	r24, 0x07	; 7
    1250:	80 64       	ori	r24, 0x40	; 64
    1252:	87 b9       	out	0x07, r24	; 7
	ClrBit(ADMUX,REF1);
    1254:	87 b1       	in	r24, 0x07	; 7
    1256:	8f 77       	andi	r24, 0x7F	; 127
    1258:	87 b9       	out	0x07, r24	; 7
	SetBit(ADMUX,REF1);
	#endif
	
	/* Step 2	->		Set Left Adjust Result  */
	#if			LEFT_ADJUST_RESULT		==		RIGHT_ADJUST
	ClrBit(ADMUX,ADLAR);
    125a:	87 b1       	in	r24, 0x07	; 7
    125c:	8f 7d       	andi	r24, 0xDF	; 223
    125e:	87 b9       	out	0x07, r24	; 7
	#elif		LEFT_ADJUST_RESULT		==		LEFT_ADJUST
	SetBit(ADMUX,ADLAR);
	#endif				
	
	/* Step 3	->		Set Pin Used  */
	ClrBit(ADMUX,MUX4); ClrBit(ADMUX,MUX3); ClrBit(ADMUX,MUX2); ClrBit(ADMUX,MUX1); SetBit(ADMUX,MUX0);
    1260:	87 b1       	in	r24, 0x07	; 7
    1262:	8f 7e       	andi	r24, 0xEF	; 239
    1264:	87 b9       	out	0x07, r24	; 7
    1266:	87 b1       	in	r24, 0x07	; 7
    1268:	87 7f       	andi	r24, 0xF7	; 247
    126a:	87 b9       	out	0x07, r24	; 7
    126c:	87 b1       	in	r24, 0x07	; 7
    126e:	8b 7f       	andi	r24, 0xFB	; 251
    1270:	87 b9       	out	0x07, r24	; 7
    1272:	87 b1       	in	r24, 0x07	; 7
    1274:	8d 7f       	andi	r24, 0xFD	; 253
    1276:	87 b9       	out	0x07, r24	; 7
    1278:	87 b1       	in	r24, 0x07	; 7
    127a:	81 60       	ori	r24, 0x01	; 1
    127c:	87 b9       	out	0x07, r24	; 7
	
	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_64	
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	ClrBit(ADCSRA,ADPS0);

	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_128
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	SetBit(ADCSRA,ADPS0);
    127e:	86 b1       	in	r24, 0x06	; 6
    1280:	84 60       	ori	r24, 0x04	; 4
    1282:	86 b9       	out	0x06, r24	; 6
    1284:	86 b1       	in	r24, 0x06	; 6
    1286:	82 60       	ori	r24, 0x02	; 2
    1288:	86 b9       	out	0x06, r24	; 6
    128a:	86 b1       	in	r24, 0x06	; 6
    128c:	81 60       	ori	r24, 0x01	; 1
    128e:	86 b9       	out	0x06, r24	; 6
	#endif



	/* Step 5	->		set ADC Enable */
	SetBit(ADCSRA,ADEN);
    1290:	86 b1       	in	r24, 0x06	; 6
    1292:	80 68       	ori	r24, 0x80	; 128
    1294:	86 b9       	out	0x06, r24	; 6
	
	SetBit(ADCSRA,ADATE);
    1296:	86 b1       	in	r24, 0x06	; 6
    1298:	80 62       	ori	r24, 0x20	; 32
    129a:	86 b9       	out	0x06, r24	; 6
    129c:	08 95       	ret

0000129e <M_Adc_Read>:
}

u16 M_Adc_Read(void)
{
	u16 Local_u16_Data = 0;
	SetBit(ADCSRA,ADSC);
    129e:	86 b1       	in	r24, 0x06	; 6
    12a0:	80 64       	ori	r24, 0x40	; 64
    12a2:	86 b9       	out	0x06, r24	; 6
	while(GetBit(ADCSRA,ADIF) == 0);
    12a4:	34 9b       	sbis	0x06, 4	; 6
    12a6:	fe cf       	rjmp	.-4      	; 0x12a4 <M_Adc_Read+0x6>
	
	Local_u16_Data = (ADCL + (ADCH<<8));
    12a8:	24 b1       	in	r18, 0x04	; 4
    12aa:	85 b1       	in	r24, 0x05	; 5
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	98 2f       	mov	r25, r24
    12b0:	88 27       	eor	r24, r24
	
	//Local_u16_Data = ADCH;
	//ClrBit(ADCSRA,ADIF);
		
	return Local_u16_Data;
}
    12b2:	82 0f       	add	r24, r18
    12b4:	91 1d       	adc	r25, r1
    12b6:	08 95       	ret

000012b8 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin);		break;
		case 2: TogBit(PORTB,Local_u8_Pin);		break;
		case 3: TogBit(PORTC,Local_u8_Pin);		break;
		case 4: TogBit(PORTD,Local_u8_Pin);		break;
    12b8:	9d ec       	ldi	r25, 0xCD	; 205
    12ba:	89 9f       	mul	r24, r25
    12bc:	91 2d       	mov	r25, r1
    12be:	11 24       	eor	r1, r1
    12c0:	29 2f       	mov	r18, r25
    12c2:	26 95       	lsr	r18
    12c4:	26 95       	lsr	r18
    12c6:	26 95       	lsr	r18
    12c8:	22 0f       	add	r18, r18
    12ca:	32 2f       	mov	r19, r18
    12cc:	33 0f       	add	r19, r19
    12ce:	33 0f       	add	r19, r19
    12d0:	23 0f       	add	r18, r19
    12d2:	82 1b       	sub	r24, r18
    12d4:	28 2f       	mov	r18, r24
    12d6:	96 95       	lsr	r25
    12d8:	96 95       	lsr	r25
    12da:	96 95       	lsr	r25
    12dc:	66 23       	and	r22, r22
    12de:	19 f0       	breq	.+6      	; 0x12e6 <M_Dio_PinMode+0x2e>
    12e0:	61 30       	cpi	r22, 0x01	; 1
    12e2:	e1 f1       	breq	.+120    	; 0x135c <M_Dio_PinMode+0xa4>
    12e4:	08 95       	ret
    12e6:	92 30       	cpi	r25, 0x02	; 2
    12e8:	a9 f0       	breq	.+42     	; 0x1314 <M_Dio_PinMode+0x5c>
    12ea:	18 f4       	brcc	.+6      	; 0x12f2 <M_Dio_PinMode+0x3a>
    12ec:	91 30       	cpi	r25, 0x01	; 1
    12ee:	31 f0       	breq	.+12     	; 0x12fc <M_Dio_PinMode+0x44>
    12f0:	08 95       	ret
    12f2:	93 30       	cpi	r25, 0x03	; 3
    12f4:	d9 f0       	breq	.+54     	; 0x132c <M_Dio_PinMode+0x74>
    12f6:	94 30       	cpi	r25, 0x04	; 4
    12f8:	29 f1       	breq	.+74     	; 0x1344 <M_Dio_PinMode+0x8c>
    12fa:	08 95       	ret
    12fc:	3a b3       	in	r19, 0x1a	; 26
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <M_Dio_PinMode+0x50>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	2a 95       	dec	r18
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <M_Dio_PinMode+0x4c>
    130c:	80 95       	com	r24
    130e:	83 23       	and	r24, r19
    1310:	8a bb       	out	0x1a, r24	; 26
    1312:	08 95       	ret
    1314:	37 b3       	in	r19, 0x17	; 23
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	02 c0       	rjmp	.+4      	; 0x1320 <M_Dio_PinMode+0x68>
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	2a 95       	dec	r18
    1322:	e2 f7       	brpl	.-8      	; 0x131c <M_Dio_PinMode+0x64>
    1324:	80 95       	com	r24
    1326:	83 23       	and	r24, r19
    1328:	87 bb       	out	0x17, r24	; 23
    132a:	08 95       	ret
    132c:	34 b3       	in	r19, 0x14	; 20
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 c0       	rjmp	.+4      	; 0x1338 <M_Dio_PinMode+0x80>
    1334:	88 0f       	add	r24, r24
    1336:	99 1f       	adc	r25, r25
    1338:	2a 95       	dec	r18
    133a:	e2 f7       	brpl	.-8      	; 0x1334 <M_Dio_PinMode+0x7c>
    133c:	80 95       	com	r24
    133e:	83 23       	and	r24, r19
    1340:	84 bb       	out	0x14, r24	; 20
    1342:	08 95       	ret
    1344:	31 b3       	in	r19, 0x11	; 17
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <M_Dio_PinMode+0x98>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	2a 95       	dec	r18
    1352:	e2 f7       	brpl	.-8      	; 0x134c <M_Dio_PinMode+0x94>
    1354:	80 95       	com	r24
    1356:	83 23       	and	r24, r19
    1358:	81 bb       	out	0x11, r24	; 17
    135a:	08 95       	ret
    135c:	92 30       	cpi	r25, 0x02	; 2
    135e:	a1 f0       	breq	.+40     	; 0x1388 <M_Dio_PinMode+0xd0>
    1360:	18 f4       	brcc	.+6      	; 0x1368 <M_Dio_PinMode+0xb0>
    1362:	91 30       	cpi	r25, 0x01	; 1
    1364:	31 f0       	breq	.+12     	; 0x1372 <M_Dio_PinMode+0xba>
    1366:	08 95       	ret
    1368:	93 30       	cpi	r25, 0x03	; 3
    136a:	c9 f0       	breq	.+50     	; 0x139e <M_Dio_PinMode+0xe6>
    136c:	94 30       	cpi	r25, 0x04	; 4
    136e:	11 f1       	breq	.+68     	; 0x13b4 <M_Dio_PinMode+0xfc>
    1370:	08 95       	ret
    1372:	3a b3       	in	r19, 0x1a	; 26
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 c0       	rjmp	.+4      	; 0x137e <M_Dio_PinMode+0xc6>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	2a 95       	dec	r18
    1380:	e2 f7       	brpl	.-8      	; 0x137a <M_Dio_PinMode+0xc2>
    1382:	83 2b       	or	r24, r19
    1384:	8a bb       	out	0x1a, r24	; 26
    1386:	08 95       	ret
    1388:	37 b3       	in	r19, 0x17	; 23
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <M_Dio_PinMode+0xdc>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	2a 95       	dec	r18
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <M_Dio_PinMode+0xd8>
    1398:	83 2b       	or	r24, r19
    139a:	87 bb       	out	0x17, r24	; 23
    139c:	08 95       	ret
    139e:	34 b3       	in	r19, 0x14	; 20
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <M_Dio_PinMode+0xf2>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	2a 95       	dec	r18
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <M_Dio_PinMode+0xee>
    13ae:	83 2b       	or	r24, r19
    13b0:	84 bb       	out	0x14, r24	; 20
    13b2:	08 95       	ret
    13b4:	31 b3       	in	r19, 0x11	; 17
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <M_Dio_PinMode+0x108>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	2a 95       	dec	r18
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <M_Dio_PinMode+0x104>
    13c4:	83 2b       	or	r24, r19
    13c6:	81 bb       	out	0x11, r24	; 17
    13c8:	08 95       	ret

000013ca <M_Dio_PinWrite>:
    13ca:	9d ec       	ldi	r25, 0xCD	; 205
    13cc:	89 9f       	mul	r24, r25
    13ce:	91 2d       	mov	r25, r1
    13d0:	11 24       	eor	r1, r1
    13d2:	29 2f       	mov	r18, r25
    13d4:	26 95       	lsr	r18
    13d6:	26 95       	lsr	r18
    13d8:	26 95       	lsr	r18
    13da:	22 0f       	add	r18, r18
    13dc:	32 2f       	mov	r19, r18
    13de:	33 0f       	add	r19, r19
    13e0:	33 0f       	add	r19, r19
    13e2:	23 0f       	add	r18, r19
    13e4:	82 1b       	sub	r24, r18
    13e6:	28 2f       	mov	r18, r24
    13e8:	96 95       	lsr	r25
    13ea:	96 95       	lsr	r25
    13ec:	96 95       	lsr	r25
    13ee:	66 23       	and	r22, r22
    13f0:	19 f0       	breq	.+6      	; 0x13f8 <M_Dio_PinWrite+0x2e>
    13f2:	61 30       	cpi	r22, 0x01	; 1
    13f4:	e1 f1       	breq	.+120    	; 0x146e <M_Dio_PinWrite+0xa4>
    13f6:	08 95       	ret
    13f8:	92 30       	cpi	r25, 0x02	; 2
    13fa:	a9 f0       	breq	.+42     	; 0x1426 <M_Dio_PinWrite+0x5c>
    13fc:	18 f4       	brcc	.+6      	; 0x1404 <M_Dio_PinWrite+0x3a>
    13fe:	91 30       	cpi	r25, 0x01	; 1
    1400:	31 f0       	breq	.+12     	; 0x140e <M_Dio_PinWrite+0x44>
    1402:	08 95       	ret
    1404:	93 30       	cpi	r25, 0x03	; 3
    1406:	d9 f0       	breq	.+54     	; 0x143e <M_Dio_PinWrite+0x74>
    1408:	94 30       	cpi	r25, 0x04	; 4
    140a:	29 f1       	breq	.+74     	; 0x1456 <M_Dio_PinWrite+0x8c>
    140c:	08 95       	ret
    140e:	3b b3       	in	r19, 0x1b	; 27
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <M_Dio_PinWrite+0x50>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	2a 95       	dec	r18
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <M_Dio_PinWrite+0x4c>
    141e:	80 95       	com	r24
    1420:	83 23       	and	r24, r19
    1422:	8b bb       	out	0x1b, r24	; 27
    1424:	08 95       	ret
    1426:	38 b3       	in	r19, 0x18	; 24
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	02 c0       	rjmp	.+4      	; 0x1432 <M_Dio_PinWrite+0x68>
    142e:	88 0f       	add	r24, r24
    1430:	99 1f       	adc	r25, r25
    1432:	2a 95       	dec	r18
    1434:	e2 f7       	brpl	.-8      	; 0x142e <M_Dio_PinWrite+0x64>
    1436:	80 95       	com	r24
    1438:	83 23       	and	r24, r19
    143a:	88 bb       	out	0x18, r24	; 24
    143c:	08 95       	ret
    143e:	35 b3       	in	r19, 0x15	; 21
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	02 c0       	rjmp	.+4      	; 0x144a <M_Dio_PinWrite+0x80>
    1446:	88 0f       	add	r24, r24
    1448:	99 1f       	adc	r25, r25
    144a:	2a 95       	dec	r18
    144c:	e2 f7       	brpl	.-8      	; 0x1446 <M_Dio_PinWrite+0x7c>
    144e:	80 95       	com	r24
    1450:	83 23       	and	r24, r19
    1452:	85 bb       	out	0x15, r24	; 21
    1454:	08 95       	ret
    1456:	32 b3       	in	r19, 0x12	; 18
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <M_Dio_PinWrite+0x98>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	2a 95       	dec	r18
    1464:	e2 f7       	brpl	.-8      	; 0x145e <M_Dio_PinWrite+0x94>
    1466:	80 95       	com	r24
    1468:	83 23       	and	r24, r19
    146a:	82 bb       	out	0x12, r24	; 18
    146c:	08 95       	ret
    146e:	92 30       	cpi	r25, 0x02	; 2
    1470:	a1 f0       	breq	.+40     	; 0x149a <M_Dio_PinWrite+0xd0>
    1472:	18 f4       	brcc	.+6      	; 0x147a <M_Dio_PinWrite+0xb0>
    1474:	91 30       	cpi	r25, 0x01	; 1
    1476:	31 f0       	breq	.+12     	; 0x1484 <M_Dio_PinWrite+0xba>
    1478:	08 95       	ret
    147a:	93 30       	cpi	r25, 0x03	; 3
    147c:	c9 f0       	breq	.+50     	; 0x14b0 <M_Dio_PinWrite+0xe6>
    147e:	94 30       	cpi	r25, 0x04	; 4
    1480:	11 f1       	breq	.+68     	; 0x14c6 <M_Dio_PinWrite+0xfc>
    1482:	08 95       	ret
    1484:	3b b3       	in	r19, 0x1b	; 27
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <M_Dio_PinWrite+0xc6>
    148c:	88 0f       	add	r24, r24
    148e:	99 1f       	adc	r25, r25
    1490:	2a 95       	dec	r18
    1492:	e2 f7       	brpl	.-8      	; 0x148c <M_Dio_PinWrite+0xc2>
    1494:	83 2b       	or	r24, r19
    1496:	8b bb       	out	0x1b, r24	; 27
    1498:	08 95       	ret
    149a:	38 b3       	in	r19, 0x18	; 24
    149c:	81 e0       	ldi	r24, 0x01	; 1
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <M_Dio_PinWrite+0xdc>
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	2a 95       	dec	r18
    14a8:	e2 f7       	brpl	.-8      	; 0x14a2 <M_Dio_PinWrite+0xd8>
    14aa:	83 2b       	or	r24, r19
    14ac:	88 bb       	out	0x18, r24	; 24
    14ae:	08 95       	ret
    14b0:	35 b3       	in	r19, 0x15	; 21
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <M_Dio_PinWrite+0xf2>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	2a 95       	dec	r18
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <M_Dio_PinWrite+0xee>
    14c0:	83 2b       	or	r24, r19
    14c2:	85 bb       	out	0x15, r24	; 21
    14c4:	08 95       	ret
    14c6:	32 b3       	in	r19, 0x12	; 18
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 c0       	rjmp	.+4      	; 0x14d2 <M_Dio_PinWrite+0x108>
    14ce:	88 0f       	add	r24, r24
    14d0:	99 1f       	adc	r25, r25
    14d2:	2a 95       	dec	r18
    14d4:	e2 f7       	brpl	.-8      	; 0x14ce <M_Dio_PinWrite+0x104>
    14d6:	83 2b       	or	r24, r19
    14d8:	82 bb       	out	0x12, r24	; 18
    14da:	08 95       	ret

000014dc <M_Dio_PinRead>:
	
}

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
    14dc:	9d ec       	ldi	r25, 0xCD	; 205
    14de:	89 9f       	mul	r24, r25
    14e0:	91 2d       	mov	r25, r1
    14e2:	11 24       	eor	r1, r1
    14e4:	29 2f       	mov	r18, r25
    14e6:	26 95       	lsr	r18
    14e8:	26 95       	lsr	r18
    14ea:	26 95       	lsr	r18
    14ec:	22 0f       	add	r18, r18
    14ee:	32 2f       	mov	r19, r18
    14f0:	33 0f       	add	r19, r19
    14f2:	33 0f       	add	r19, r19
    14f4:	23 0f       	add	r18, r19
    14f6:	82 1b       	sub	r24, r18
    14f8:	28 2f       	mov	r18, r24
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
    14fa:	89 2f       	mov	r24, r25
    14fc:	86 95       	lsr	r24
    14fe:	86 95       	lsr	r24
    1500:	86 95       	lsr	r24
	u8 Local_u8_Pin_Value	=	0;
	
	switch(Local_u8_Port)
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	91 f0       	breq	.+36     	; 0x152a <M_Dio_PinRead+0x4e>
    1506:	18 f4       	brcc	.+6      	; 0x150e <M_Dio_PinRead+0x32>
    1508:	81 30       	cpi	r24, 0x01	; 1
    150a:	31 f0       	breq	.+12     	; 0x1518 <M_Dio_PinRead+0x3c>
    150c:	29 c0       	rjmp	.+82     	; 0x1560 <M_Dio_PinRead+0x84>
    150e:	83 30       	cpi	r24, 0x03	; 3
    1510:	a9 f0       	breq	.+42     	; 0x153c <M_Dio_PinRead+0x60>
    1512:	84 30       	cpi	r24, 0x04	; 4
    1514:	e1 f0       	breq	.+56     	; 0x154e <M_Dio_PinRead+0x72>
    1516:	24 c0       	rjmp	.+72     	; 0x1560 <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_Pin_Value = GetBit(PINA,Local_u8_Pin);		break;
    1518:	89 b3       	in	r24, 0x19	; 25
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <M_Dio_PinRead+0x46>
    151e:	95 95       	asr	r25
    1520:	87 95       	ror	r24
    1522:	2a 95       	dec	r18
    1524:	e2 f7       	brpl	.-8      	; 0x151e <M_Dio_PinRead+0x42>
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	08 95       	ret
		case 2: Local_u8_Pin_Value = GetBit(PINB,Local_u8_Pin);		break;
    152a:	86 b3       	in	r24, 0x16	; 22
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <M_Dio_PinRead+0x58>
    1530:	95 95       	asr	r25
    1532:	87 95       	ror	r24
    1534:	2a 95       	dec	r18
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <M_Dio_PinRead+0x54>
    1538:	81 70       	andi	r24, 0x01	; 1
    153a:	08 95       	ret
		case 3: Local_u8_Pin_Value = GetBit(PINC,Local_u8_Pin);		break;
    153c:	83 b3       	in	r24, 0x13	; 19
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <M_Dio_PinRead+0x6a>
    1542:	95 95       	asr	r25
    1544:	87 95       	ror	r24
    1546:	2a 95       	dec	r18
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <M_Dio_PinRead+0x66>
    154a:	81 70       	andi	r24, 0x01	; 1
    154c:	08 95       	ret
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
    154e:	80 b3       	in	r24, 0x10	; 16
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <M_Dio_PinRead+0x7c>
    1554:	95 95       	asr	r25
    1556:	87 95       	ror	r24
    1558:	2a 95       	dec	r18
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <M_Dio_PinRead+0x78>
    155c:	81 70       	andi	r24, 0x01	; 1
    155e:	08 95       	ret

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
	u8 Local_u8_Pin_Value	=	0;
    1560:	80 e0       	ldi	r24, 0x00	; 0
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
		default:								break;
	}
	
	return Local_u8_Pin_Value;
}
    1562:	08 95       	ret

00001564 <M_Dio_PinPullUp>:

void M_Dio_PinPullUp	(u8 Local_u8_PinNumber, u8 Local_u8_PullUpState)
{
	u8 Local_u8_Pin		=	Local_u8_PinNumber % 10;
    1564:	9d ec       	ldi	r25, 0xCD	; 205
    1566:	89 9f       	mul	r24, r25
    1568:	91 2d       	mov	r25, r1
    156a:	11 24       	eor	r1, r1
    156c:	29 2f       	mov	r18, r25
    156e:	26 95       	lsr	r18
    1570:	26 95       	lsr	r18
    1572:	26 95       	lsr	r18
    1574:	22 0f       	add	r18, r18
    1576:	32 2f       	mov	r19, r18
    1578:	33 0f       	add	r19, r19
    157a:	33 0f       	add	r19, r19
    157c:	23 0f       	add	r18, r19
    157e:	82 1b       	sub	r24, r18
    1580:	28 2f       	mov	r18, r24
	u8 Local_u8_Port	=	Local_u8_PinNumber / 10;
    1582:	96 95       	lsr	r25
    1584:	96 95       	lsr	r25
    1586:	96 95       	lsr	r25
	switch(Local_u8_PullUpState)
    1588:	66 23       	and	r22, r22
    158a:	f1 f1       	breq	.+124    	; 0x1608 <M_Dio_PinPullUp+0xa4>
    158c:	61 30       	cpi	r22, 0x01	; 1
    158e:	09 f0       	breq	.+2      	; 0x1592 <M_Dio_PinPullUp+0x2e>
    1590:	71 c0       	rjmp	.+226    	; 0x1674 <M_Dio_PinPullUp+0x110>
	{
		case PULLUP_DISABLE:
		switch(Local_u8_Port)
    1592:	92 30       	cpi	r25, 0x02	; 2
    1594:	a9 f0       	breq	.+42     	; 0x15c0 <M_Dio_PinPullUp+0x5c>
    1596:	18 f4       	brcc	.+6      	; 0x159e <M_Dio_PinPullUp+0x3a>
    1598:	91 30       	cpi	r25, 0x01	; 1
    159a:	31 f0       	breq	.+12     	; 0x15a8 <M_Dio_PinPullUp+0x44>
    159c:	08 95       	ret
    159e:	93 30       	cpi	r25, 0x03	; 3
    15a0:	d9 f0       	breq	.+54     	; 0x15d8 <M_Dio_PinPullUp+0x74>
    15a2:	94 30       	cpi	r25, 0x04	; 4
    15a4:	29 f1       	breq	.+74     	; 0x15f0 <M_Dio_PinPullUp+0x8c>
    15a6:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin);		break;
    15a8:	3b b3       	in	r19, 0x1b	; 27
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <M_Dio_PinPullUp+0x50>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	2a 95       	dec	r18
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <M_Dio_PinPullUp+0x4c>
    15b8:	80 95       	com	r24
    15ba:	83 23       	and	r24, r19
    15bc:	8b bb       	out	0x1b, r24	; 27
    15be:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin);		break;
    15c0:	38 b3       	in	r19, 0x18	; 24
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <M_Dio_PinPullUp+0x68>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	2a 95       	dec	r18
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <M_Dio_PinPullUp+0x64>
    15d0:	80 95       	com	r24
    15d2:	83 23       	and	r24, r19
    15d4:	88 bb       	out	0x18, r24	; 24
    15d6:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin);		break;
    15d8:	35 b3       	in	r19, 0x15	; 21
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <M_Dio_PinPullUp+0x80>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	2a 95       	dec	r18
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <M_Dio_PinPullUp+0x7c>
    15e8:	80 95       	com	r24
    15ea:	83 23       	and	r24, r19
    15ec:	85 bb       	out	0x15, r24	; 21
    15ee:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin);		break;
    15f0:	32 b3       	in	r19, 0x12	; 18
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <M_Dio_PinPullUp+0x98>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	2a 95       	dec	r18
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <M_Dio_PinPullUp+0x94>
    1600:	80 95       	com	r24
    1602:	83 23       	and	r24, r19
    1604:	82 bb       	out	0x12, r24	; 18
    1606:	08 95       	ret
			default:								break;
		}
		break;
		
		case PULLUP_ENABLE:
		switch(Local_u8_Port)
    1608:	92 30       	cpi	r25, 0x02	; 2
    160a:	a1 f0       	breq	.+40     	; 0x1634 <M_Dio_PinPullUp+0xd0>
    160c:	18 f4       	brcc	.+6      	; 0x1614 <M_Dio_PinPullUp+0xb0>
    160e:	91 30       	cpi	r25, 0x01	; 1
    1610:	31 f0       	breq	.+12     	; 0x161e <M_Dio_PinPullUp+0xba>
    1612:	08 95       	ret
    1614:	93 30       	cpi	r25, 0x03	; 3
    1616:	c9 f0       	breq	.+50     	; 0x164a <M_Dio_PinPullUp+0xe6>
    1618:	94 30       	cpi	r25, 0x04	; 4
    161a:	11 f1       	breq	.+68     	; 0x1660 <M_Dio_PinPullUp+0xfc>
    161c:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin);		break;
    161e:	3b b3       	in	r19, 0x1b	; 27
    1620:	81 e0       	ldi	r24, 0x01	; 1
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	02 c0       	rjmp	.+4      	; 0x162a <M_Dio_PinPullUp+0xc6>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	2a 95       	dec	r18
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <M_Dio_PinPullUp+0xc2>
    162e:	83 2b       	or	r24, r19
    1630:	8b bb       	out	0x1b, r24	; 27
    1632:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin);		break;
    1634:	38 b3       	in	r19, 0x18	; 24
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 c0       	rjmp	.+4      	; 0x1640 <M_Dio_PinPullUp+0xdc>
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	2a 95       	dec	r18
    1642:	e2 f7       	brpl	.-8      	; 0x163c <M_Dio_PinPullUp+0xd8>
    1644:	83 2b       	or	r24, r19
    1646:	88 bb       	out	0x18, r24	; 24
    1648:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin);		break;
    164a:	35 b3       	in	r19, 0x15	; 21
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <M_Dio_PinPullUp+0xf2>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	2a 95       	dec	r18
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <M_Dio_PinPullUp+0xee>
    165a:	83 2b       	or	r24, r19
    165c:	85 bb       	out	0x15, r24	; 21
    165e:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin);		break;
    1660:	32 b3       	in	r19, 0x12	; 18
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 c0       	rjmp	.+4      	; 0x166c <M_Dio_PinPullUp+0x108>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	2a 95       	dec	r18
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <M_Dio_PinPullUp+0x104>
    1670:	83 2b       	or	r24, r19
    1672:	82 bb       	out	0x12, r24	; 18
    1674:	08 95       	ret

00001676 <__vector_1>:
void M_ExtInt_SetCallBack(void(*Local_void_Ptr)(void))
{
	ExtInt_void_CallBack = Local_void_Ptr;
}
ISR(INT0_vect)
{
    1676:	1f 92       	push	r1
    1678:	0f 92       	push	r0
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	0f 92       	push	r0
    167e:	11 24       	eor	r1, r1
    1680:	2f 93       	push	r18
    1682:	3f 93       	push	r19
    1684:	4f 93       	push	r20
    1686:	5f 93       	push	r21
    1688:	6f 93       	push	r22
    168a:	7f 93       	push	r23
    168c:	8f 93       	push	r24
    168e:	9f 93       	push	r25
    1690:	af 93       	push	r26
    1692:	bf 93       	push	r27
    1694:	ef 93       	push	r30
    1696:	ff 93       	push	r31
	ExtInt_void_CallBack();	
    1698:	e0 91 65 01 	lds	r30, 0x0165	; 0x800165 <ExtInt_void_CallBack>
    169c:	f0 91 66 01 	lds	r31, 0x0166	; 0x800166 <ExtInt_void_CallBack+0x1>
    16a0:	09 95       	icall
}
    16a2:	ff 91       	pop	r31
    16a4:	ef 91       	pop	r30
    16a6:	bf 91       	pop	r27
    16a8:	af 91       	pop	r26
    16aa:	9f 91       	pop	r25
    16ac:	8f 91       	pop	r24
    16ae:	7f 91       	pop	r23
    16b0:	6f 91       	pop	r22
    16b2:	5f 91       	pop	r21
    16b4:	4f 91       	pop	r20
    16b6:	3f 91       	pop	r19
    16b8:	2f 91       	pop	r18
    16ba:	0f 90       	pop	r0
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	0f 90       	pop	r0
    16c0:	1f 90       	pop	r1
    16c2:	18 95       	reti

000016c4 <M_I2c_Init>:
//     SetBit(TWCR,6);					 //   later
// 	SetBit(TWCR,7);                  //   to clear the flag bit
// 	while(GetBit(TWCR,7) == 0);
// 	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
// 	return TWDR;
}
    16c4:	86 b7       	in	r24, 0x36	; 54
    16c6:	8b 7f       	andi	r24, 0xFB	; 251
    16c8:	86 bf       	out	0x36, r24	; 54
    16ca:	8c e0       	ldi	r24, 0x0C	; 12
    16cc:	80 b9       	out	0x00, r24	; 0
    16ce:	86 b7       	in	r24, 0x36	; 54
    16d0:	84 60       	ori	r24, 0x04	; 4
    16d2:	86 bf       	out	0x36, r24	; 54
    16d4:	8f e3       	ldi	r24, 0x3F	; 63
    16d6:	9c e9       	ldi	r25, 0x9C	; 156
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <M_I2c_Init+0x14>
    16dc:	00 c0       	rjmp	.+0      	; 0x16de <M_I2c_Init+0x1a>
    16de:	00 00       	nop
    16e0:	08 95       	ret

000016e2 <M_I2c_StartCondition>:
    16e2:	86 b7       	in	r24, 0x36	; 54
    16e4:	80 62       	ori	r24, 0x20	; 32
    16e6:	86 bf       	out	0x36, r24	; 54
    16e8:	86 b7       	in	r24, 0x36	; 54
    16ea:	80 68       	ori	r24, 0x80	; 128
    16ec:	86 bf       	out	0x36, r24	; 54
    16ee:	06 b6       	in	r0, 0x36	; 54
    16f0:	07 fe       	sbrs	r0, 7
    16f2:	fd cf       	rjmp	.-6      	; 0x16ee <M_I2c_StartCondition+0xc>
    16f4:	81 b1       	in	r24, 0x01	; 1
    16f6:	88 7f       	andi	r24, 0xF8	; 248
    16f8:	88 30       	cpi	r24, 0x08	; 8
    16fa:	e1 f7       	brne	.-8      	; 0x16f4 <M_I2c_StartCondition+0x12>
    16fc:	8f e3       	ldi	r24, 0x3F	; 63
    16fe:	9c e9       	ldi	r25, 0x9C	; 156
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	f1 f7       	brne	.-4      	; 0x1700 <M_I2c_StartCondition+0x1e>
    1704:	00 c0       	rjmp	.+0      	; 0x1706 <M_I2c_StartCondition+0x24>
    1706:	00 00       	nop
    1708:	08 95       	ret

0000170a <M_I2c_SendSlaveAddressWrite>:
    170a:	88 0f       	add	r24, r24
    170c:	83 b9       	out	0x03, r24	; 3
    170e:	86 b7       	in	r24, 0x36	; 54
    1710:	80 68       	ori	r24, 0x80	; 128
    1712:	86 bf       	out	0x36, r24	; 54
    1714:	06 b6       	in	r0, 0x36	; 54
    1716:	07 fe       	sbrs	r0, 7
    1718:	fd cf       	rjmp	.-6      	; 0x1714 <M_I2c_SendSlaveAddressWrite+0xa>
    171a:	81 b1       	in	r24, 0x01	; 1
    171c:	88 7f       	andi	r24, 0xF8	; 248
    171e:	88 31       	cpi	r24, 0x18	; 24
    1720:	e1 f7       	brne	.-8      	; 0x171a <M_I2c_SendSlaveAddressWrite+0x10>
    1722:	8f e3       	ldi	r24, 0x3F	; 63
    1724:	9c e9       	ldi	r25, 0x9C	; 156
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <M_I2c_SendSlaveAddressWrite+0x1c>
    172a:	00 c0       	rjmp	.+0      	; 0x172c <M_I2c_SendSlaveAddressWrite+0x22>
    172c:	00 00       	nop
    172e:	08 95       	ret

00001730 <M_I2c_SendSlaveAddressRead>:
    1730:	90 e0       	ldi	r25, 0x00	; 0
    1732:	88 0f       	add	r24, r24
    1734:	99 1f       	adc	r25, r25
    1736:	81 60       	ori	r24, 0x01	; 1
    1738:	83 b9       	out	0x03, r24	; 3
    173a:	86 b7       	in	r24, 0x36	; 54
    173c:	80 68       	ori	r24, 0x80	; 128
    173e:	86 bf       	out	0x36, r24	; 54
    1740:	06 b6       	in	r0, 0x36	; 54
    1742:	07 fe       	sbrs	r0, 7
    1744:	fd cf       	rjmp	.-6      	; 0x1740 <M_I2c_SendSlaveAddressRead+0x10>
    1746:	81 b1       	in	r24, 0x01	; 1
    1748:	88 7f       	andi	r24, 0xF8	; 248
    174a:	80 34       	cpi	r24, 0x40	; 64
    174c:	e1 f7       	brne	.-8      	; 0x1746 <M_I2c_SendSlaveAddressRead+0x16>
    174e:	8f e3       	ldi	r24, 0x3F	; 63
    1750:	9c e9       	ldi	r25, 0x9C	; 156
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <M_I2c_SendSlaveAddressRead+0x22>
    1756:	00 c0       	rjmp	.+0      	; 0x1758 <M_I2c_SendSlaveAddressRead+0x28>
    1758:	00 00       	nop
    175a:	08 95       	ret

0000175c <M_I2c_SendSByte>:
    175c:	83 b9       	out	0x03, r24	; 3
    175e:	86 b7       	in	r24, 0x36	; 54
    1760:	8f 7d       	andi	r24, 0xDF	; 223
    1762:	86 bf       	out	0x36, r24	; 54
    1764:	86 b7       	in	r24, 0x36	; 54
    1766:	80 68       	ori	r24, 0x80	; 128
    1768:	86 bf       	out	0x36, r24	; 54
    176a:	06 b6       	in	r0, 0x36	; 54
    176c:	07 fe       	sbrs	r0, 7
    176e:	fd cf       	rjmp	.-6      	; 0x176a <M_I2c_SendSByte+0xe>
    1770:	81 b1       	in	r24, 0x01	; 1
    1772:	88 7f       	andi	r24, 0xF8	; 248
    1774:	88 32       	cpi	r24, 0x28	; 40
    1776:	e1 f7       	brne	.-8      	; 0x1770 <M_I2c_SendSByte+0x14>
    1778:	2f ef       	ldi	r18, 0xFF	; 255
    177a:	81 ee       	ldi	r24, 0xE1	; 225
    177c:	94 e0       	ldi	r25, 0x04	; 4
    177e:	21 50       	subi	r18, 0x01	; 1
    1780:	80 40       	sbci	r24, 0x00	; 0
    1782:	90 40       	sbci	r25, 0x00	; 0
    1784:	e1 f7       	brne	.-8      	; 0x177e <M_I2c_SendSByte+0x22>
    1786:	00 c0       	rjmp	.+0      	; 0x1788 <M_I2c_SendSByte+0x2c>
    1788:	00 00       	nop
    178a:	08 95       	ret

0000178c <M_I2c_ReadByteNoAck>:
u8 M_I2c_ReadByteNoAck()
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    178c:	84 e8       	ldi	r24, 0x84	; 132
    178e:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,TWINT) == 0);
    1790:	06 b6       	in	r0, 0x36	; 54
    1792:	07 fe       	sbrs	r0, 7
    1794:	fd cf       	rjmp	.-6      	; 0x1790 <M_I2c_ReadByteNoAck+0x4>
	return TWDR;
    1796:	83 b1       	in	r24, 0x03	; 3
}
    1798:	08 95       	ret

0000179a <M_I2c_RepeatedStart>:
void M_I2c_RepeatedStart(void)
{
	SetBit(TWCR,5);
    179a:	86 b7       	in	r24, 0x36	; 54
    179c:	80 62       	ori	r24, 0x20	; 32
    179e:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);                  //   to clear the flag bit
    17a0:	86 b7       	in	r24, 0x36	; 54
    17a2:	80 68       	ori	r24, 0x80	; 128
    17a4:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,7) == 0);
    17a6:	06 b6       	in	r0, 0x36	; 54
    17a8:	07 fe       	sbrs	r0, 7
    17aa:	fd cf       	rjmp	.-6      	; 0x17a6 <M_I2c_RepeatedStart+0xc>
	while((TWSR & 0xF8) != REP_START_ACK);
    17ac:	81 b1       	in	r24, 0x01	; 1
    17ae:	88 7f       	andi	r24, 0xF8	; 248
    17b0:	80 31       	cpi	r24, 0x10	; 16
    17b2:	e1 f7       	brne	.-8      	; 0x17ac <M_I2c_RepeatedStart+0x12>
}
    17b4:	08 95       	ret

000017b6 <M_I2c_StopCondition>:
//  	SetBit(TWCR,7);                  //   to clear the flag bit
//  	SetBit(TWCR,4);
// // 	SetBit(TWCR,2);	
	//while(GetBit(TWCR,7) == 0);
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	SetBit(TWCR,4);
    17b6:	86 b7       	in	r24, 0x36	; 54
    17b8:	80 61       	ori	r24, 0x10	; 16
    17ba:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);
    17bc:	86 b7       	in	r24, 0x36	; 54
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	86 bf       	out	0x36, r24	; 54
    17c2:	8f e9       	ldi	r24, 0x9F	; 159
    17c4:	9f e0       	ldi	r25, 0x0F	; 15
    17c6:	01 97       	sbiw	r24, 0x01	; 1
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <M_I2c_StopCondition+0x10>
    17ca:	00 c0       	rjmp	.+0      	; 0x17cc <M_I2c_StopCondition+0x16>
    17cc:	00 00       	nop
    17ce:	08 95       	ret

000017d0 <M_Timer0_Start>:
	#elif		TIMER0_PRESCALER	==		PRESCLNG_64
	ClrBit(TCCR0,CS02); SetBit(TCCR0,CS01);	SetBit(TCCR0,CS00);
	#elif		TIMER0_PRESCALER	==		PRESCLNG_256
	SetBit(TCCR0,CS02); ClrBit(TCCR0,CS01);	SetBit(TCCR0,CS00);
	#elif		TIMER0_PRESCALER	==		PRESCLNG_1024		
	SetBit(TCCR0,CS02); ClrBit(TCCR0,CS01);	SetBit(TCCR0,CS00);
    17d0:	83 b7       	in	r24, 0x33	; 51
    17d2:	84 60       	ori	r24, 0x04	; 4
    17d4:	83 bf       	out	0x33, r24	; 51
    17d6:	83 b7       	in	r24, 0x33	; 51
    17d8:	8d 7f       	andi	r24, 0xFD	; 253
    17da:	83 bf       	out	0x33, r24	; 51
    17dc:	83 b7       	in	r24, 0x33	; 51
    17de:	81 60       	ori	r24, 0x01	; 1
    17e0:	83 bf       	out	0x33, r24	; 51
    17e2:	08 95       	ret

000017e4 <M_Timer0_Stop>:
	#endif
}

void M_Timer0_Stop			(void)
{
	ClrBit(TCCR0,CS02); ClrBit(TCCR0,CS01);	ClrBit(TCCR0,CS00);
    17e4:	83 b7       	in	r24, 0x33	; 51
    17e6:	8b 7f       	andi	r24, 0xFB	; 251
    17e8:	83 bf       	out	0x33, r24	; 51
    17ea:	83 b7       	in	r24, 0x33	; 51
    17ec:	8d 7f       	andi	r24, 0xFD	; 253
    17ee:	83 bf       	out	0x33, r24	; 51
    17f0:	83 b7       	in	r24, 0x33	; 51
    17f2:	8e 7f       	andi	r24, 0xFE	; 254
    17f4:	83 bf       	out	0x33, r24	; 51
    17f6:	08 95       	ret

000017f8 <M_Pwm0_Init>:
}


void M_Pwm0_Init				(void)
{
	M_Dio_PinMode(PB3,OUTPUT);
    17f8:	61 e0       	ldi	r22, 0x01	; 1
    17fa:	87 e1       	ldi	r24, 0x17	; 23
    17fc:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <M_Dio_PinMode>

	#if			PWM0_MODE		==		FAST_PWM
	SetBit(TCCR0,WGM01); SetBit(TCCR0,WGM00);
    1800:	83 b7       	in	r24, 0x33	; 51
    1802:	88 60       	ori	r24, 0x08	; 8
    1804:	83 bf       	out	0x33, r24	; 51
    1806:	83 b7       	in	r24, 0x33	; 51
    1808:	80 64       	ori	r24, 0x40	; 64
    180a:	83 bf       	out	0x33, r24	; 51
	#elif		PWM0_MODE		==		PHASE_CORRECT
	ClrBit(TCCR0,WGM01); SetBit(TCCR0,WGM00);
	#endif
	
	#if			OUTPUT_MODE		==		NON_INVERTED
	SetBit(TCCR0,COM01); ClrBit(TCCR0,COM00);
    180c:	83 b7       	in	r24, 0x33	; 51
    180e:	80 62       	ori	r24, 0x20	; 32
    1810:	83 bf       	out	0x33, r24	; 51
    1812:	83 b7       	in	r24, 0x33	; 51
    1814:	8f 7e       	andi	r24, 0xEF	; 239
    1816:	83 bf       	out	0x33, r24	; 51
    1818:	08 95       	ret

0000181a <M_Pwm0_SetDutyCycle>:

void M_Pwm0_SetDutyCycle		(u8 Local_u8_DesiredDutyCycle)
{
	#if			OUTPUT_MODE		==		NON_INVERTED
	
	if(Local_u8_DesiredDutyCycle == 0)
    181a:	81 11       	cpse	r24, r1
    181c:	0f c0       	rjmp	.+30     	; 0x183c <M_Pwm0_SetDutyCycle+0x22>
	{
		SetBit(TCCR0,COM01); SetBit(TCCR0,COM00);
    181e:	93 b7       	in	r25, 0x33	; 51
    1820:	90 62       	ori	r25, 0x20	; 32
    1822:	93 bf       	out	0x33, r25	; 51
    1824:	93 b7       	in	r25, 0x33	; 51
    1826:	90 61       	ori	r25, 0x10	; 16
    1828:	93 bf       	out	0x33, r25	; 51
		OCR0 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
    182a:	98 2f       	mov	r25, r24
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	64 e6       	ldi	r22, 0x64	; 100
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__divmodhi4>
    1836:	60 95       	com	r22
    1838:	6c bf       	out	0x3c, r22	; 60
    183a:	08 95       	ret
	}
	else
	{
		SetBit(TCCR0,COM01); ClrBit(TCCR0,COM00);
    183c:	93 b7       	in	r25, 0x33	; 51
    183e:	90 62       	ori	r25, 0x20	; 32
    1840:	93 bf       	out	0x33, r25	; 51
    1842:	93 b7       	in	r25, 0x33	; 51
    1844:	9f 7e       	andi	r25, 0xEF	; 239
    1846:	93 bf       	out	0x33, r25	; 51
		OCR0 = (((Local_u8_DesiredDutyCycle * 256) / 100) - 1);
    1848:	98 2f       	mov	r25, r24
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	64 e6       	ldi	r22, 0x64	; 100
    184e:	70 e0       	ldi	r23, 0x00	; 0
    1850:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <__divmodhi4>
    1854:	61 50       	subi	r22, 0x01	; 1
    1856:	6c bf       	out	0x3c, r22	; 60
    1858:	08 95       	ret

0000185a <M_Pwm0_Start>:
	
}

void M_Pwm0_Start				(void)
{
	M_Timer0_Start();
    185a:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <M_Timer0_Start>
    185e:	08 95       	ret

00001860 <M_Pwm0_Stop>:
}

void M_Pwm0_Stop				(void)
{
	M_Timer0_Stop();
    1860:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <M_Timer0_Stop>
    1864:	08 95       	ret

00001866 <M_Pwm1_Init>:
#include "Timer1.h"

void M_Pwm1_Init				(void)
{
	
 	SetBit(DDRD,5);	
    1866:	81 b3       	in	r24, 0x11	; 17
    1868:	80 62       	ori	r24, 0x20	; 32
    186a:	81 bb       	out	0x11, r24	; 17
 	
 	SetBit(TCCR1A,COM1A1);
    186c:	8f b5       	in	r24, 0x2f	; 47
    186e:	80 68       	ori	r24, 0x80	; 128
    1870:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,COM1A0);
    1872:	8f b5       	in	r24, 0x2f	; 47
    1874:	8f 7b       	andi	r24, 0xBF	; 191
    1876:	8f bd       	out	0x2f, r24	; 47
	
	SetBit(TCCR1B,WGM13);
    1878:	8e b5       	in	r24, 0x2e	; 46
    187a:	80 61       	ori	r24, 0x10	; 16
    187c:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,WGM12);
    187e:	8e b5       	in	r24, 0x2e	; 46
    1880:	88 60       	ori	r24, 0x08	; 8
    1882:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1A,WGM11);
    1884:	8f b5       	in	r24, 0x2f	; 47
    1886:	82 60       	ori	r24, 0x02	; 2
    1888:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,WGM10);
    188a:	8f b5       	in	r24, 0x2f	; 47
    188c:	8e 7f       	andi	r24, 0xFE	; 254
    188e:	8f bd       	out	0x2f, r24	; 47
    1890:	08 95       	ret

00001892 <M_Pwm1_SetDutyCycle>:
	

	
}
void M_Pwm1_SetDutyCycle		(f32 Local_f32_DesiredDutyCycle)
{
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	ff 92       	push	r15
    189a:	6b 01       	movw	r12, r22
    189c:	7c 01       	movw	r14, r24
	OCR1A = (((Local_f32_DesiredDutyCycle * ICR1)/100)-1);
    189e:	66 b5       	in	r22, 0x26	; 38
    18a0:	77 b5       	in	r23, 0x27	; 39
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <__floatunsisf>
    18aa:	a7 01       	movw	r20, r14
    18ac:	96 01       	movw	r18, r12
    18ae:	0e 94 41 0e 	call	0x1c82	; 0x1c82 <__mulsf3>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	48 ec       	ldi	r20, 0xC8	; 200
    18b8:	52 e4       	ldi	r21, 0x42	; 66
    18ba:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__divsf3>
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	40 e8       	ldi	r20, 0x80	; 128
    18c4:	5f e3       	ldi	r21, 0x3F	; 63
    18c6:	0e 94 a5 0c 	call	0x194a	; 0x194a <__subsf3>
    18ca:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <__fixunssfsi>
    18ce:	7b bd       	out	0x2b, r23	; 43
    18d0:	6a bd       	out	0x2a, r22	; 42
}
    18d2:	ff 90       	pop	r15
    18d4:	ef 90       	pop	r14
    18d6:	df 90       	pop	r13
    18d8:	cf 90       	pop	r12
    18da:	08 95       	ret

000018dc <M_Pwm1_SetFrequency>:
void M_Pwm1_SetFrequency		(u16 Local_u16_DesiredFrequency)
{
	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Local_u16_DesiredFrequency * TIMER1_PRESCALER));
    18dc:	00 24       	eor	r0, r0
    18de:	96 95       	lsr	r25
    18e0:	87 95       	ror	r24
    18e2:	07 94       	ror	r0
    18e4:	96 95       	lsr	r25
    18e6:	87 95       	ror	r24
    18e8:	07 94       	ror	r0
    18ea:	98 2f       	mov	r25, r24
    18ec:	80 2d       	mov	r24, r0
    18ee:	9c 01       	movw	r18, r24
    18f0:	40 e0       	ldi	r20, 0x00	; 0
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	74 e2       	ldi	r23, 0x24	; 36
    18f8:	84 ef       	ldi	r24, 0xF4	; 244
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__divmodsi4>
    1900:	37 bd       	out	0x27, r19	; 39
    1902:	26 bd       	out	0x26, r18	; 38
    1904:	08 95       	ret

00001906 <M_Pwm1_Start>:
}
void M_Pwm1_Start				(void)
{
	#if		TIMER1_PRESCALER == PRESCLNG_64
	ClrBit(TCCR1B,CS12);
    1906:	8e b5       	in	r24, 0x2e	; 46
    1908:	8b 7f       	andi	r24, 0xFB	; 251
    190a:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS11);
    190c:	8e b5       	in	r24, 0x2e	; 46
    190e:	82 60       	ori	r24, 0x02	; 2
    1910:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS10);
    1912:	8e b5       	in	r24, 0x2e	; 46
    1914:	81 60       	ori	r24, 0x01	; 1
    1916:	8e bd       	out	0x2e, r24	; 46
    1918:	08 95       	ret

0000191a <M_Uart_Init>:
}
void M_Uart_Write(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
	while(GetBit(UCSRA,6) == 0);
}
    191a:	81 b3       	in	r24, 0x11	; 17
    191c:	8e 7f       	andi	r24, 0xFE	; 254
    191e:	81 bb       	out	0x11, r24	; 17
    1920:	81 b3       	in	r24, 0x11	; 17
    1922:	82 60       	ori	r24, 0x02	; 2
    1924:	81 bb       	out	0x11, r24	; 17
    1926:	8a b1       	in	r24, 0x0a	; 10
    1928:	8b 7f       	andi	r24, 0xFB	; 251
    192a:	8a b9       	out	0x0a, r24	; 10
    192c:	87 e6       	ldi	r24, 0x67	; 103
    192e:	89 b9       	out	0x09, r24	; 9
    1930:	86 ea       	ldi	r24, 0xA6	; 166
    1932:	80 bd       	out	0x20, r24	; 32
    1934:	8a b1       	in	r24, 0x0a	; 10
    1936:	88 60       	ori	r24, 0x08	; 8
    1938:	8a b9       	out	0x0a, r24	; 10
    193a:	8a b1       	in	r24, 0x0a	; 10
    193c:	80 61       	ori	r24, 0x10	; 16
    193e:	8a b9       	out	0x0a, r24	; 10
    1940:	08 95       	ret

00001942 <M_Uart_Read>:
u8   M_Uart_Read(void)
{
	while(GetBit(UCSRA,7) == 0);
    1942:	5f 9b       	sbis	0x0b, 7	; 11
    1944:	fe cf       	rjmp	.-4      	; 0x1942 <M_Uart_Read>
	return UDR;
    1946:	8c b1       	in	r24, 0x0c	; 12
    1948:	08 95       	ret

0000194a <__subsf3>:
    194a:	50 58       	subi	r21, 0x80	; 128

0000194c <__addsf3>:
    194c:	bb 27       	eor	r27, r27
    194e:	aa 27       	eor	r26, r26
    1950:	0e 94 bd 0c 	call	0x197a	; 0x197a <__addsf3x>
    1954:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_round>
    1958:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_pscA>
    195c:	38 f0       	brcs	.+14     	; 0x196c <__addsf3+0x20>
    195e:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fp_pscB>
    1962:	20 f0       	brcs	.+8      	; 0x196c <__addsf3+0x20>
    1964:	39 f4       	brne	.+14     	; 0x1974 <__addsf3+0x28>
    1966:	9f 3f       	cpi	r25, 0xFF	; 255
    1968:	19 f4       	brne	.+6      	; 0x1970 <__addsf3+0x24>
    196a:	26 f4       	brtc	.+8      	; 0x1974 <__addsf3+0x28>
    196c:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_nan>
    1970:	0e f4       	brtc	.+2      	; 0x1974 <__addsf3+0x28>
    1972:	e0 95       	com	r30
    1974:	e7 fb       	bst	r30, 7
    1976:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__fp_inf>

0000197a <__addsf3x>:
    197a:	e9 2f       	mov	r30, r25
    197c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_split3>
    1980:	58 f3       	brcs	.-42     	; 0x1958 <__addsf3+0xc>
    1982:	ba 17       	cp	r27, r26
    1984:	62 07       	cpc	r22, r18
    1986:	73 07       	cpc	r23, r19
    1988:	84 07       	cpc	r24, r20
    198a:	95 07       	cpc	r25, r21
    198c:	20 f0       	brcs	.+8      	; 0x1996 <__addsf3x+0x1c>
    198e:	79 f4       	brne	.+30     	; 0x19ae <__addsf3x+0x34>
    1990:	a6 f5       	brtc	.+104    	; 0x19fa <__addsf3x+0x80>
    1992:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_zero>
    1996:	0e f4       	brtc	.+2      	; 0x199a <__addsf3x+0x20>
    1998:	e0 95       	com	r30
    199a:	0b 2e       	mov	r0, r27
    199c:	ba 2f       	mov	r27, r26
    199e:	a0 2d       	mov	r26, r0
    19a0:	0b 01       	movw	r0, r22
    19a2:	b9 01       	movw	r22, r18
    19a4:	90 01       	movw	r18, r0
    19a6:	0c 01       	movw	r0, r24
    19a8:	ca 01       	movw	r24, r20
    19aa:	a0 01       	movw	r20, r0
    19ac:	11 24       	eor	r1, r1
    19ae:	ff 27       	eor	r31, r31
    19b0:	59 1b       	sub	r21, r25
    19b2:	99 f0       	breq	.+38     	; 0x19da <__addsf3x+0x60>
    19b4:	59 3f       	cpi	r21, 0xF9	; 249
    19b6:	50 f4       	brcc	.+20     	; 0x19cc <__addsf3x+0x52>
    19b8:	50 3e       	cpi	r21, 0xE0	; 224
    19ba:	68 f1       	brcs	.+90     	; 0x1a16 <__addsf3x+0x9c>
    19bc:	1a 16       	cp	r1, r26
    19be:	f0 40       	sbci	r31, 0x00	; 0
    19c0:	a2 2f       	mov	r26, r18
    19c2:	23 2f       	mov	r18, r19
    19c4:	34 2f       	mov	r19, r20
    19c6:	44 27       	eor	r20, r20
    19c8:	58 5f       	subi	r21, 0xF8	; 248
    19ca:	f3 cf       	rjmp	.-26     	; 0x19b2 <__addsf3x+0x38>
    19cc:	46 95       	lsr	r20
    19ce:	37 95       	ror	r19
    19d0:	27 95       	ror	r18
    19d2:	a7 95       	ror	r26
    19d4:	f0 40       	sbci	r31, 0x00	; 0
    19d6:	53 95       	inc	r21
    19d8:	c9 f7       	brne	.-14     	; 0x19cc <__addsf3x+0x52>
    19da:	7e f4       	brtc	.+30     	; 0x19fa <__addsf3x+0x80>
    19dc:	1f 16       	cp	r1, r31
    19de:	ba 0b       	sbc	r27, r26
    19e0:	62 0b       	sbc	r22, r18
    19e2:	73 0b       	sbc	r23, r19
    19e4:	84 0b       	sbc	r24, r20
    19e6:	ba f0       	brmi	.+46     	; 0x1a16 <__addsf3x+0x9c>
    19e8:	91 50       	subi	r25, 0x01	; 1
    19ea:	a1 f0       	breq	.+40     	; 0x1a14 <__addsf3x+0x9a>
    19ec:	ff 0f       	add	r31, r31
    19ee:	bb 1f       	adc	r27, r27
    19f0:	66 1f       	adc	r22, r22
    19f2:	77 1f       	adc	r23, r23
    19f4:	88 1f       	adc	r24, r24
    19f6:	c2 f7       	brpl	.-16     	; 0x19e8 <__addsf3x+0x6e>
    19f8:	0e c0       	rjmp	.+28     	; 0x1a16 <__addsf3x+0x9c>
    19fa:	ba 0f       	add	r27, r26
    19fc:	62 1f       	adc	r22, r18
    19fe:	73 1f       	adc	r23, r19
    1a00:	84 1f       	adc	r24, r20
    1a02:	48 f4       	brcc	.+18     	; 0x1a16 <__addsf3x+0x9c>
    1a04:	87 95       	ror	r24
    1a06:	77 95       	ror	r23
    1a08:	67 95       	ror	r22
    1a0a:	b7 95       	ror	r27
    1a0c:	f7 95       	ror	r31
    1a0e:	9e 3f       	cpi	r25, 0xFE	; 254
    1a10:	08 f0       	brcs	.+2      	; 0x1a14 <__addsf3x+0x9a>
    1a12:	b0 cf       	rjmp	.-160    	; 0x1974 <__addsf3+0x28>
    1a14:	93 95       	inc	r25
    1a16:	88 0f       	add	r24, r24
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <__addsf3x+0xa2>
    1a1a:	99 27       	eor	r25, r25
    1a1c:	ee 0f       	add	r30, r30
    1a1e:	97 95       	ror	r25
    1a20:	87 95       	ror	r24
    1a22:	08 95       	ret

00001a24 <__divsf3>:
    1a24:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <__divsf3x>
    1a28:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_round>
    1a2c:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fp_pscB>
    1a30:	58 f0       	brcs	.+22     	; 0x1a48 <__divsf3+0x24>
    1a32:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_pscA>
    1a36:	40 f0       	brcs	.+16     	; 0x1a48 <__divsf3+0x24>
    1a38:	29 f4       	brne	.+10     	; 0x1a44 <__divsf3+0x20>
    1a3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1a3c:	29 f0       	breq	.+10     	; 0x1a48 <__divsf3+0x24>
    1a3e:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__fp_inf>
    1a42:	51 11       	cpse	r21, r1
    1a44:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__fp_szero>
    1a48:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_nan>

00001a4c <__divsf3x>:
    1a4c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_split3>
    1a50:	68 f3       	brcs	.-38     	; 0x1a2c <__divsf3+0x8>

00001a52 <__divsf3_pse>:
    1a52:	99 23       	and	r25, r25
    1a54:	b1 f3       	breq	.-20     	; 0x1a42 <__divsf3+0x1e>
    1a56:	55 23       	and	r21, r21
    1a58:	91 f3       	breq	.-28     	; 0x1a3e <__divsf3+0x1a>
    1a5a:	95 1b       	sub	r25, r21
    1a5c:	55 0b       	sbc	r21, r21
    1a5e:	bb 27       	eor	r27, r27
    1a60:	aa 27       	eor	r26, r26
    1a62:	62 17       	cp	r22, r18
    1a64:	73 07       	cpc	r23, r19
    1a66:	84 07       	cpc	r24, r20
    1a68:	38 f0       	brcs	.+14     	; 0x1a78 <__divsf3_pse+0x26>
    1a6a:	9f 5f       	subi	r25, 0xFF	; 255
    1a6c:	5f 4f       	sbci	r21, 0xFF	; 255
    1a6e:	22 0f       	add	r18, r18
    1a70:	33 1f       	adc	r19, r19
    1a72:	44 1f       	adc	r20, r20
    1a74:	aa 1f       	adc	r26, r26
    1a76:	a9 f3       	breq	.-22     	; 0x1a62 <__divsf3_pse+0x10>
    1a78:	35 d0       	rcall	.+106    	; 0x1ae4 <__divsf3_pse+0x92>
    1a7a:	0e 2e       	mov	r0, r30
    1a7c:	3a f0       	brmi	.+14     	; 0x1a8c <__divsf3_pse+0x3a>
    1a7e:	e0 e8       	ldi	r30, 0x80	; 128
    1a80:	32 d0       	rcall	.+100    	; 0x1ae6 <__divsf3_pse+0x94>
    1a82:	91 50       	subi	r25, 0x01	; 1
    1a84:	50 40       	sbci	r21, 0x00	; 0
    1a86:	e6 95       	lsr	r30
    1a88:	00 1c       	adc	r0, r0
    1a8a:	ca f7       	brpl	.-14     	; 0x1a7e <__divsf3_pse+0x2c>
    1a8c:	2b d0       	rcall	.+86     	; 0x1ae4 <__divsf3_pse+0x92>
    1a8e:	fe 2f       	mov	r31, r30
    1a90:	29 d0       	rcall	.+82     	; 0x1ae4 <__divsf3_pse+0x92>
    1a92:	66 0f       	add	r22, r22
    1a94:	77 1f       	adc	r23, r23
    1a96:	88 1f       	adc	r24, r24
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	26 17       	cp	r18, r22
    1a9c:	37 07       	cpc	r19, r23
    1a9e:	48 07       	cpc	r20, r24
    1aa0:	ab 07       	cpc	r26, r27
    1aa2:	b0 e8       	ldi	r27, 0x80	; 128
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <__divsf3_pse+0x56>
    1aa6:	bb 0b       	sbc	r27, r27
    1aa8:	80 2d       	mov	r24, r0
    1aaa:	bf 01       	movw	r22, r30
    1aac:	ff 27       	eor	r31, r31
    1aae:	93 58       	subi	r25, 0x83	; 131
    1ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ab2:	3a f0       	brmi	.+14     	; 0x1ac2 <__divsf3_pse+0x70>
    1ab4:	9e 3f       	cpi	r25, 0xFE	; 254
    1ab6:	51 05       	cpc	r21, r1
    1ab8:	78 f0       	brcs	.+30     	; 0x1ad8 <__divsf3_pse+0x86>
    1aba:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__fp_inf>
    1abe:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__fp_szero>
    1ac2:	5f 3f       	cpi	r21, 0xFF	; 255
    1ac4:	e4 f3       	brlt	.-8      	; 0x1abe <__divsf3_pse+0x6c>
    1ac6:	98 3e       	cpi	r25, 0xE8	; 232
    1ac8:	d4 f3       	brlt	.-12     	; 0x1abe <__divsf3_pse+0x6c>
    1aca:	86 95       	lsr	r24
    1acc:	77 95       	ror	r23
    1ace:	67 95       	ror	r22
    1ad0:	b7 95       	ror	r27
    1ad2:	f7 95       	ror	r31
    1ad4:	9f 5f       	subi	r25, 0xFF	; 255
    1ad6:	c9 f7       	brne	.-14     	; 0x1aca <__divsf3_pse+0x78>
    1ad8:	88 0f       	add	r24, r24
    1ada:	91 1d       	adc	r25, r1
    1adc:	96 95       	lsr	r25
    1ade:	87 95       	ror	r24
    1ae0:	97 f9       	bld	r25, 7
    1ae2:	08 95       	ret
    1ae4:	e1 e0       	ldi	r30, 0x01	; 1
    1ae6:	66 0f       	add	r22, r22
    1ae8:	77 1f       	adc	r23, r23
    1aea:	88 1f       	adc	r24, r24
    1aec:	bb 1f       	adc	r27, r27
    1aee:	62 17       	cp	r22, r18
    1af0:	73 07       	cpc	r23, r19
    1af2:	84 07       	cpc	r24, r20
    1af4:	ba 07       	cpc	r27, r26
    1af6:	20 f0       	brcs	.+8      	; 0x1b00 <__divsf3_pse+0xae>
    1af8:	62 1b       	sub	r22, r18
    1afa:	73 0b       	sbc	r23, r19
    1afc:	84 0b       	sbc	r24, r20
    1afe:	ba 0b       	sbc	r27, r26
    1b00:	ee 1f       	adc	r30, r30
    1b02:	88 f7       	brcc	.-30     	; 0x1ae6 <__divsf3_pse+0x94>
    1b04:	e0 95       	com	r30
    1b06:	08 95       	ret

00001b08 <__fixunssfsi>:
    1b08:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <__fp_splitA>
    1b0c:	88 f0       	brcs	.+34     	; 0x1b30 <__fixunssfsi+0x28>
    1b0e:	9f 57       	subi	r25, 0x7F	; 127
    1b10:	98 f0       	brcs	.+38     	; 0x1b38 <__fixunssfsi+0x30>
    1b12:	b9 2f       	mov	r27, r25
    1b14:	99 27       	eor	r25, r25
    1b16:	b7 51       	subi	r27, 0x17	; 23
    1b18:	b0 f0       	brcs	.+44     	; 0x1b46 <__fixunssfsi+0x3e>
    1b1a:	e1 f0       	breq	.+56     	; 0x1b54 <__fixunssfsi+0x4c>
    1b1c:	66 0f       	add	r22, r22
    1b1e:	77 1f       	adc	r23, r23
    1b20:	88 1f       	adc	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	1a f0       	brmi	.+6      	; 0x1b2c <__fixunssfsi+0x24>
    1b26:	ba 95       	dec	r27
    1b28:	c9 f7       	brne	.-14     	; 0x1b1c <__fixunssfsi+0x14>
    1b2a:	14 c0       	rjmp	.+40     	; 0x1b54 <__fixunssfsi+0x4c>
    1b2c:	b1 30       	cpi	r27, 0x01	; 1
    1b2e:	91 f0       	breq	.+36     	; 0x1b54 <__fixunssfsi+0x4c>
    1b30:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__fp_zero>
    1b34:	b1 e0       	ldi	r27, 0x01	; 1
    1b36:	08 95       	ret
    1b38:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_zero>
    1b3c:	67 2f       	mov	r22, r23
    1b3e:	78 2f       	mov	r23, r24
    1b40:	88 27       	eor	r24, r24
    1b42:	b8 5f       	subi	r27, 0xF8	; 248
    1b44:	39 f0       	breq	.+14     	; 0x1b54 <__fixunssfsi+0x4c>
    1b46:	b9 3f       	cpi	r27, 0xF9	; 249
    1b48:	cc f3       	brlt	.-14     	; 0x1b3c <__fixunssfsi+0x34>
    1b4a:	86 95       	lsr	r24
    1b4c:	77 95       	ror	r23
    1b4e:	67 95       	ror	r22
    1b50:	b3 95       	inc	r27
    1b52:	d9 f7       	brne	.-10     	; 0x1b4a <__fixunssfsi+0x42>
    1b54:	3e f4       	brtc	.+14     	; 0x1b64 <__fixunssfsi+0x5c>
    1b56:	90 95       	com	r25
    1b58:	80 95       	com	r24
    1b5a:	70 95       	com	r23
    1b5c:	61 95       	neg	r22
    1b5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1b60:	8f 4f       	sbci	r24, 0xFF	; 255
    1b62:	9f 4f       	sbci	r25, 0xFF	; 255
    1b64:	08 95       	ret

00001b66 <__floatunsisf>:
    1b66:	e8 94       	clt
    1b68:	09 c0       	rjmp	.+18     	; 0x1b7c <__floatsisf+0x12>

00001b6a <__floatsisf>:
    1b6a:	97 fb       	bst	r25, 7
    1b6c:	3e f4       	brtc	.+14     	; 0x1b7c <__floatsisf+0x12>
    1b6e:	90 95       	com	r25
    1b70:	80 95       	com	r24
    1b72:	70 95       	com	r23
    1b74:	61 95       	neg	r22
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	99 23       	and	r25, r25
    1b7e:	a9 f0       	breq	.+42     	; 0x1baa <__floatsisf+0x40>
    1b80:	f9 2f       	mov	r31, r25
    1b82:	96 e9       	ldi	r25, 0x96	; 150
    1b84:	bb 27       	eor	r27, r27
    1b86:	93 95       	inc	r25
    1b88:	f6 95       	lsr	r31
    1b8a:	87 95       	ror	r24
    1b8c:	77 95       	ror	r23
    1b8e:	67 95       	ror	r22
    1b90:	b7 95       	ror	r27
    1b92:	f1 11       	cpse	r31, r1
    1b94:	f8 cf       	rjmp	.-16     	; 0x1b86 <__floatsisf+0x1c>
    1b96:	fa f4       	brpl	.+62     	; 0x1bd6 <__floatsisf+0x6c>
    1b98:	bb 0f       	add	r27, r27
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <__floatsisf+0x36>
    1b9c:	60 ff       	sbrs	r22, 0
    1b9e:	1b c0       	rjmp	.+54     	; 0x1bd6 <__floatsisf+0x6c>
    1ba0:	6f 5f       	subi	r22, 0xFF	; 255
    1ba2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba4:	8f 4f       	sbci	r24, 0xFF	; 255
    1ba6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ba8:	16 c0       	rjmp	.+44     	; 0x1bd6 <__floatsisf+0x6c>
    1baa:	88 23       	and	r24, r24
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <__floatsisf+0x48>
    1bae:	96 e9       	ldi	r25, 0x96	; 150
    1bb0:	11 c0       	rjmp	.+34     	; 0x1bd4 <__floatsisf+0x6a>
    1bb2:	77 23       	and	r23, r23
    1bb4:	21 f0       	breq	.+8      	; 0x1bbe <__floatsisf+0x54>
    1bb6:	9e e8       	ldi	r25, 0x8E	; 142
    1bb8:	87 2f       	mov	r24, r23
    1bba:	76 2f       	mov	r23, r22
    1bbc:	05 c0       	rjmp	.+10     	; 0x1bc8 <__floatsisf+0x5e>
    1bbe:	66 23       	and	r22, r22
    1bc0:	71 f0       	breq	.+28     	; 0x1bde <__floatsisf+0x74>
    1bc2:	96 e8       	ldi	r25, 0x86	; 134
    1bc4:	86 2f       	mov	r24, r22
    1bc6:	70 e0       	ldi	r23, 0x00	; 0
    1bc8:	60 e0       	ldi	r22, 0x00	; 0
    1bca:	2a f0       	brmi	.+10     	; 0x1bd6 <__floatsisf+0x6c>
    1bcc:	9a 95       	dec	r25
    1bce:	66 0f       	add	r22, r22
    1bd0:	77 1f       	adc	r23, r23
    1bd2:	88 1f       	adc	r24, r24
    1bd4:	da f7       	brpl	.-10     	; 0x1bcc <__floatsisf+0x62>
    1bd6:	88 0f       	add	r24, r24
    1bd8:	96 95       	lsr	r25
    1bda:	87 95       	ror	r24
    1bdc:	97 f9       	bld	r25, 7
    1bde:	08 95       	ret

00001be0 <__fp_inf>:
    1be0:	97 f9       	bld	r25, 7
    1be2:	9f 67       	ori	r25, 0x7F	; 127
    1be4:	80 e8       	ldi	r24, 0x80	; 128
    1be6:	70 e0       	ldi	r23, 0x00	; 0
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	08 95       	ret

00001bec <__fp_nan>:
    1bec:	9f ef       	ldi	r25, 0xFF	; 255
    1bee:	80 ec       	ldi	r24, 0xC0	; 192
    1bf0:	08 95       	ret

00001bf2 <__fp_pscA>:
    1bf2:	00 24       	eor	r0, r0
    1bf4:	0a 94       	dec	r0
    1bf6:	16 16       	cp	r1, r22
    1bf8:	17 06       	cpc	r1, r23
    1bfa:	18 06       	cpc	r1, r24
    1bfc:	09 06       	cpc	r0, r25
    1bfe:	08 95       	ret

00001c00 <__fp_pscB>:
    1c00:	00 24       	eor	r0, r0
    1c02:	0a 94       	dec	r0
    1c04:	12 16       	cp	r1, r18
    1c06:	13 06       	cpc	r1, r19
    1c08:	14 06       	cpc	r1, r20
    1c0a:	05 06       	cpc	r0, r21
    1c0c:	08 95       	ret

00001c0e <__fp_round>:
    1c0e:	09 2e       	mov	r0, r25
    1c10:	03 94       	inc	r0
    1c12:	00 0c       	add	r0, r0
    1c14:	11 f4       	brne	.+4      	; 0x1c1a <__fp_round+0xc>
    1c16:	88 23       	and	r24, r24
    1c18:	52 f0       	brmi	.+20     	; 0x1c2e <__fp_round+0x20>
    1c1a:	bb 0f       	add	r27, r27
    1c1c:	40 f4       	brcc	.+16     	; 0x1c2e <__fp_round+0x20>
    1c1e:	bf 2b       	or	r27, r31
    1c20:	11 f4       	brne	.+4      	; 0x1c26 <__fp_round+0x18>
    1c22:	60 ff       	sbrs	r22, 0
    1c24:	04 c0       	rjmp	.+8      	; 0x1c2e <__fp_round+0x20>
    1c26:	6f 5f       	subi	r22, 0xFF	; 255
    1c28:	7f 4f       	sbci	r23, 0xFF	; 255
    1c2a:	8f 4f       	sbci	r24, 0xFF	; 255
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	08 95       	ret

00001c30 <__fp_split3>:
    1c30:	57 fd       	sbrc	r21, 7
    1c32:	90 58       	subi	r25, 0x80	; 128
    1c34:	44 0f       	add	r20, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	59 f0       	breq	.+22     	; 0x1c50 <__fp_splitA+0x10>
    1c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3c:	71 f0       	breq	.+28     	; 0x1c5a <__fp_splitA+0x1a>
    1c3e:	47 95       	ror	r20

00001c40 <__fp_splitA>:
    1c40:	88 0f       	add	r24, r24
    1c42:	97 fb       	bst	r25, 7
    1c44:	99 1f       	adc	r25, r25
    1c46:	61 f0       	breq	.+24     	; 0x1c60 <__fp_splitA+0x20>
    1c48:	9f 3f       	cpi	r25, 0xFF	; 255
    1c4a:	79 f0       	breq	.+30     	; 0x1c6a <__fp_splitA+0x2a>
    1c4c:	87 95       	ror	r24
    1c4e:	08 95       	ret
    1c50:	12 16       	cp	r1, r18
    1c52:	13 06       	cpc	r1, r19
    1c54:	14 06       	cpc	r1, r20
    1c56:	55 1f       	adc	r21, r21
    1c58:	f2 cf       	rjmp	.-28     	; 0x1c3e <__fp_split3+0xe>
    1c5a:	46 95       	lsr	r20
    1c5c:	f1 df       	rcall	.-30     	; 0x1c40 <__fp_splitA>
    1c5e:	08 c0       	rjmp	.+16     	; 0x1c70 <__fp_splitA+0x30>
    1c60:	16 16       	cp	r1, r22
    1c62:	17 06       	cpc	r1, r23
    1c64:	18 06       	cpc	r1, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	f1 cf       	rjmp	.-30     	; 0x1c4c <__fp_splitA+0xc>
    1c6a:	86 95       	lsr	r24
    1c6c:	71 05       	cpc	r23, r1
    1c6e:	61 05       	cpc	r22, r1
    1c70:	08 94       	sec
    1c72:	08 95       	ret

00001c74 <__fp_zero>:
    1c74:	e8 94       	clt

00001c76 <__fp_szero>:
    1c76:	bb 27       	eor	r27, r27
    1c78:	66 27       	eor	r22, r22
    1c7a:	77 27       	eor	r23, r23
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	97 f9       	bld	r25, 7
    1c80:	08 95       	ret

00001c82 <__mulsf3>:
    1c82:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__mulsf3x>
    1c86:	0c 94 07 0e 	jmp	0x1c0e	; 0x1c0e <__fp_round>
    1c8a:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <__fp_pscA>
    1c8e:	38 f0       	brcs	.+14     	; 0x1c9e <__mulsf3+0x1c>
    1c90:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <__fp_pscB>
    1c94:	20 f0       	brcs	.+8      	; 0x1c9e <__mulsf3+0x1c>
    1c96:	95 23       	and	r25, r21
    1c98:	11 f0       	breq	.+4      	; 0x1c9e <__mulsf3+0x1c>
    1c9a:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__fp_inf>
    1c9e:	0c 94 f6 0d 	jmp	0x1bec	; 0x1bec <__fp_nan>
    1ca2:	11 24       	eor	r1, r1
    1ca4:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__fp_szero>

00001ca8 <__mulsf3x>:
    1ca8:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <__fp_split3>
    1cac:	70 f3       	brcs	.-36     	; 0x1c8a <__mulsf3+0x8>

00001cae <__mulsf3_pse>:
    1cae:	95 9f       	mul	r25, r21
    1cb0:	c1 f3       	breq	.-16     	; 0x1ca2 <__mulsf3+0x20>
    1cb2:	95 0f       	add	r25, r21
    1cb4:	50 e0       	ldi	r21, 0x00	; 0
    1cb6:	55 1f       	adc	r21, r21
    1cb8:	62 9f       	mul	r22, r18
    1cba:	f0 01       	movw	r30, r0
    1cbc:	72 9f       	mul	r23, r18
    1cbe:	bb 27       	eor	r27, r27
    1cc0:	f0 0d       	add	r31, r0
    1cc2:	b1 1d       	adc	r27, r1
    1cc4:	63 9f       	mul	r22, r19
    1cc6:	aa 27       	eor	r26, r26
    1cc8:	f0 0d       	add	r31, r0
    1cca:	b1 1d       	adc	r27, r1
    1ccc:	aa 1f       	adc	r26, r26
    1cce:	64 9f       	mul	r22, r20
    1cd0:	66 27       	eor	r22, r22
    1cd2:	b0 0d       	add	r27, r0
    1cd4:	a1 1d       	adc	r26, r1
    1cd6:	66 1f       	adc	r22, r22
    1cd8:	82 9f       	mul	r24, r18
    1cda:	22 27       	eor	r18, r18
    1cdc:	b0 0d       	add	r27, r0
    1cde:	a1 1d       	adc	r26, r1
    1ce0:	62 1f       	adc	r22, r18
    1ce2:	73 9f       	mul	r23, r19
    1ce4:	b0 0d       	add	r27, r0
    1ce6:	a1 1d       	adc	r26, r1
    1ce8:	62 1f       	adc	r22, r18
    1cea:	83 9f       	mul	r24, r19
    1cec:	a0 0d       	add	r26, r0
    1cee:	61 1d       	adc	r22, r1
    1cf0:	22 1f       	adc	r18, r18
    1cf2:	74 9f       	mul	r23, r20
    1cf4:	33 27       	eor	r19, r19
    1cf6:	a0 0d       	add	r26, r0
    1cf8:	61 1d       	adc	r22, r1
    1cfa:	23 1f       	adc	r18, r19
    1cfc:	84 9f       	mul	r24, r20
    1cfe:	60 0d       	add	r22, r0
    1d00:	21 1d       	adc	r18, r1
    1d02:	82 2f       	mov	r24, r18
    1d04:	76 2f       	mov	r23, r22
    1d06:	6a 2f       	mov	r22, r26
    1d08:	11 24       	eor	r1, r1
    1d0a:	9f 57       	subi	r25, 0x7F	; 127
    1d0c:	50 40       	sbci	r21, 0x00	; 0
    1d0e:	9a f0       	brmi	.+38     	; 0x1d36 <__mulsf3_pse+0x88>
    1d10:	f1 f0       	breq	.+60     	; 0x1d4e <__mulsf3_pse+0xa0>
    1d12:	88 23       	and	r24, r24
    1d14:	4a f0       	brmi	.+18     	; 0x1d28 <__mulsf3_pse+0x7a>
    1d16:	ee 0f       	add	r30, r30
    1d18:	ff 1f       	adc	r31, r31
    1d1a:	bb 1f       	adc	r27, r27
    1d1c:	66 1f       	adc	r22, r22
    1d1e:	77 1f       	adc	r23, r23
    1d20:	88 1f       	adc	r24, r24
    1d22:	91 50       	subi	r25, 0x01	; 1
    1d24:	50 40       	sbci	r21, 0x00	; 0
    1d26:	a9 f7       	brne	.-22     	; 0x1d12 <__mulsf3_pse+0x64>
    1d28:	9e 3f       	cpi	r25, 0xFE	; 254
    1d2a:	51 05       	cpc	r21, r1
    1d2c:	80 f0       	brcs	.+32     	; 0x1d4e <__mulsf3_pse+0xa0>
    1d2e:	0c 94 f0 0d 	jmp	0x1be0	; 0x1be0 <__fp_inf>
    1d32:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__fp_szero>
    1d36:	5f 3f       	cpi	r21, 0xFF	; 255
    1d38:	e4 f3       	brlt	.-8      	; 0x1d32 <__mulsf3_pse+0x84>
    1d3a:	98 3e       	cpi	r25, 0xE8	; 232
    1d3c:	d4 f3       	brlt	.-12     	; 0x1d32 <__mulsf3_pse+0x84>
    1d3e:	86 95       	lsr	r24
    1d40:	77 95       	ror	r23
    1d42:	67 95       	ror	r22
    1d44:	b7 95       	ror	r27
    1d46:	f7 95       	ror	r31
    1d48:	e7 95       	ror	r30
    1d4a:	9f 5f       	subi	r25, 0xFF	; 255
    1d4c:	c1 f7       	brne	.-16     	; 0x1d3e <__mulsf3_pse+0x90>
    1d4e:	fe 2b       	or	r31, r30
    1d50:	88 0f       	add	r24, r24
    1d52:	91 1d       	adc	r25, r1
    1d54:	96 95       	lsr	r25
    1d56:	87 95       	ror	r24
    1d58:	97 f9       	bld	r25, 7
    1d5a:	08 95       	ret

00001d5c <__divmodhi4>:
    1d5c:	97 fb       	bst	r25, 7
    1d5e:	07 2e       	mov	r0, r23
    1d60:	16 f4       	brtc	.+4      	; 0x1d66 <__divmodhi4+0xa>
    1d62:	00 94       	com	r0
    1d64:	07 d0       	rcall	.+14     	; 0x1d74 <__divmodhi4_neg1>
    1d66:	77 fd       	sbrc	r23, 7
    1d68:	09 d0       	rcall	.+18     	; 0x1d7c <__divmodhi4_neg2>
    1d6a:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__udivmodhi4>
    1d6e:	07 fc       	sbrc	r0, 7
    1d70:	05 d0       	rcall	.+10     	; 0x1d7c <__divmodhi4_neg2>
    1d72:	3e f4       	brtc	.+14     	; 0x1d82 <__divmodhi4_exit>

00001d74 <__divmodhi4_neg1>:
    1d74:	90 95       	com	r25
    1d76:	81 95       	neg	r24
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	08 95       	ret

00001d7c <__divmodhi4_neg2>:
    1d7c:	70 95       	com	r23
    1d7e:	61 95       	neg	r22
    1d80:	7f 4f       	sbci	r23, 0xFF	; 255

00001d82 <__divmodhi4_exit>:
    1d82:	08 95       	ret

00001d84 <__udivmodsi4>:
    1d84:	a1 e2       	ldi	r26, 0x21	; 33
    1d86:	1a 2e       	mov	r1, r26
    1d88:	aa 1b       	sub	r26, r26
    1d8a:	bb 1b       	sub	r27, r27
    1d8c:	fd 01       	movw	r30, r26
    1d8e:	0d c0       	rjmp	.+26     	; 0x1daa <__udivmodsi4_ep>

00001d90 <__udivmodsi4_loop>:
    1d90:	aa 1f       	adc	r26, r26
    1d92:	bb 1f       	adc	r27, r27
    1d94:	ee 1f       	adc	r30, r30
    1d96:	ff 1f       	adc	r31, r31
    1d98:	a2 17       	cp	r26, r18
    1d9a:	b3 07       	cpc	r27, r19
    1d9c:	e4 07       	cpc	r30, r20
    1d9e:	f5 07       	cpc	r31, r21
    1da0:	20 f0       	brcs	.+8      	; 0x1daa <__udivmodsi4_ep>
    1da2:	a2 1b       	sub	r26, r18
    1da4:	b3 0b       	sbc	r27, r19
    1da6:	e4 0b       	sbc	r30, r20
    1da8:	f5 0b       	sbc	r31, r21

00001daa <__udivmodsi4_ep>:
    1daa:	66 1f       	adc	r22, r22
    1dac:	77 1f       	adc	r23, r23
    1dae:	88 1f       	adc	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	1a 94       	dec	r1
    1db4:	69 f7       	brne	.-38     	; 0x1d90 <__udivmodsi4_loop>
    1db6:	60 95       	com	r22
    1db8:	70 95       	com	r23
    1dba:	80 95       	com	r24
    1dbc:	90 95       	com	r25
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	bd 01       	movw	r22, r26
    1dc4:	cf 01       	movw	r24, r30
    1dc6:	08 95       	ret

00001dc8 <__divmodsi4>:
    1dc8:	05 2e       	mov	r0, r21
    1dca:	97 fb       	bst	r25, 7
    1dcc:	1e f4       	brtc	.+6      	; 0x1dd4 <__divmodsi4+0xc>
    1dce:	00 94       	com	r0
    1dd0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <__negsi2>
    1dd4:	57 fd       	sbrc	r21, 7
    1dd6:	07 d0       	rcall	.+14     	; 0x1de6 <__divmodsi4_neg2>
    1dd8:	0e 94 c2 0e 	call	0x1d84	; 0x1d84 <__udivmodsi4>
    1ddc:	07 fc       	sbrc	r0, 7
    1dde:	03 d0       	rcall	.+6      	; 0x1de6 <__divmodsi4_neg2>
    1de0:	4e f4       	brtc	.+18     	; 0x1df4 <__divmodsi4_exit>
    1de2:	0c 94 fb 0e 	jmp	0x1df6	; 0x1df6 <__negsi2>

00001de6 <__divmodsi4_neg2>:
    1de6:	50 95       	com	r21
    1de8:	40 95       	com	r20
    1dea:	30 95       	com	r19
    1dec:	21 95       	neg	r18
    1dee:	3f 4f       	sbci	r19, 0xFF	; 255
    1df0:	4f 4f       	sbci	r20, 0xFF	; 255
    1df2:	5f 4f       	sbci	r21, 0xFF	; 255

00001df4 <__divmodsi4_exit>:
    1df4:	08 95       	ret

00001df6 <__negsi2>:
    1df6:	90 95       	com	r25
    1df8:	80 95       	com	r24
    1dfa:	70 95       	com	r23
    1dfc:	61 95       	neg	r22
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	8f 4f       	sbci	r24, 0xFF	; 255
    1e02:	9f 4f       	sbci	r25, 0xFF	; 255
    1e04:	08 95       	ret

00001e06 <__umulhisi3>:
    1e06:	a2 9f       	mul	r26, r18
    1e08:	b0 01       	movw	r22, r0
    1e0a:	b3 9f       	mul	r27, r19
    1e0c:	c0 01       	movw	r24, r0
    1e0e:	a3 9f       	mul	r26, r19
    1e10:	70 0d       	add	r23, r0
    1e12:	81 1d       	adc	r24, r1
    1e14:	11 24       	eor	r1, r1
    1e16:	91 1d       	adc	r25, r1
    1e18:	b2 9f       	mul	r27, r18
    1e1a:	70 0d       	add	r23, r0
    1e1c:	81 1d       	adc	r24, r1
    1e1e:	11 24       	eor	r1, r1
    1e20:	91 1d       	adc	r25, r1
    1e22:	08 95       	ret

00001e24 <__muluhisi3>:
    1e24:	0e 94 03 0f 	call	0x1e06	; 0x1e06 <__umulhisi3>
    1e28:	a5 9f       	mul	r26, r21
    1e2a:	90 0d       	add	r25, r0
    1e2c:	b4 9f       	mul	r27, r20
    1e2e:	90 0d       	add	r25, r0
    1e30:	a4 9f       	mul	r26, r20
    1e32:	80 0d       	add	r24, r0
    1e34:	91 1d       	adc	r25, r1
    1e36:	11 24       	eor	r1, r1
    1e38:	08 95       	ret

00001e3a <__udivmodhi4>:
    1e3a:	aa 1b       	sub	r26, r26
    1e3c:	bb 1b       	sub	r27, r27
    1e3e:	51 e1       	ldi	r21, 0x11	; 17
    1e40:	07 c0       	rjmp	.+14     	; 0x1e50 <__udivmodhi4_ep>

00001e42 <__udivmodhi4_loop>:
    1e42:	aa 1f       	adc	r26, r26
    1e44:	bb 1f       	adc	r27, r27
    1e46:	a6 17       	cp	r26, r22
    1e48:	b7 07       	cpc	r27, r23
    1e4a:	10 f0       	brcs	.+4      	; 0x1e50 <__udivmodhi4_ep>
    1e4c:	a6 1b       	sub	r26, r22
    1e4e:	b7 0b       	sbc	r27, r23

00001e50 <__udivmodhi4_ep>:
    1e50:	88 1f       	adc	r24, r24
    1e52:	99 1f       	adc	r25, r25
    1e54:	5a 95       	dec	r21
    1e56:	a9 f7       	brne	.-22     	; 0x1e42 <__udivmodhi4_loop>
    1e58:	80 95       	com	r24
    1e5a:	90 95       	com	r25
    1e5c:	bc 01       	movw	r22, r24
    1e5e:	cd 01       	movw	r24, r26
    1e60:	08 95       	ret

00001e62 <_exit>:
    1e62:	f8 94       	cli

00001e64 <__stop_program>:
    1e64:	ff cf       	rjmp	.-2      	; 0x1e64 <__stop_program>
