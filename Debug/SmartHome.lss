
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000081c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000870  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003446  00000000  00000000  00000b34  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000eb7  00000000  00000000  00003f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a6c  00000000  00000000  00004e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000056c  00000000  00000000  000068a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a80  00000000  00000000  00006e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000023d6  00000000  00000000  0000788c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  00009c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e1       	ldi	r30, 0x1C	; 28
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 0c 04 	jmp	0x818	; 0x818 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
/*                                                                      */
/************************************************************************/

int main ()
{
	H_Lcd_Init();
  92:	0e 94 38 01 	call	0x270	; 0x270 <H_Lcd_Init>
	H_KeyPad_Init();
  96:	0e 94 b8 00 	call	0x170	; 0x170 <H_KeyPad_Init>
	H_Eeprom_Init();
  9a:	0e 94 9a 00 	call	0x134	; 0x134 <H_Eeprom_Init>
	char NumberOfUsers = 0;

	NumberOfUsers = H_Eeprom_Read(0,100);
  9e:	64 e6       	ldi	r22, 0x64	; 100
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	0e 94 9d 00 	call	0x13a	; 0x13a <H_Eeprom_Read>
// 	H_Lcd_Clear();
// 	H_Lcd_WriteString("Enter Password");
// 	InputPassword(UserPassword);	
// 	H_Lcd_Clear();
// 	UserLogin(UserID,UserPassword);	
	H_DcMotor_Init();
  a6:	0e 94 7d 00 	call	0xfa	; 0xfa <H_DcMotor_Init>
	H_DcMotor_SetDirection(CW);
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	0e 94 88 00 	call	0x110	; 0x110 <H_DcMotor_SetDirection>
	H_DcMotor_Speed(100);
  b0:	84 e6       	ldi	r24, 0x64	; 100
  b2:	0e 94 91 00 	call	0x122	; 0x122 <H_DcMotor_Speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ec       	ldi	r24, 0xC3	; 195
  ba:	99 e0       	ldi	r25, 0x09	; 9
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2a>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x34>
  c6:	00 00       	nop
	_delay_ms(200);
	H_DcMotor_Start();
  c8:	0e 94 94 00 	call	0x128	; 0x128 <H_DcMotor_Start>
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x40>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x4a>
  dc:	00 00       	nop
	_delay_ms(200);
	H_DcMotor_Stop();
  de:	0e 94 97 00 	call	0x12e	; 0x12e <H_DcMotor_Stop>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	83 ed       	ldi	r24, 0xD3	; 211
  e6:	90 e3       	ldi	r25, 0x30	; 48
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x56>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x60>
  f2:	00 00       	nop
	_delay_ms(1000);
	H_DcMotor_Start();
  f4:	0e 94 94 00 	call	0x128	; 0x128 <H_DcMotor_Start>
  f8:	ff cf       	rjmp	.-2      	; 0xf8 <main+0x66>

000000fa <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init				(void)
{
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	8e e2       	ldi	r24, 0x2E	; 46
  fe:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_0,OUTPUT);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	8c e2       	ldi	r24, 0x2C	; 44
 106:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Pwm2_Init();
 10a:	0e 94 a5 03 	call	0x74a	; 0x74a <M_Pwm2_Init>
 10e:	08 95       	ret

00000110 <H_DcMotor_SetDirection>:
}


void H_DcMotor_SetDirection		(u8 Local_u8_Direction)
{
	M_Dio_PinWrite(DC_MOTOR_PIN_0,HIGH);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	8c e2       	ldi	r24, 0x2C	; 44
 114:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
	M_Dio_PinWrite(DC_MOTOR_PIN_1,LOW);	
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	8e e2       	ldi	r24, 0x2E	; 46
 11c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
 120:	08 95       	ret

00000122 <H_DcMotor_Speed>:
}


void H_DcMotor_Speed			(u8 Local_u8_Speed)
{
	M_Pwm2_SetDutyCycle(Local_u8_Speed);
 122:	0e 94 b6 03 	call	0x76c	; 0x76c <M_Pwm2_SetDutyCycle>
 126:	08 95       	ret

00000128 <H_DcMotor_Start>:
}


void H_DcMotor_Start			(void)
{
	M_Pwm2_Start();
 128:	0e 94 d6 03 	call	0x7ac	; 0x7ac <M_Pwm2_Start>
 12c:	08 95       	ret

0000012e <H_DcMotor_Stop>:
}


void H_DcMotor_Stop				(void)
{
	M_Pwm2_Stop();
 12e:	0e 94 dd 03 	call	0x7ba	; 0x7ba <M_Pwm2_Stop>
 132:	08 95       	ret

00000134 <H_Eeprom_Init>:
		M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
		M_I2c_SendSByte(Local_u8_ByteAddress);
		M_I2c_SendSByte(Local_u8_Data);
		M_I2c_StopCondition();
	}
}
 134:	0e 94 0b 03 	call	0x616	; 0x616 <M_I2c_Init>
 138:	08 95       	ret

0000013a <H_Eeprom_Read>:
u8   H_Eeprom_Read(u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	c8 2f       	mov	r28, r24
 140:	d6 2f       	mov	r29, r22
	u8 Local_u8_Data = 0;
	M_I2c_StartCondition();
 142:	0e 94 1a 03 	call	0x634	; 0x634 <M_I2c_StartCondition>
	M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
 146:	c0 65       	ori	r28, 0x50	; 80
 148:	8c 2f       	mov	r24, r28
 14a:	0e 94 2e 03 	call	0x65c	; 0x65c <M_I2c_SendSlaveAddressWrite>
	M_I2c_SendSByte(Local_u8_ByteAddress);
 14e:	8d 2f       	mov	r24, r29
 150:	0e 94 57 03 	call	0x6ae	; 0x6ae <M_I2c_SendSByte>
	M_I2c_RepeatedStart();
 154:	0e 94 76 03 	call	0x6ec	; 0x6ec <M_I2c_RepeatedStart>
	M_I2c_SendSlaveAddressRead((0x50 | Local_u8_PageAddress));
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 41 03 	call	0x682	; 0x682 <M_I2c_SendSlaveAddressRead>
	Local_u8_Data = M_I2c_ReadByteNoAck();
 15e:	0e 94 6f 03 	call	0x6de	; 0x6de <M_I2c_ReadByteNoAck>
 162:	c8 2f       	mov	r28, r24
	M_I2c_StopCondition();
 164:	0e 94 84 03 	call	0x708	; 0x708 <M_I2c_StopCondition>
	return Local_u8_Data;
 168:	8c 2f       	mov	r24, r28
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
 170:	61 e0       	ldi	r22, 0x01	; 1
 172:	88 e2       	ldi	r24, 0x28	; 40
 174:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	89 e2       	ldi	r24, 0x29	; 41
 17c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
 180:	61 e0       	ldi	r22, 0x01	; 1
 182:	8a e2       	ldi	r24, 0x2A	; 42
 184:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	8b e2       	ldi	r24, 0x2B	; 43
 18c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	88 e2       	ldi	r24, 0x28	; 40
 194:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	89 e2       	ldi	r24, 0x29	; 41
 19c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	8a e2       	ldi	r24, 0x2A	; 42
 1a4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
 1a8:	61 e0       	ldi	r22, 0x01	; 1
 1aa:	8b e2       	ldi	r24, 0x2B	; 43
 1ac:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	8c e2       	ldi	r24, 0x2C	; 44
 1b4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	8d e2       	ldi	r24, 0x2D	; 45
 1bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	8e e2       	ldi	r24, 0x2E	; 46
 1c4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	8f e2       	ldi	r24, 0x2F	; 47
 1cc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	8c e2       	ldi	r24, 0x2C	; 44
 1d4:	0e 94 82 02 	call	0x504	; 0x504 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	8d e2       	ldi	r24, 0x2D	; 45
 1dc:	0e 94 82 02 	call	0x504	; 0x504 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	8e e2       	ldi	r24, 0x2E	; 46
 1e4:	0e 94 82 02 	call	0x504	; 0x504 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	8f e2       	ldi	r24, 0x2F	; 47
 1ec:	0e 94 82 02 	call	0x504	; 0x504 <M_Dio_PinPullUp>
 1f0:	08 95       	ret

000001f2 <H_Lcd_WriteCommand>:
// 	#endif
// }


void H_Lcd_WriteCommand		(u8 Local_u8_Command)
{
 1f2:	cf 93       	push	r28
 1f4:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	85 e1       	ldi	r24, 0x15	; 21
 1fa:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	
	#elif		LCD_MODE	==	_4_BIT_MODE
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command & 0XF0);
 1fe:	8b b3       	in	r24, 0x1b	; 27
 200:	8f 70       	andi	r24, 0x0F	; 15
 202:	9c 2f       	mov	r25, r28
 204:	90 7f       	andi	r25, 0xF0	; 240
 206:	89 2b       	or	r24, r25
 208:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	87 e1       	ldi	r24, 0x17	; 23
 20e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
 212:	8f e9       	ldi	r24, 0x9F	; 159
 214:	9f e0       	ldi	r25, 0x0F	; 15
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <H_Lcd_WriteCommand+0x24>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <H_Lcd_WriteCommand+0x2a>
 21c:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 21e:	60 e0       	ldi	r22, 0x00	; 0
 220:	87 e1       	ldi	r24, 0x17	; 23
 222:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
 226:	8f e1       	ldi	r24, 0x1F	; 31
 228:	9e e4       	ldi	r25, 0x4E	; 78
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <H_Lcd_WriteCommand+0x38>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <H_Lcd_WriteCommand+0x3e>
 230:	00 00       	nop
	_delay_ms(5);

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command << 4);
 232:	2b b3       	in	r18, 0x1b	; 27
 234:	30 e1       	ldi	r19, 0x10	; 16
 236:	c3 9f       	mul	r28, r19
 238:	c0 01       	movw	r24, r0
 23a:	11 24       	eor	r1, r1
 23c:	92 2f       	mov	r25, r18
 23e:	9f 70       	andi	r25, 0x0F	; 15
 240:	89 2b       	or	r24, r25
 242:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
 244:	61 e0       	ldi	r22, 0x01	; 1
 246:	87 e1       	ldi	r24, 0x17	; 23
 248:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
 24c:	8f e9       	ldi	r24, 0x9F	; 159
 24e:	9f e0       	ldi	r25, 0x0F	; 15
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <H_Lcd_WriteCommand+0x5e>
 254:	00 c0       	rjmp	.+0      	; 0x256 <H_Lcd_WriteCommand+0x64>
 256:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
 258:	60 e0       	ldi	r22, 0x00	; 0
 25a:	87 e1       	ldi	r24, 0x17	; 23
 25c:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <M_Dio_PinWrite>
 260:	8f e1       	ldi	r24, 0x1F	; 31
 262:	9e e4       	ldi	r25, 0x4E	; 78
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <H_Lcd_WriteCommand+0x72>
 268:	00 c0       	rjmp	.+0      	; 0x26a <H_Lcd_WriteCommand+0x78>
 26a:	00 00       	nop
	_delay_ms(5);
	#endif

}
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <H_Lcd_Init>:
	M_Dio_PinMode(LCD_DATA_1_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_2_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_3_PIN,OUTPUT);
	#elif	LCD_MODE	==	_4_BIT_MODE
	#endif
	M_Dio_PinMode(LCD_DATA_4_PIN,OUTPUT);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	8e e0       	ldi	r24, 0x0E	; 14
 274:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_5_PIN,OUTPUT);
 278:	61 e0       	ldi	r22, 0x01	; 1
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_6_PIN,OUTPUT);
 280:	61 e0       	ldi	r22, 0x01	; 1
 282:	80 e1       	ldi	r24, 0x10	; 16
 284:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_7_PIN,OUTPUT);
 288:	61 e0       	ldi	r22, 0x01	; 1
 28a:	81 e1       	ldi	r24, 0x11	; 17
 28c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	85 e1       	ldi	r24, 0x15	; 21
 294:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	86 e1       	ldi	r24, 0x16	; 22
 29c:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);	
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	87 e1       	ldi	r24, 0x17	; 23
 2a4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	83 ed       	ldi	r24, 0xD3	; 211
 2ac:	90 e3       	ldi	r25, 0x30	; 48
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <H_Lcd_Init+0x3e>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <H_Lcd_Init+0x48>
 2b8:	00 00       	nop
	_delay_ms(1000);
	
	#if			LCD_MODE	==	_8_BIT_MODE	
	H_Lcd_WriteCommand(LCD_CMD_SELECT_8_BIT_MODE);				// to select 8 bit mode
	#elif		LCD_MODE	==	_4_BIT_MODE	
	H_Lcd_WriteCommand(0X33);
 2ba:	83 e3       	ldi	r24, 0x33	; 51
 2bc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0X32);
 2c0:	82 e3       	ldi	r24, 0x32	; 50
 2c2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_SELECT_4_BIT_MODE);				// to select 4 bit mode
 2c6:	88 e2       	ldi	r24, 0x28	; 40
 2c8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <H_Lcd_WriteCommand>
	#endif		
	H_Lcd_WriteCommand(LCD_CMD_DISPLAY_ON_CURSOR_OFF);			// to Display ON, cursor OFF
 2cc:	8c e0       	ldi	r24, 0x0C	; 12
 2ce:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);							// to clear LCD
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_RETURN_HOME);					// to return home
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <H_Lcd_WriteCommand>
 2de:	08 95       	ret

000002e0 <M_Dio_PinMode>:
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
		default:								break;
	}
	
	return Local_u8_Pin_Value;
}
 2e0:	9d ec       	ldi	r25, 0xCD	; 205
 2e2:	89 9f       	mul	r24, r25
 2e4:	91 2d       	mov	r25, r1
 2e6:	11 24       	eor	r1, r1
 2e8:	29 2f       	mov	r18, r25
 2ea:	26 95       	lsr	r18
 2ec:	26 95       	lsr	r18
 2ee:	26 95       	lsr	r18
 2f0:	22 0f       	add	r18, r18
 2f2:	32 2f       	mov	r19, r18
 2f4:	33 0f       	add	r19, r19
 2f6:	33 0f       	add	r19, r19
 2f8:	23 0f       	add	r18, r19
 2fa:	82 1b       	sub	r24, r18
 2fc:	28 2f       	mov	r18, r24
 2fe:	96 95       	lsr	r25
 300:	96 95       	lsr	r25
 302:	96 95       	lsr	r25
 304:	66 23       	and	r22, r22
 306:	19 f0       	breq	.+6      	; 0x30e <M_Dio_PinMode+0x2e>
 308:	61 30       	cpi	r22, 0x01	; 1
 30a:	e1 f1       	breq	.+120    	; 0x384 <M_Dio_PinMode+0xa4>
 30c:	08 95       	ret
 30e:	92 30       	cpi	r25, 0x02	; 2
 310:	a9 f0       	breq	.+42     	; 0x33c <M_Dio_PinMode+0x5c>
 312:	18 f4       	brcc	.+6      	; 0x31a <M_Dio_PinMode+0x3a>
 314:	91 30       	cpi	r25, 0x01	; 1
 316:	31 f0       	breq	.+12     	; 0x324 <M_Dio_PinMode+0x44>
 318:	08 95       	ret
 31a:	93 30       	cpi	r25, 0x03	; 3
 31c:	d9 f0       	breq	.+54     	; 0x354 <M_Dio_PinMode+0x74>
 31e:	94 30       	cpi	r25, 0x04	; 4
 320:	29 f1       	breq	.+74     	; 0x36c <M_Dio_PinMode+0x8c>
 322:	08 95       	ret
 324:	3a b3       	in	r19, 0x1a	; 26
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 c0       	rjmp	.+4      	; 0x330 <M_Dio_PinMode+0x50>
 32c:	88 0f       	add	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	2a 95       	dec	r18
 332:	e2 f7       	brpl	.-8      	; 0x32c <M_Dio_PinMode+0x4c>
 334:	80 95       	com	r24
 336:	83 23       	and	r24, r19
 338:	8a bb       	out	0x1a, r24	; 26
 33a:	08 95       	ret
 33c:	37 b3       	in	r19, 0x17	; 23
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	02 c0       	rjmp	.+4      	; 0x348 <M_Dio_PinMode+0x68>
 344:	88 0f       	add	r24, r24
 346:	99 1f       	adc	r25, r25
 348:	2a 95       	dec	r18
 34a:	e2 f7       	brpl	.-8      	; 0x344 <M_Dio_PinMode+0x64>
 34c:	80 95       	com	r24
 34e:	83 23       	and	r24, r19
 350:	87 bb       	out	0x17, r24	; 23
 352:	08 95       	ret
 354:	34 b3       	in	r19, 0x14	; 20
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	02 c0       	rjmp	.+4      	; 0x360 <M_Dio_PinMode+0x80>
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	2a 95       	dec	r18
 362:	e2 f7       	brpl	.-8      	; 0x35c <M_Dio_PinMode+0x7c>
 364:	80 95       	com	r24
 366:	83 23       	and	r24, r19
 368:	84 bb       	out	0x14, r24	; 20
 36a:	08 95       	ret
 36c:	31 b3       	in	r19, 0x11	; 17
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	02 c0       	rjmp	.+4      	; 0x378 <M_Dio_PinMode+0x98>
 374:	88 0f       	add	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	2a 95       	dec	r18
 37a:	e2 f7       	brpl	.-8      	; 0x374 <M_Dio_PinMode+0x94>
 37c:	80 95       	com	r24
 37e:	83 23       	and	r24, r19
 380:	81 bb       	out	0x11, r24	; 17
 382:	08 95       	ret
 384:	92 30       	cpi	r25, 0x02	; 2
 386:	a1 f0       	breq	.+40     	; 0x3b0 <M_Dio_PinMode+0xd0>
 388:	18 f4       	brcc	.+6      	; 0x390 <M_Dio_PinMode+0xb0>
 38a:	91 30       	cpi	r25, 0x01	; 1
 38c:	31 f0       	breq	.+12     	; 0x39a <M_Dio_PinMode+0xba>
 38e:	08 95       	ret
 390:	93 30       	cpi	r25, 0x03	; 3
 392:	c9 f0       	breq	.+50     	; 0x3c6 <M_Dio_PinMode+0xe6>
 394:	94 30       	cpi	r25, 0x04	; 4
 396:	11 f1       	breq	.+68     	; 0x3dc <M_Dio_PinMode+0xfc>
 398:	08 95       	ret
 39a:	3a b3       	in	r19, 0x1a	; 26
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <M_Dio_PinMode+0xc6>
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	2a 95       	dec	r18
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <M_Dio_PinMode+0xc2>
 3aa:	83 2b       	or	r24, r19
 3ac:	8a bb       	out	0x1a, r24	; 26
 3ae:	08 95       	ret
 3b0:	37 b3       	in	r19, 0x17	; 23
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 c0       	rjmp	.+4      	; 0x3bc <M_Dio_PinMode+0xdc>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	2a 95       	dec	r18
 3be:	e2 f7       	brpl	.-8      	; 0x3b8 <M_Dio_PinMode+0xd8>
 3c0:	83 2b       	or	r24, r19
 3c2:	87 bb       	out	0x17, r24	; 23
 3c4:	08 95       	ret
 3c6:	34 b3       	in	r19, 0x14	; 20
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 c0       	rjmp	.+4      	; 0x3d2 <M_Dio_PinMode+0xf2>
 3ce:	88 0f       	add	r24, r24
 3d0:	99 1f       	adc	r25, r25
 3d2:	2a 95       	dec	r18
 3d4:	e2 f7       	brpl	.-8      	; 0x3ce <M_Dio_PinMode+0xee>
 3d6:	83 2b       	or	r24, r19
 3d8:	84 bb       	out	0x14, r24	; 20
 3da:	08 95       	ret
 3dc:	31 b3       	in	r19, 0x11	; 17
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	02 c0       	rjmp	.+4      	; 0x3e8 <M_Dio_PinMode+0x108>
 3e4:	88 0f       	add	r24, r24
 3e6:	99 1f       	adc	r25, r25
 3e8:	2a 95       	dec	r18
 3ea:	e2 f7       	brpl	.-8      	; 0x3e4 <M_Dio_PinMode+0x104>
 3ec:	83 2b       	or	r24, r19
 3ee:	81 bb       	out	0x11, r24	; 17
 3f0:	08 95       	ret

000003f2 <M_Dio_PinWrite>:
 3f2:	9d ec       	ldi	r25, 0xCD	; 205
 3f4:	89 9f       	mul	r24, r25
 3f6:	91 2d       	mov	r25, r1
 3f8:	11 24       	eor	r1, r1
 3fa:	29 2f       	mov	r18, r25
 3fc:	26 95       	lsr	r18
 3fe:	26 95       	lsr	r18
 400:	26 95       	lsr	r18
 402:	22 0f       	add	r18, r18
 404:	32 2f       	mov	r19, r18
 406:	33 0f       	add	r19, r19
 408:	33 0f       	add	r19, r19
 40a:	23 0f       	add	r18, r19
 40c:	82 1b       	sub	r24, r18
 40e:	28 2f       	mov	r18, r24
 410:	96 95       	lsr	r25
 412:	96 95       	lsr	r25
 414:	96 95       	lsr	r25
 416:	66 23       	and	r22, r22
 418:	19 f0       	breq	.+6      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41a:	61 30       	cpi	r22, 0x01	; 1
 41c:	e1 f1       	breq	.+120    	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 41e:	08 95       	ret
 420:	92 30       	cpi	r25, 0x02	; 2
 422:	a9 f0       	breq	.+42     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 424:	18 f4       	brcc	.+6      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 426:	91 30       	cpi	r25, 0x01	; 1
 428:	31 f0       	breq	.+12     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 42a:	08 95       	ret
 42c:	93 30       	cpi	r25, 0x03	; 3
 42e:	d9 f0       	breq	.+54     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 430:	94 30       	cpi	r25, 0x04	; 4
 432:	29 f1       	breq	.+74     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 434:	08 95       	ret
 436:	3b b3       	in	r19, 0x1b	; 27
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	02 c0       	rjmp	.+4      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	2a 95       	dec	r18
 444:	e2 f7       	brpl	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 446:	80 95       	com	r24
 448:	83 23       	and	r24, r19
 44a:	8b bb       	out	0x1b, r24	; 27
 44c:	08 95       	ret
 44e:	38 b3       	in	r19, 0x18	; 24
 450:	81 e0       	ldi	r24, 0x01	; 1
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	88 0f       	add	r24, r24
 458:	99 1f       	adc	r25, r25
 45a:	2a 95       	dec	r18
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	80 95       	com	r24
 460:	83 23       	and	r24, r19
 462:	88 bb       	out	0x18, r24	; 24
 464:	08 95       	ret
 466:	35 b3       	in	r19, 0x15	; 21
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	2a 95       	dec	r18
 474:	e2 f7       	brpl	.-8      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 476:	80 95       	com	r24
 478:	83 23       	and	r24, r19
 47a:	85 bb       	out	0x15, r24	; 21
 47c:	08 95       	ret
 47e:	32 b3       	in	r19, 0x12	; 18
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	2a 95       	dec	r18
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	80 95       	com	r24
 490:	83 23       	and	r24, r19
 492:	82 bb       	out	0x12, r24	; 18
 494:	08 95       	ret
 496:	92 30       	cpi	r25, 0x02	; 2
 498:	a1 f0       	breq	.+40     	; 0x4c2 <__EEPROM_REGION_LENGTH__+0xc2>
 49a:	18 f4       	brcc	.+6      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 49c:	91 30       	cpi	r25, 0x01	; 1
 49e:	31 f0       	breq	.+12     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 4a0:	08 95       	ret
 4a2:	93 30       	cpi	r25, 0x03	; 3
 4a4:	c9 f0       	breq	.+50     	; 0x4d8 <__EEPROM_REGION_LENGTH__+0xd8>
 4a6:	94 30       	cpi	r25, 0x04	; 4
 4a8:	11 f1       	breq	.+68     	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4aa:	08 95       	ret
 4ac:	3b b3       	in	r19, 0x1b	; 27
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	2a 95       	dec	r18
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	83 2b       	or	r24, r19
 4be:	8b bb       	out	0x1b, r24	; 27
 4c0:	08 95       	ret
 4c2:	38 b3       	in	r19, 0x18	; 24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	2a 95       	dec	r18
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <__EEPROM_REGION_LENGTH__+0xca>
 4d2:	83 2b       	or	r24, r19
 4d4:	88 bb       	out	0x18, r24	; 24
 4d6:	08 95       	ret
 4d8:	35 b3       	in	r19, 0x15	; 21
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <__EEPROM_REGION_LENGTH__+0xe4>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	2a 95       	dec	r18
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4e8:	83 2b       	or	r24, r19
 4ea:	85 bb       	out	0x15, r24	; 21
 4ec:	08 95       	ret
 4ee:	32 b3       	in	r19, 0x12	; 18
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	2a 95       	dec	r18
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4fe:	83 2b       	or	r24, r19
 500:	82 bb       	out	0x12, r24	; 18
 502:	08 95       	ret

00000504 <M_Dio_PinPullUp>:

void M_Dio_PinPullUp	(u8 Local_u8_PinNumber, u8 Local_u8_PullUpState)
{
	u8 Local_u8_Pin		=	Local_u8_PinNumber % 10;
 504:	9d ec       	ldi	r25, 0xCD	; 205
 506:	89 9f       	mul	r24, r25
 508:	91 2d       	mov	r25, r1
 50a:	11 24       	eor	r1, r1
 50c:	29 2f       	mov	r18, r25
 50e:	26 95       	lsr	r18
 510:	26 95       	lsr	r18
 512:	26 95       	lsr	r18
 514:	22 0f       	add	r18, r18
 516:	32 2f       	mov	r19, r18
 518:	33 0f       	add	r19, r19
 51a:	33 0f       	add	r19, r19
 51c:	23 0f       	add	r18, r19
 51e:	82 1b       	sub	r24, r18
 520:	28 2f       	mov	r18, r24
	u8 Local_u8_Port	=	Local_u8_PinNumber / 10;
 522:	96 95       	lsr	r25
 524:	96 95       	lsr	r25
 526:	96 95       	lsr	r25
	switch(Local_u8_PullUpState)
 528:	66 23       	and	r22, r22
 52a:	f1 f1       	breq	.+124    	; 0x5a8 <M_Dio_PinPullUp+0xa4>
 52c:	61 30       	cpi	r22, 0x01	; 1
 52e:	09 f0       	breq	.+2      	; 0x532 <M_Dio_PinPullUp+0x2e>
 530:	71 c0       	rjmp	.+226    	; 0x614 <M_Dio_PinPullUp+0x110>
	{
		case PULLUP_DISABLE:
		switch(Local_u8_Port)
 532:	92 30       	cpi	r25, 0x02	; 2
 534:	a9 f0       	breq	.+42     	; 0x560 <M_Dio_PinPullUp+0x5c>
 536:	18 f4       	brcc	.+6      	; 0x53e <M_Dio_PinPullUp+0x3a>
 538:	91 30       	cpi	r25, 0x01	; 1
 53a:	31 f0       	breq	.+12     	; 0x548 <M_Dio_PinPullUp+0x44>
 53c:	08 95       	ret
 53e:	93 30       	cpi	r25, 0x03	; 3
 540:	d9 f0       	breq	.+54     	; 0x578 <M_Dio_PinPullUp+0x74>
 542:	94 30       	cpi	r25, 0x04	; 4
 544:	29 f1       	breq	.+74     	; 0x590 <M_Dio_PinPullUp+0x8c>
 546:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin);		break;
 548:	3b b3       	in	r19, 0x1b	; 27
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <M_Dio_PinPullUp+0x50>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	2a 95       	dec	r18
 556:	e2 f7       	brpl	.-8      	; 0x550 <M_Dio_PinPullUp+0x4c>
 558:	80 95       	com	r24
 55a:	83 23       	and	r24, r19
 55c:	8b bb       	out	0x1b, r24	; 27
 55e:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin);		break;
 560:	38 b3       	in	r19, 0x18	; 24
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <M_Dio_PinPullUp+0x68>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	2a 95       	dec	r18
 56e:	e2 f7       	brpl	.-8      	; 0x568 <M_Dio_PinPullUp+0x64>
 570:	80 95       	com	r24
 572:	83 23       	and	r24, r19
 574:	88 bb       	out	0x18, r24	; 24
 576:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin);		break;
 578:	35 b3       	in	r19, 0x15	; 21
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <M_Dio_PinPullUp+0x80>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	2a 95       	dec	r18
 586:	e2 f7       	brpl	.-8      	; 0x580 <M_Dio_PinPullUp+0x7c>
 588:	80 95       	com	r24
 58a:	83 23       	and	r24, r19
 58c:	85 bb       	out	0x15, r24	; 21
 58e:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin);		break;
 590:	32 b3       	in	r19, 0x12	; 18
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <M_Dio_PinPullUp+0x98>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	2a 95       	dec	r18
 59e:	e2 f7       	brpl	.-8      	; 0x598 <M_Dio_PinPullUp+0x94>
 5a0:	80 95       	com	r24
 5a2:	83 23       	and	r24, r19
 5a4:	82 bb       	out	0x12, r24	; 18
 5a6:	08 95       	ret
			default:								break;
		}
		break;
		
		case PULLUP_ENABLE:
		switch(Local_u8_Port)
 5a8:	92 30       	cpi	r25, 0x02	; 2
 5aa:	a1 f0       	breq	.+40     	; 0x5d4 <M_Dio_PinPullUp+0xd0>
 5ac:	18 f4       	brcc	.+6      	; 0x5b4 <M_Dio_PinPullUp+0xb0>
 5ae:	91 30       	cpi	r25, 0x01	; 1
 5b0:	31 f0       	breq	.+12     	; 0x5be <M_Dio_PinPullUp+0xba>
 5b2:	08 95       	ret
 5b4:	93 30       	cpi	r25, 0x03	; 3
 5b6:	c9 f0       	breq	.+50     	; 0x5ea <M_Dio_PinPullUp+0xe6>
 5b8:	94 30       	cpi	r25, 0x04	; 4
 5ba:	11 f1       	breq	.+68     	; 0x600 <M_Dio_PinPullUp+0xfc>
 5bc:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin);		break;
 5be:	3b b3       	in	r19, 0x1b	; 27
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <M_Dio_PinPullUp+0xc6>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	2a 95       	dec	r18
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <M_Dio_PinPullUp+0xc2>
 5ce:	83 2b       	or	r24, r19
 5d0:	8b bb       	out	0x1b, r24	; 27
 5d2:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin);		break;
 5d4:	38 b3       	in	r19, 0x18	; 24
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <M_Dio_PinPullUp+0xdc>
 5dc:	88 0f       	add	r24, r24
 5de:	99 1f       	adc	r25, r25
 5e0:	2a 95       	dec	r18
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <M_Dio_PinPullUp+0xd8>
 5e4:	83 2b       	or	r24, r19
 5e6:	88 bb       	out	0x18, r24	; 24
 5e8:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin);		break;
 5ea:	35 b3       	in	r19, 0x15	; 21
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <M_Dio_PinPullUp+0xf2>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	2a 95       	dec	r18
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <M_Dio_PinPullUp+0xee>
 5fa:	83 2b       	or	r24, r19
 5fc:	85 bb       	out	0x15, r24	; 21
 5fe:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin);		break;
 600:	32 b3       	in	r19, 0x12	; 18
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <M_Dio_PinPullUp+0x108>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	2a 95       	dec	r18
 60e:	e2 f7       	brpl	.-8      	; 0x608 <M_Dio_PinPullUp+0x104>
 610:	83 2b       	or	r24, r19
 612:	82 bb       	out	0x12, r24	; 18
 614:	08 95       	ret

00000616 <M_I2c_Init>:
//     SetBit(TWCR,6);					 //   later
// 	SetBit(TWCR,7);                  //   to clear the flag bit
// 	while(GetBit(TWCR,7) == 0);
// 	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
// 	return TWDR;
}
 616:	86 b7       	in	r24, 0x36	; 54
 618:	8b 7f       	andi	r24, 0xFB	; 251
 61a:	86 bf       	out	0x36, r24	; 54
 61c:	8c e0       	ldi	r24, 0x0C	; 12
 61e:	80 b9       	out	0x00, r24	; 0
 620:	86 b7       	in	r24, 0x36	; 54
 622:	84 60       	ori	r24, 0x04	; 4
 624:	86 bf       	out	0x36, r24	; 54
 626:	8f e3       	ldi	r24, 0x3F	; 63
 628:	9c e9       	ldi	r25, 0x9C	; 156
 62a:	01 97       	sbiw	r24, 0x01	; 1
 62c:	f1 f7       	brne	.-4      	; 0x62a <M_I2c_Init+0x14>
 62e:	00 c0       	rjmp	.+0      	; 0x630 <M_I2c_Init+0x1a>
 630:	00 00       	nop
 632:	08 95       	ret

00000634 <M_I2c_StartCondition>:
 634:	86 b7       	in	r24, 0x36	; 54
 636:	80 62       	ori	r24, 0x20	; 32
 638:	86 bf       	out	0x36, r24	; 54
 63a:	86 b7       	in	r24, 0x36	; 54
 63c:	80 68       	ori	r24, 0x80	; 128
 63e:	86 bf       	out	0x36, r24	; 54
 640:	06 b6       	in	r0, 0x36	; 54
 642:	07 fe       	sbrs	r0, 7
 644:	fd cf       	rjmp	.-6      	; 0x640 <M_I2c_StartCondition+0xc>
 646:	81 b1       	in	r24, 0x01	; 1
 648:	88 7f       	andi	r24, 0xF8	; 248
 64a:	88 30       	cpi	r24, 0x08	; 8
 64c:	e1 f7       	brne	.-8      	; 0x646 <M_I2c_StartCondition+0x12>
 64e:	8f e3       	ldi	r24, 0x3F	; 63
 650:	9c e9       	ldi	r25, 0x9C	; 156
 652:	01 97       	sbiw	r24, 0x01	; 1
 654:	f1 f7       	brne	.-4      	; 0x652 <M_I2c_StartCondition+0x1e>
 656:	00 c0       	rjmp	.+0      	; 0x658 <M_I2c_StartCondition+0x24>
 658:	00 00       	nop
 65a:	08 95       	ret

0000065c <M_I2c_SendSlaveAddressWrite>:
 65c:	88 0f       	add	r24, r24
 65e:	83 b9       	out	0x03, r24	; 3
 660:	86 b7       	in	r24, 0x36	; 54
 662:	80 68       	ori	r24, 0x80	; 128
 664:	86 bf       	out	0x36, r24	; 54
 666:	06 b6       	in	r0, 0x36	; 54
 668:	07 fe       	sbrs	r0, 7
 66a:	fd cf       	rjmp	.-6      	; 0x666 <M_I2c_SendSlaveAddressWrite+0xa>
 66c:	81 b1       	in	r24, 0x01	; 1
 66e:	88 7f       	andi	r24, 0xF8	; 248
 670:	88 31       	cpi	r24, 0x18	; 24
 672:	e1 f7       	brne	.-8      	; 0x66c <M_I2c_SendSlaveAddressWrite+0x10>
 674:	8f e3       	ldi	r24, 0x3F	; 63
 676:	9c e9       	ldi	r25, 0x9C	; 156
 678:	01 97       	sbiw	r24, 0x01	; 1
 67a:	f1 f7       	brne	.-4      	; 0x678 <M_I2c_SendSlaveAddressWrite+0x1c>
 67c:	00 c0       	rjmp	.+0      	; 0x67e <M_I2c_SendSlaveAddressWrite+0x22>
 67e:	00 00       	nop
 680:	08 95       	ret

00000682 <M_I2c_SendSlaveAddressRead>:
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	88 0f       	add	r24, r24
 686:	99 1f       	adc	r25, r25
 688:	81 60       	ori	r24, 0x01	; 1
 68a:	83 b9       	out	0x03, r24	; 3
 68c:	86 b7       	in	r24, 0x36	; 54
 68e:	80 68       	ori	r24, 0x80	; 128
 690:	86 bf       	out	0x36, r24	; 54
 692:	06 b6       	in	r0, 0x36	; 54
 694:	07 fe       	sbrs	r0, 7
 696:	fd cf       	rjmp	.-6      	; 0x692 <M_I2c_SendSlaveAddressRead+0x10>
 698:	81 b1       	in	r24, 0x01	; 1
 69a:	88 7f       	andi	r24, 0xF8	; 248
 69c:	80 34       	cpi	r24, 0x40	; 64
 69e:	e1 f7       	brne	.-8      	; 0x698 <M_I2c_SendSlaveAddressRead+0x16>
 6a0:	8f e3       	ldi	r24, 0x3F	; 63
 6a2:	9c e9       	ldi	r25, 0x9C	; 156
 6a4:	01 97       	sbiw	r24, 0x01	; 1
 6a6:	f1 f7       	brne	.-4      	; 0x6a4 <M_I2c_SendSlaveAddressRead+0x22>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <M_I2c_SendSlaveAddressRead+0x28>
 6aa:	00 00       	nop
 6ac:	08 95       	ret

000006ae <M_I2c_SendSByte>:
 6ae:	83 b9       	out	0x03, r24	; 3
 6b0:	86 b7       	in	r24, 0x36	; 54
 6b2:	8f 7d       	andi	r24, 0xDF	; 223
 6b4:	86 bf       	out	0x36, r24	; 54
 6b6:	86 b7       	in	r24, 0x36	; 54
 6b8:	80 68       	ori	r24, 0x80	; 128
 6ba:	86 bf       	out	0x36, r24	; 54
 6bc:	06 b6       	in	r0, 0x36	; 54
 6be:	07 fe       	sbrs	r0, 7
 6c0:	fd cf       	rjmp	.-6      	; 0x6bc <M_I2c_SendSByte+0xe>
 6c2:	81 b1       	in	r24, 0x01	; 1
 6c4:	88 7f       	andi	r24, 0xF8	; 248
 6c6:	88 32       	cpi	r24, 0x28	; 40
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <M_I2c_SendSByte+0x14>
 6ca:	2f ef       	ldi	r18, 0xFF	; 255
 6cc:	81 ee       	ldi	r24, 0xE1	; 225
 6ce:	94 e0       	ldi	r25, 0x04	; 4
 6d0:	21 50       	subi	r18, 0x01	; 1
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	90 40       	sbci	r25, 0x00	; 0
 6d6:	e1 f7       	brne	.-8      	; 0x6d0 <M_I2c_SendSByte+0x22>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <M_I2c_SendSByte+0x2c>
 6da:	00 00       	nop
 6dc:	08 95       	ret

000006de <M_I2c_ReadByteNoAck>:
u8 M_I2c_ReadByteNoAck()
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 6de:	84 e8       	ldi	r24, 0x84	; 132
 6e0:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,TWINT) == 0);
 6e2:	06 b6       	in	r0, 0x36	; 54
 6e4:	07 fe       	sbrs	r0, 7
 6e6:	fd cf       	rjmp	.-6      	; 0x6e2 <M_I2c_ReadByteNoAck+0x4>
	return TWDR;
 6e8:	83 b1       	in	r24, 0x03	; 3
}
 6ea:	08 95       	ret

000006ec <M_I2c_RepeatedStart>:
void M_I2c_RepeatedStart(void)
{
	SetBit(TWCR,5);
 6ec:	86 b7       	in	r24, 0x36	; 54
 6ee:	80 62       	ori	r24, 0x20	; 32
 6f0:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);                  //   to clear the flag bit
 6f2:	86 b7       	in	r24, 0x36	; 54
 6f4:	80 68       	ori	r24, 0x80	; 128
 6f6:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,7) == 0);
 6f8:	06 b6       	in	r0, 0x36	; 54
 6fa:	07 fe       	sbrs	r0, 7
 6fc:	fd cf       	rjmp	.-6      	; 0x6f8 <M_I2c_RepeatedStart+0xc>
	while((TWSR & 0xF8) != REP_START_ACK);
 6fe:	81 b1       	in	r24, 0x01	; 1
 700:	88 7f       	andi	r24, 0xF8	; 248
 702:	80 31       	cpi	r24, 0x10	; 16
 704:	e1 f7       	brne	.-8      	; 0x6fe <M_I2c_RepeatedStart+0x12>
}
 706:	08 95       	ret

00000708 <M_I2c_StopCondition>:
//  	SetBit(TWCR,7);                  //   to clear the flag bit
//  	SetBit(TWCR,4);
// // 	SetBit(TWCR,2);	
	//while(GetBit(TWCR,7) == 0);
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	SetBit(TWCR,4);
 708:	86 b7       	in	r24, 0x36	; 54
 70a:	80 61       	ori	r24, 0x10	; 16
 70c:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);
 70e:	86 b7       	in	r24, 0x36	; 54
 710:	80 68       	ori	r24, 0x80	; 128
 712:	86 bf       	out	0x36, r24	; 54
 714:	8f e9       	ldi	r24, 0x9F	; 159
 716:	9f e0       	ldi	r25, 0x0F	; 15
 718:	01 97       	sbiw	r24, 0x01	; 1
 71a:	f1 f7       	brne	.-4      	; 0x718 <M_I2c_StopCondition+0x10>
 71c:	00 c0       	rjmp	.+0      	; 0x71e <M_I2c_StopCondition+0x16>
 71e:	00 00       	nop
 720:	08 95       	ret

00000722 <M_Timer2_Start>:
	#elif		TIMER2_PRESCALER	==		PRESCLNG_64		   
	ClrBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_256	   
	SetBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
	#elif		TIMER2_PRESCALER	==		PRESCLNG_1024	   
	SetBit(TCCR2,CS22); SetBit(TCCR2,CS21);	SetBit(TCCR2,CS20);
 722:	85 b5       	in	r24, 0x25	; 37
 724:	84 60       	ori	r24, 0x04	; 4
 726:	85 bd       	out	0x25, r24	; 37
 728:	85 b5       	in	r24, 0x25	; 37
 72a:	82 60       	ori	r24, 0x02	; 2
 72c:	85 bd       	out	0x25, r24	; 37
 72e:	85 b5       	in	r24, 0x25	; 37
 730:	81 60       	ori	r24, 0x01	; 1
 732:	85 bd       	out	0x25, r24	; 37
 734:	08 95       	ret

00000736 <M_Timer2_Stop>:
	#endif
}

void M_Timer2_Stop			(void)
{
	ClrBit(TCCR2,CS22); ClrBit(TCCR2,CS21);	ClrBit(TCCR2,CS20);
 736:	85 b5       	in	r24, 0x25	; 37
 738:	8b 7f       	andi	r24, 0xFB	; 251
 73a:	85 bd       	out	0x25, r24	; 37
 73c:	85 b5       	in	r24, 0x25	; 37
 73e:	8d 7f       	andi	r24, 0xFD	; 253
 740:	85 bd       	out	0x25, r24	; 37
 742:	85 b5       	in	r24, 0x25	; 37
 744:	8e 7f       	andi	r24, 0xFE	; 254
 746:	85 bd       	out	0x25, r24	; 37
 748:	08 95       	ret

0000074a <M_Pwm2_Init>:
}


void M_Pwm2_Init				(void)
{
	M_Dio_PinMode(PD7,OUTPUT);
 74a:	61 e0       	ldi	r22, 0x01	; 1
 74c:	8f e2       	ldi	r24, 0x2F	; 47
 74e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>

	#if			PWM2_MODE		==		FAST_PWM
	SetBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
 752:	85 b5       	in	r24, 0x25	; 37
 754:	88 60       	ori	r24, 0x08	; 8
 756:	85 bd       	out	0x25, r24	; 37
 758:	85 b5       	in	r24, 0x25	; 37
 75a:	80 64       	ori	r24, 0x40	; 64
 75c:	85 bd       	out	0x25, r24	; 37
	#elif		PWM2_MODE		==		PHASE_CORRECT
	ClrBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
	#endif
	
	#if			OUTPUT_MODE		==		NON_INVERTED
	SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
 75e:	85 b5       	in	r24, 0x25	; 37
 760:	80 62       	ori	r24, 0x20	; 32
 762:	85 bd       	out	0x25, r24	; 37
 764:	85 b5       	in	r24, 0x25	; 37
 766:	8f 7e       	andi	r24, 0xEF	; 239
 768:	85 bd       	out	0x25, r24	; 37
 76a:	08 95       	ret

0000076c <M_Pwm2_SetDutyCycle>:

void M_Pwm2_SetDutyCycle		(u8 Local_u8_DesiredDutyCycle)
{
	#if			OUTPUT_MODE		==		NON_INVERTED
	
	if(Local_u8_DesiredDutyCycle == 0)
 76c:	81 11       	cpse	r24, r1
 76e:	0f c0       	rjmp	.+30     	; 0x78e <M_Pwm2_SetDutyCycle+0x22>
	{
		SetBit(TCCR2,COM21); SetBit(TCCR2,COM20);
 770:	95 b5       	in	r25, 0x25	; 37
 772:	90 62       	ori	r25, 0x20	; 32
 774:	95 bd       	out	0x25, r25	; 37
 776:	95 b5       	in	r25, 0x25	; 37
 778:	90 61       	ori	r25, 0x10	; 16
 77a:	95 bd       	out	0x25, r25	; 37
		OCR2 = (255 - ((Local_u8_DesiredDutyCycle *256)/100));
 77c:	98 2f       	mov	r25, r24
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	64 e6       	ldi	r22, 0x64	; 100
 782:	70 e0       	ldi	r23, 0x00	; 0
 784:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__divmodhi4>
 788:	60 95       	com	r22
 78a:	63 bd       	out	0x23, r22	; 35
 78c:	08 95       	ret
	}
	else
	{
		SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
 78e:	95 b5       	in	r25, 0x25	; 37
 790:	90 62       	ori	r25, 0x20	; 32
 792:	95 bd       	out	0x25, r25	; 37
 794:	95 b5       	in	r25, 0x25	; 37
 796:	9f 7e       	andi	r25, 0xEF	; 239
 798:	95 bd       	out	0x25, r25	; 37
		OCR2 = (((Local_u8_DesiredDutyCycle * 256) / 100) - 1);
 79a:	98 2f       	mov	r25, r24
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	64 e6       	ldi	r22, 0x64	; 100
 7a0:	70 e0       	ldi	r23, 0x00	; 0
 7a2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__divmodhi4>
 7a6:	61 50       	subi	r22, 0x01	; 1
 7a8:	63 bd       	out	0x23, r22	; 35
 7aa:	08 95       	ret

000007ac <M_Pwm2_Start>:
	
}

void M_Pwm2_Start				(void)
{
	M_Timer2_Start();
 7ac:	0e 94 91 03 	call	0x722	; 0x722 <M_Timer2_Start>
	M_Dio_PinMode(PD7,OUTPUT);
 7b0:	61 e0       	ldi	r22, 0x01	; 1
 7b2:	8f e2       	ldi	r24, 0x2F	; 47
 7b4:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
 7b8:	08 95       	ret

000007ba <M_Pwm2_Stop>:
}

void M_Pwm2_Stop				(void)
{
	M_Timer2_Stop();
 7ba:	0e 94 9b 03 	call	0x736	; 0x736 <M_Timer2_Stop>
	M_Dio_PinMode(PD7,INPUT);
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	8f e2       	ldi	r24, 0x2F	; 47
 7c2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <M_Dio_PinMode>
 7c6:	08 95       	ret

000007c8 <__divmodhi4>:
 7c8:	97 fb       	bst	r25, 7
 7ca:	07 2e       	mov	r0, r23
 7cc:	16 f4       	brtc	.+4      	; 0x7d2 <__divmodhi4+0xa>
 7ce:	00 94       	com	r0
 7d0:	07 d0       	rcall	.+14     	; 0x7e0 <__divmodhi4_neg1>
 7d2:	77 fd       	sbrc	r23, 7
 7d4:	09 d0       	rcall	.+18     	; 0x7e8 <__divmodhi4_neg2>
 7d6:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <__udivmodhi4>
 7da:	07 fc       	sbrc	r0, 7
 7dc:	05 d0       	rcall	.+10     	; 0x7e8 <__divmodhi4_neg2>
 7de:	3e f4       	brtc	.+14     	; 0x7ee <__divmodhi4_exit>

000007e0 <__divmodhi4_neg1>:
 7e0:	90 95       	com	r25
 7e2:	81 95       	neg	r24
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	08 95       	ret

000007e8 <__divmodhi4_neg2>:
 7e8:	70 95       	com	r23
 7ea:	61 95       	neg	r22
 7ec:	7f 4f       	sbci	r23, 0xFF	; 255

000007ee <__divmodhi4_exit>:
 7ee:	08 95       	ret

000007f0 <__udivmodhi4>:
 7f0:	aa 1b       	sub	r26, r26
 7f2:	bb 1b       	sub	r27, r27
 7f4:	51 e1       	ldi	r21, 0x11	; 17
 7f6:	07 c0       	rjmp	.+14     	; 0x806 <__udivmodhi4_ep>

000007f8 <__udivmodhi4_loop>:
 7f8:	aa 1f       	adc	r26, r26
 7fa:	bb 1f       	adc	r27, r27
 7fc:	a6 17       	cp	r26, r22
 7fe:	b7 07       	cpc	r27, r23
 800:	10 f0       	brcs	.+4      	; 0x806 <__udivmodhi4_ep>
 802:	a6 1b       	sub	r26, r22
 804:	b7 0b       	sbc	r27, r23

00000806 <__udivmodhi4_ep>:
 806:	88 1f       	adc	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	5a 95       	dec	r21
 80c:	a9 f7       	brne	.-22     	; 0x7f8 <__udivmodhi4_loop>
 80e:	80 95       	com	r24
 810:	90 95       	com	r25
 812:	bc 01       	movw	r22, r24
 814:	cd 01       	movw	r24, r26
 816:	08 95       	ret

00000818 <_exit>:
 818:	f8 94       	cli

0000081a <__stop_program>:
 81a:	ff cf       	rjmp	.-2      	; 0x81a <__stop_program>
