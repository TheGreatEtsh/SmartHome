
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000940  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e6  00800060  00000940  000009b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a9a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000acc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000370  00000000  00000000  00000b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003e59  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012e3  00000000  00000000  00004cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001faa  00000000  00000000  00005fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000072c  00000000  00000000  00007f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c7d  00000000  00000000  0000868c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002597  00000000  00000000  00009309  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002e8  00000000  00000000  0000b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 34       	cpi	r26, 0x46	; 70
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 e4       	ldi	r26, 0x46	; 70
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 34       	cpi	r26, 0x46	; 70
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  8a:	0c 94 9e 04 	jmp	0x93c	; 0x93c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WelcomingMsg>:
	H_Eeprom_Write('4',0,107);		
}

void WelcomingMsg(void)
{
	H_Lcd_Clear();
  92:	0e 94 90 01 	call	0x320	; 0x320 <H_Lcd_Clear>
	H_Lcd_WriteString("Welcome to Smart");
  96:	87 e2       	ldi	r24, 0x27	; 39
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	0e 94 ac 01 	call	0x358	; 0x358 <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
  9e:	60 e0       	ldi	r22, 0x00	; 0
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	0e 94 94 01 	call	0x328	; 0x328 <H_Lcd_GoTo>
	H_Lcd_WriteString("Home Project");
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 ac 01 	call	0x358	; 0x358 <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	87 ea       	ldi	r24, 0xA7	; 167
  b2:	91 e6       	ldi	r25, 0x61	; 97
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <WelcomingMsg+0x22>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <WelcomingMsg+0x2c>
  be:	00 00       	nop
	_delay_ms(2000);
	H_Lcd_Clear();
  c0:	0e 94 90 01 	call	0x320	; 0x320 <H_Lcd_Clear>
  c4:	08 95       	ret

000000c6 <main>:
/*                                                                      */
/************************************************************************/

int main ()
{
	H_Lcd_Init();
  c6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <H_Lcd_Init>
	H_KeyPad_Init();
  ca:	0e 94 a5 00 	call	0x14a	; 0x14a <H_KeyPad_Init>
	H_Eeprom_Init();
  ce:	0e 94 87 00 	call	0x10e	; 0x10e <H_Eeprom_Init>
	H_DcMotor_Init();
  d2:	0e 94 7c 00 	call	0xf8	; 0xf8 <H_DcMotor_Init>
	H_Lm35_Init();
  d6:	0e 94 c9 01 	call	0x392	; 0x392 <H_Lm35_Init>
	H_Servo_Init();
  da:	0e 94 cc 01 	call	0x398	; 0x398 <H_Servo_Init>
	H_Led_Init(LED_0);
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	0e 94 c5 01 	call	0x38a	; 0x38a <H_Led_Init>
	H_Led_Init(LED_1);
  e4:	81 e2       	ldi	r24, 0x21	; 33
  e6:	0e 94 c5 01 	call	0x38a	; 0x38a <H_Led_Init>
	
	char NumberOfUsers = 0;

	NumberOfUsers = H_Eeprom_Read(0,100);
  ea:	64 e6       	ldi	r22, 0x64	; 100
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0e 94 8a 00 	call	0x114	; 0x114 <H_Eeprom_Read>
 	u8 UserID		[3]	= {0,0,0};
 	u8 UserPassword [4] = {0,0,0,0};	
	u8 AppState = 0;
	
	WelcomingMsg();
  f2:	0e 94 49 00 	call	0x92	; 0x92 <WelcomingMsg>
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <main+0x30>

000000f8 <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init				(void)
{
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8e e2       	ldi	r24, 0x2E	; 46
  fc:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_0,OUTPUT);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	8c e2       	ldi	r24, 0x2C	; 44
 104:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Pwm2_Init();
 108:	0e 94 4c 04 	call	0x898	; 0x898 <M_Pwm2_Init>
 10c:	08 95       	ret

0000010e <H_Eeprom_Init>:
		M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
		M_I2c_SendSByte(Local_u8_ByteAddress);
		M_I2c_SendSByte(Local_u8_Data);
		M_I2c_StopCondition();
	}
}
 10e:	0e 94 9e 03 	call	0x73c	; 0x73c <M_I2c_Init>
 112:	08 95       	ret

00000114 <H_Eeprom_Read>:
u8   H_Eeprom_Read(u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	c8 2f       	mov	r28, r24
 11a:	d6 2f       	mov	r29, r22
	u8 Local_u8_Data = 0;
	M_I2c_StartCondition();
 11c:	0e 94 ad 03 	call	0x75a	; 0x75a <M_I2c_StartCondition>
	M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
 120:	c0 65       	ori	r28, 0x50	; 80
 122:	8c 2f       	mov	r24, r28
 124:	0e 94 c1 03 	call	0x782	; 0x782 <M_I2c_SendSlaveAddressWrite>
	M_I2c_SendSByte(Local_u8_ByteAddress);
 128:	8d 2f       	mov	r24, r29
 12a:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <M_I2c_SendSByte>
	M_I2c_RepeatedStart();
 12e:	0e 94 06 04 	call	0x80c	; 0x80c <M_I2c_RepeatedStart>
	M_I2c_SendSlaveAddressRead((0x50 | Local_u8_PageAddress));
 132:	8c 2f       	mov	r24, r28
 134:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <M_I2c_SendSlaveAddressRead>
	Local_u8_Data = M_I2c_ReadByteNoAck();
 138:	0e 94 ff 03 	call	0x7fe	; 0x7fe <M_I2c_ReadByteNoAck>
 13c:	c8 2f       	mov	r28, r24
	M_I2c_StopCondition();
 13e:	0e 94 14 04 	call	0x828	; 0x828 <M_I2c_StopCondition>
	return Local_u8_Data;
 142:	8c 2f       	mov	r24, r28
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	82 e2       	ldi	r24, 0x22	; 34
 14e:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	83 e2       	ldi	r24, 0x23	; 35
 156:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	84 e2       	ldi	r24, 0x24	; 36
 15e:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	85 e2       	ldi	r24, 0x25	; 37
 166:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	82 e2       	ldi	r24, 0x22	; 34
 16e:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
 172:	61 e0       	ldi	r22, 0x01	; 1
 174:	83 e2       	ldi	r24, 0x23	; 35
 176:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	84 e2       	ldi	r24, 0x24	; 36
 17e:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
 182:	61 e0       	ldi	r22, 0x01	; 1
 184:	85 e2       	ldi	r24, 0x25	; 37
 186:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	8a e2       	ldi	r24, 0x2A	; 42
 18e:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	8b e2       	ldi	r24, 0x2B	; 43
 196:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
 19a:	60 e0       	ldi	r22, 0x00	; 0
 19c:	81 e1       	ldi	r24, 0x11	; 17
 19e:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	87 e1       	ldi	r24, 0x17	; 23
 1a6:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	8a e2       	ldi	r24, 0x2A	; 42
 1ae:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
 1b2:	60 e0       	ldi	r22, 0x00	; 0
 1b4:	8b e2       	ldi	r24, 0x2B	; 43
 1b6:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	81 e1       	ldi	r24, 0x11	; 17
 1be:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	87 e1       	ldi	r24, 0x17	; 23
 1c6:	0e 94 15 03 	call	0x62a	; 0x62a <M_Dio_PinPullUp>
 1ca:	08 95       	ret

000001cc <H_Lcd_WriteCharacter>:
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
 1cc:	cf 93       	push	r28
 1ce:	c8 2f       	mov	r28, r24
 1d0:	61 e0       	ldi	r22, 0x01	; 1
 1d2:	84 e1       	ldi	r24, 0x14	; 20
 1d4:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	8f 70       	andi	r24, 0x0F	; 15
 1dc:	9c 2f       	mov	r25, r28
 1de:	90 7f       	andi	r25, 0xF0	; 240
 1e0:	89 2b       	or	r24, r25
 1e2:	88 bb       	out	0x18, r24	; 24
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	86 e1       	ldi	r24, 0x16	; 22
 1e8:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 1ec:	8f e9       	ldi	r24, 0x9F	; 159
 1ee:	9f e0       	ldi	r25, 0x0F	; 15
 1f0:	01 97       	sbiw	r24, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <H_Lcd_WriteCharacter+0x24>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <H_Lcd_WriteCharacter+0x2a>
 1f6:	00 00       	nop
 1f8:	60 e0       	ldi	r22, 0x00	; 0
 1fa:	86 e1       	ldi	r24, 0x16	; 22
 1fc:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 200:	28 b3       	in	r18, 0x18	; 24
 202:	30 e1       	ldi	r19, 0x10	; 16
 204:	c3 9f       	mul	r28, r19
 206:	c0 01       	movw	r24, r0
 208:	11 24       	eor	r1, r1
 20a:	92 2f       	mov	r25, r18
 20c:	9f 70       	andi	r25, 0x0F	; 15
 20e:	89 2b       	or	r24, r25
 210:	88 bb       	out	0x18, r24	; 24
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	86 e1       	ldi	r24, 0x16	; 22
 216:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <H_Lcd_WriteCharacter+0x52>
 222:	00 c0       	rjmp	.+0      	; 0x224 <H_Lcd_WriteCharacter+0x58>
 224:	00 00       	nop
 226:	60 e0       	ldi	r22, 0x00	; 0
 228:	86 e1       	ldi	r24, 0x16	; 22
 22a:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 22e:	cf 91       	pop	r28
 230:	08 95       	ret

00000232 <H_Lcd_WriteCommand>:
 232:	cf 93       	push	r28
 234:	c8 2f       	mov	r28, r24
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	84 e1       	ldi	r24, 0x14	; 20
 23a:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 23e:	88 b3       	in	r24, 0x18	; 24
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	9c 2f       	mov	r25, r28
 244:	90 7f       	andi	r25, 0xF0	; 240
 246:	89 2b       	or	r24, r25
 248:	88 bb       	out	0x18, r24	; 24
 24a:	61 e0       	ldi	r22, 0x01	; 1
 24c:	86 e1       	ldi	r24, 0x16	; 22
 24e:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 252:	8f e9       	ldi	r24, 0x9F	; 159
 254:	9f e0       	ldi	r25, 0x0F	; 15
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <H_Lcd_WriteCommand+0x24>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <H_Lcd_WriteCommand+0x2a>
 25c:	00 00       	nop
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	86 e1       	ldi	r24, 0x16	; 22
 262:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <H_Lcd_WriteCommand+0x38>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <H_Lcd_WriteCommand+0x3e>
 270:	00 00       	nop
 272:	28 b3       	in	r18, 0x18	; 24
 274:	30 e1       	ldi	r19, 0x10	; 16
 276:	c3 9f       	mul	r28, r19
 278:	c0 01       	movw	r24, r0
 27a:	11 24       	eor	r1, r1
 27c:	92 2f       	mov	r25, r18
 27e:	9f 70       	andi	r25, 0x0F	; 15
 280:	89 2b       	or	r24, r25
 282:	88 bb       	out	0x18, r24	; 24
 284:	61 e0       	ldi	r22, 0x01	; 1
 286:	86 e1       	ldi	r24, 0x16	; 22
 288:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 28c:	8f e9       	ldi	r24, 0x9F	; 159
 28e:	9f e0       	ldi	r25, 0x0F	; 15
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <H_Lcd_WriteCommand+0x5e>
 294:	00 c0       	rjmp	.+0      	; 0x296 <H_Lcd_WriteCommand+0x64>
 296:	00 00       	nop
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	86 e1       	ldi	r24, 0x16	; 22
 29c:	0e 94 8c 02 	call	0x518	; 0x518 <M_Dio_PinWrite>
 2a0:	8f e1       	ldi	r24, 0x1F	; 31
 2a2:	9e e4       	ldi	r25, 0x4E	; 78
 2a4:	01 97       	sbiw	r24, 0x01	; 1
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <H_Lcd_WriteCommand+0x72>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <H_Lcd_WriteCommand+0x78>
 2aa:	00 00       	nop
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret

000002b0 <H_Lcd_Init>:
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	88 e1       	ldi	r24, 0x18	; 24
 2b4:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 2b8:	61 e0       	ldi	r22, 0x01	; 1
 2ba:	89 e1       	ldi	r24, 0x19	; 25
 2bc:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	8a e1       	ldi	r24, 0x1A	; 26
 2c4:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	8b e1       	ldi	r24, 0x1B	; 27
 2cc:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	84 e1       	ldi	r24, 0x14	; 20
 2d4:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 2d8:	61 e0       	ldi	r22, 0x01	; 1
 2da:	85 e1       	ldi	r24, 0x15	; 21
 2dc:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	86 e1       	ldi	r24, 0x16	; 22
 2e4:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 2e8:	2f ef       	ldi	r18, 0xFF	; 255
 2ea:	83 ed       	ldi	r24, 0xD3	; 211
 2ec:	90 e3       	ldi	r25, 0x30	; 48
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	80 40       	sbci	r24, 0x00	; 0
 2f2:	90 40       	sbci	r25, 0x00	; 0
 2f4:	e1 f7       	brne	.-8      	; 0x2ee <H_Lcd_Init+0x3e>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <H_Lcd_Init+0x48>
 2f8:	00 00       	nop
 2fa:	83 e3       	ldi	r24, 0x33	; 51
 2fc:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
 300:	82 e3       	ldi	r24, 0x32	; 50
 302:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
 306:	88 e2       	ldi	r24, 0x28	; 40
 308:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
 30c:	8c e0       	ldi	r24, 0x0C	; 12
 30e:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
 31e:	08 95       	ret

00000320 <H_Lcd_Clear>:
// 	}
// }

void H_Lcd_Clear (void)
{
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
 326:	08 95       	ret

00000328 <H_Lcd_GoTo>:
}

void H_Lcd_GoTo	(u8 Local_u8_Row,u8 Local_u8_Coloumn )
{
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	00 d0       	rcall	.+0      	; 0x32e <H_Lcd_GoTo+0x6>
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
	u8 arr [2] = {LCD_CMD_FIRST_ROW, LCD_CMD_SECOND_ROW};
 332:	90 e8       	ldi	r25, 0x80	; 128
 334:	99 83       	std	Y+1, r25	; 0x01
 336:	90 ec       	ldi	r25, 0xC0	; 192
 338:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
 33a:	e1 e0       	ldi	r30, 0x01	; 1
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	ec 0f       	add	r30, r28
 340:	fd 1f       	adc	r31, r29
 342:	e8 0f       	add	r30, r24
 344:	f1 1d       	adc	r31, r1
 346:	80 81       	ld	r24, Z
 348:	86 0f       	add	r24, r22
 34a:	0e 94 19 01 	call	0x232	; 0x232 <H_Lcd_WriteCommand>
	
}
 34e:	0f 90       	pop	r0
 350:	0f 90       	pop	r0
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	08 95       	ret

00000358 <H_Lcd_WriteString>:

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	8c 01       	movw	r16, r24
	u8 Local_u8_Counter = 0;
 360:	c0 e0       	ldi	r28, 0x00	; 0
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
 362:	09 c0       	rjmp	.+18     	; 0x376 <H_Lcd_WriteString+0x1e>
	{
		H_Lcd_WriteCharacter(Local_u8_PtrToString[Local_u8_Counter]);
 364:	0e 94 e6 00 	call	0x1cc	; 0x1cc <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
 368:	cf 5f       	subi	r28, 0xFF	; 255
		if (Local_u8_Counter == 16)
 36a:	c0 31       	cpi	r28, 0x10	; 16
 36c:	21 f4       	brne	.+8      	; 0x376 <H_Lcd_WriteString+0x1e>
		{
			H_Lcd_GoTo(1,0);
 36e:	60 e0       	ldi	r22, 0x00	; 0
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 94 01 	call	0x328	; 0x328 <H_Lcd_GoTo>
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
	u8 Local_u8_Counter = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
 376:	f8 01       	movw	r30, r16
 378:	ec 0f       	add	r30, r28
 37a:	f1 1d       	adc	r31, r1
 37c:	80 81       	ld	r24, Z
 37e:	81 11       	cpse	r24, r1
 380:	f1 cf       	rjmp	.-30     	; 0x364 <H_Lcd_WriteString+0xc>
		if (Local_u8_Counter == 16)
		{
			H_Lcd_GoTo(1,0);
		}
	}
 382:	cf 91       	pop	r28
 384:	1f 91       	pop	r17
 386:	0f 91       	pop	r16
 388:	08 95       	ret

0000038a <H_Led_Init>:

#include "Led.h"

void	H_Led_Init(u8 Local_u8_Led_Number)
{	
	M_Dio_PinMode(Local_u8_Led_Number,OUTPUT);		
 38a:	61 e0       	ldi	r22, 0x01	; 1
 38c:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
 390:	08 95       	ret

00000392 <H_Lm35_Init>:

#include "Lm35.h"

void H_Lm35_Init				(void)
{
	M_Adc_Init();
 392:	0e 94 d7 01 	call	0x3ae	; 0x3ae <M_Adc_Init>
 396:	08 95       	ret

00000398 <H_Servo_Init>:
	so I initialized an output pwm signal with frequency 50 hz
*/
void H_Servo_Init		(void)
{
	/*To Set Control Pin as Output*/
	M_Dio_PinMode(SERVO_OUTPUT_PIN, OUTPUT);
 398:	61 e0       	ldi	r22, 0x01	; 1
 39a:	8d e2       	ldi	r24, 0x2D	; 45
 39c:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	
	/*To initialize PWM*/
	M_Pwm1_Init();
 3a0:	0e 94 21 04 	call	0x842	; 0x842 <M_Pwm1_Init>
		
	/*To set working Frequency*/
	M_Pwm1_SetFrequency(50);
 3a4:	82 e3       	ldi	r24, 0x32	; 50
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 37 04 	call	0x86e	; 0x86e <M_Pwm1_SetFrequency>
 3ac:	08 95       	ret

000003ae <M_Adc_Init>:
void (* Adc_void_CallBack) (void);

void M_Adc_Init (void)
{
	
	M_Dio_PinMode(PA1, INPUT);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	8b e0       	ldi	r24, 0x0B	; 11
 3b2:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>
	/* Step 1	->		Set Voltage Reference  */
	#if			VOLTAGE_REFERENCE		==		AREF
	ClrBit(ADMUX,REF0);
	ClrBit(ADMUX,REF1);
	#elif		VOLTAGE_REFERENCE		==		AVCC
	SetBit(ADMUX,REF0);
 3b6:	87 b1       	in	r24, 0x07	; 7
 3b8:	80 64       	ori	r24, 0x40	; 64
 3ba:	87 b9       	out	0x07, r24	; 7
	ClrBit(ADMUX,REF1);
 3bc:	87 b1       	in	r24, 0x07	; 7
 3be:	8f 77       	andi	r24, 0x7F	; 127
 3c0:	87 b9       	out	0x07, r24	; 7
	SetBit(ADMUX,REF1);
	#endif
	
	/* Step 2	->		Set Left Adjust Result  */
	#if			LEFT_ADJUST_RESULT		==		RIGHT_ADJUST
	ClrBit(ADMUX,ADLAR);
 3c2:	87 b1       	in	r24, 0x07	; 7
 3c4:	8f 7d       	andi	r24, 0xDF	; 223
 3c6:	87 b9       	out	0x07, r24	; 7
	#elif		LEFT_ADJUST_RESULT		==		LEFT_ADJUST
	SetBit(ADMUX,ADLAR);
	#endif				
	
	/* Step 3	->		Set Pin Used  */
	ClrBit(ADMUX,MUX4); ClrBit(ADMUX,MUX3); ClrBit(ADMUX,MUX2); ClrBit(ADMUX,MUX1); ClrBit(ADMUX,MUX0);
 3c8:	87 b1       	in	r24, 0x07	; 7
 3ca:	8f 7e       	andi	r24, 0xEF	; 239
 3cc:	87 b9       	out	0x07, r24	; 7
 3ce:	87 b1       	in	r24, 0x07	; 7
 3d0:	87 7f       	andi	r24, 0xF7	; 247
 3d2:	87 b9       	out	0x07, r24	; 7
 3d4:	87 b1       	in	r24, 0x07	; 7
 3d6:	8b 7f       	andi	r24, 0xFB	; 251
 3d8:	87 b9       	out	0x07, r24	; 7
 3da:	87 b1       	in	r24, 0x07	; 7
 3dc:	8d 7f       	andi	r24, 0xFD	; 253
 3de:	87 b9       	out	0x07, r24	; 7
 3e0:	87 b1       	in	r24, 0x07	; 7
 3e2:	8e 7f       	andi	r24, 0xFE	; 254
 3e4:	87 b9       	out	0x07, r24	; 7
	
	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_64	
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	ClrBit(ADCSRA,ADPS0);

	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_128
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	SetBit(ADCSRA,ADPS0);
 3e6:	86 b1       	in	r24, 0x06	; 6
 3e8:	84 60       	ori	r24, 0x04	; 4
 3ea:	86 b9       	out	0x06, r24	; 6
 3ec:	86 b1       	in	r24, 0x06	; 6
 3ee:	82 60       	ori	r24, 0x02	; 2
 3f0:	86 b9       	out	0x06, r24	; 6
 3f2:	86 b1       	in	r24, 0x06	; 6
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	86 b9       	out	0x06, r24	; 6
	#endif



	/* Step 5	->		set ADC Enable */
	SetBit(ADCSRA,ADEN);
 3f8:	86 b1       	in	r24, 0x06	; 6
 3fa:	80 68       	ori	r24, 0x80	; 128
 3fc:	86 b9       	out	0x06, r24	; 6
	
	SetBit(ADCSRA,ADATE);
 3fe:	86 b1       	in	r24, 0x06	; 6
 400:	80 62       	ori	r24, 0x20	; 32
 402:	86 b9       	out	0x06, r24	; 6
 404:	08 95       	ret

00000406 <M_Dio_PinMode>:
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
		default:								break;
	}
	
	return Local_u8_Pin_Value;
}
 406:	9d ec       	ldi	r25, 0xCD	; 205
 408:	89 9f       	mul	r24, r25
 40a:	91 2d       	mov	r25, r1
 40c:	11 24       	eor	r1, r1
 40e:	29 2f       	mov	r18, r25
 410:	26 95       	lsr	r18
 412:	26 95       	lsr	r18
 414:	26 95       	lsr	r18
 416:	22 0f       	add	r18, r18
 418:	32 2f       	mov	r19, r18
 41a:	33 0f       	add	r19, r19
 41c:	33 0f       	add	r19, r19
 41e:	23 0f       	add	r18, r19
 420:	82 1b       	sub	r24, r18
 422:	28 2f       	mov	r18, r24
 424:	96 95       	lsr	r25
 426:	96 95       	lsr	r25
 428:	96 95       	lsr	r25
 42a:	66 23       	and	r22, r22
 42c:	19 f0       	breq	.+6      	; 0x434 <M_Dio_PinMode+0x2e>
 42e:	61 30       	cpi	r22, 0x01	; 1
 430:	e1 f1       	breq	.+120    	; 0x4aa <M_Dio_PinMode+0xa4>
 432:	08 95       	ret
 434:	92 30       	cpi	r25, 0x02	; 2
 436:	a9 f0       	breq	.+42     	; 0x462 <M_Dio_PinMode+0x5c>
 438:	18 f4       	brcc	.+6      	; 0x440 <M_Dio_PinMode+0x3a>
 43a:	91 30       	cpi	r25, 0x01	; 1
 43c:	31 f0       	breq	.+12     	; 0x44a <M_Dio_PinMode+0x44>
 43e:	08 95       	ret
 440:	93 30       	cpi	r25, 0x03	; 3
 442:	d9 f0       	breq	.+54     	; 0x47a <M_Dio_PinMode+0x74>
 444:	94 30       	cpi	r25, 0x04	; 4
 446:	29 f1       	breq	.+74     	; 0x492 <M_Dio_PinMode+0x8c>
 448:	08 95       	ret
 44a:	3a b3       	in	r19, 0x1a	; 26
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 c0       	rjmp	.+4      	; 0x456 <M_Dio_PinMode+0x50>
 452:	88 0f       	add	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	2a 95       	dec	r18
 458:	e2 f7       	brpl	.-8      	; 0x452 <M_Dio_PinMode+0x4c>
 45a:	80 95       	com	r24
 45c:	83 23       	and	r24, r19
 45e:	8a bb       	out	0x1a, r24	; 26
 460:	08 95       	ret
 462:	37 b3       	in	r19, 0x17	; 23
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <M_Dio_PinMode+0x68>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	2a 95       	dec	r18
 470:	e2 f7       	brpl	.-8      	; 0x46a <M_Dio_PinMode+0x64>
 472:	80 95       	com	r24
 474:	83 23       	and	r24, r19
 476:	87 bb       	out	0x17, r24	; 23
 478:	08 95       	ret
 47a:	34 b3       	in	r19, 0x14	; 20
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <M_Dio_PinMode+0x80>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	2a 95       	dec	r18
 488:	e2 f7       	brpl	.-8      	; 0x482 <M_Dio_PinMode+0x7c>
 48a:	80 95       	com	r24
 48c:	83 23       	and	r24, r19
 48e:	84 bb       	out	0x14, r24	; 20
 490:	08 95       	ret
 492:	31 b3       	in	r19, 0x11	; 17
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 c0       	rjmp	.+4      	; 0x49e <M_Dio_PinMode+0x98>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	2a 95       	dec	r18
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <M_Dio_PinMode+0x94>
 4a2:	80 95       	com	r24
 4a4:	83 23       	and	r24, r19
 4a6:	81 bb       	out	0x11, r24	; 17
 4a8:	08 95       	ret
 4aa:	92 30       	cpi	r25, 0x02	; 2
 4ac:	a1 f0       	breq	.+40     	; 0x4d6 <M_Dio_PinMode+0xd0>
 4ae:	18 f4       	brcc	.+6      	; 0x4b6 <M_Dio_PinMode+0xb0>
 4b0:	91 30       	cpi	r25, 0x01	; 1
 4b2:	31 f0       	breq	.+12     	; 0x4c0 <M_Dio_PinMode+0xba>
 4b4:	08 95       	ret
 4b6:	93 30       	cpi	r25, 0x03	; 3
 4b8:	c9 f0       	breq	.+50     	; 0x4ec <M_Dio_PinMode+0xe6>
 4ba:	94 30       	cpi	r25, 0x04	; 4
 4bc:	11 f1       	breq	.+68     	; 0x502 <M_Dio_PinMode+0xfc>
 4be:	08 95       	ret
 4c0:	3a b3       	in	r19, 0x1a	; 26
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <M_Dio_PinMode+0xc6>
 4c8:	88 0f       	add	r24, r24
 4ca:	99 1f       	adc	r25, r25
 4cc:	2a 95       	dec	r18
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <M_Dio_PinMode+0xc2>
 4d0:	83 2b       	or	r24, r19
 4d2:	8a bb       	out	0x1a, r24	; 26
 4d4:	08 95       	ret
 4d6:	37 b3       	in	r19, 0x17	; 23
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <M_Dio_PinMode+0xdc>
 4de:	88 0f       	add	r24, r24
 4e0:	99 1f       	adc	r25, r25
 4e2:	2a 95       	dec	r18
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <M_Dio_PinMode+0xd8>
 4e6:	83 2b       	or	r24, r19
 4e8:	87 bb       	out	0x17, r24	; 23
 4ea:	08 95       	ret
 4ec:	34 b3       	in	r19, 0x14	; 20
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <M_Dio_PinMode+0xf2>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	2a 95       	dec	r18
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <M_Dio_PinMode+0xee>
 4fc:	83 2b       	or	r24, r19
 4fe:	84 bb       	out	0x14, r24	; 20
 500:	08 95       	ret
 502:	31 b3       	in	r19, 0x11	; 17
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <M_Dio_PinMode+0x108>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	2a 95       	dec	r18
 510:	e2 f7       	brpl	.-8      	; 0x50a <M_Dio_PinMode+0x104>
 512:	83 2b       	or	r24, r19
 514:	81 bb       	out	0x11, r24	; 17
 516:	08 95       	ret

00000518 <M_Dio_PinWrite>:
 518:	9d ec       	ldi	r25, 0xCD	; 205
 51a:	89 9f       	mul	r24, r25
 51c:	91 2d       	mov	r25, r1
 51e:	11 24       	eor	r1, r1
 520:	29 2f       	mov	r18, r25
 522:	26 95       	lsr	r18
 524:	26 95       	lsr	r18
 526:	26 95       	lsr	r18
 528:	22 0f       	add	r18, r18
 52a:	32 2f       	mov	r19, r18
 52c:	33 0f       	add	r19, r19
 52e:	33 0f       	add	r19, r19
 530:	23 0f       	add	r18, r19
 532:	82 1b       	sub	r24, r18
 534:	28 2f       	mov	r18, r24
 536:	96 95       	lsr	r25
 538:	96 95       	lsr	r25
 53a:	96 95       	lsr	r25
 53c:	66 23       	and	r22, r22
 53e:	19 f0       	breq	.+6      	; 0x546 <M_Dio_PinWrite+0x2e>
 540:	61 30       	cpi	r22, 0x01	; 1
 542:	e1 f1       	breq	.+120    	; 0x5bc <M_Dio_PinWrite+0xa4>
 544:	08 95       	ret
 546:	92 30       	cpi	r25, 0x02	; 2
 548:	a9 f0       	breq	.+42     	; 0x574 <M_Dio_PinWrite+0x5c>
 54a:	18 f4       	brcc	.+6      	; 0x552 <M_Dio_PinWrite+0x3a>
 54c:	91 30       	cpi	r25, 0x01	; 1
 54e:	31 f0       	breq	.+12     	; 0x55c <M_Dio_PinWrite+0x44>
 550:	08 95       	ret
 552:	93 30       	cpi	r25, 0x03	; 3
 554:	d9 f0       	breq	.+54     	; 0x58c <M_Dio_PinWrite+0x74>
 556:	94 30       	cpi	r25, 0x04	; 4
 558:	29 f1       	breq	.+74     	; 0x5a4 <M_Dio_PinWrite+0x8c>
 55a:	08 95       	ret
 55c:	3b b3       	in	r19, 0x1b	; 27
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	02 c0       	rjmp	.+4      	; 0x568 <M_Dio_PinWrite+0x50>
 564:	88 0f       	add	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	2a 95       	dec	r18
 56a:	e2 f7       	brpl	.-8      	; 0x564 <M_Dio_PinWrite+0x4c>
 56c:	80 95       	com	r24
 56e:	83 23       	and	r24, r19
 570:	8b bb       	out	0x1b, r24	; 27
 572:	08 95       	ret
 574:	38 b3       	in	r19, 0x18	; 24
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	02 c0       	rjmp	.+4      	; 0x580 <M_Dio_PinWrite+0x68>
 57c:	88 0f       	add	r24, r24
 57e:	99 1f       	adc	r25, r25
 580:	2a 95       	dec	r18
 582:	e2 f7       	brpl	.-8      	; 0x57c <M_Dio_PinWrite+0x64>
 584:	80 95       	com	r24
 586:	83 23       	and	r24, r19
 588:	88 bb       	out	0x18, r24	; 24
 58a:	08 95       	ret
 58c:	35 b3       	in	r19, 0x15	; 21
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	90 e0       	ldi	r25, 0x00	; 0
 592:	02 c0       	rjmp	.+4      	; 0x598 <M_Dio_PinWrite+0x80>
 594:	88 0f       	add	r24, r24
 596:	99 1f       	adc	r25, r25
 598:	2a 95       	dec	r18
 59a:	e2 f7       	brpl	.-8      	; 0x594 <M_Dio_PinWrite+0x7c>
 59c:	80 95       	com	r24
 59e:	83 23       	and	r24, r19
 5a0:	85 bb       	out	0x15, r24	; 21
 5a2:	08 95       	ret
 5a4:	32 b3       	in	r19, 0x12	; 18
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <M_Dio_PinWrite+0x98>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	2a 95       	dec	r18
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <M_Dio_PinWrite+0x94>
 5b4:	80 95       	com	r24
 5b6:	83 23       	and	r24, r19
 5b8:	82 bb       	out	0x12, r24	; 18
 5ba:	08 95       	ret
 5bc:	92 30       	cpi	r25, 0x02	; 2
 5be:	a1 f0       	breq	.+40     	; 0x5e8 <M_Dio_PinWrite+0xd0>
 5c0:	18 f4       	brcc	.+6      	; 0x5c8 <M_Dio_PinWrite+0xb0>
 5c2:	91 30       	cpi	r25, 0x01	; 1
 5c4:	31 f0       	breq	.+12     	; 0x5d2 <M_Dio_PinWrite+0xba>
 5c6:	08 95       	ret
 5c8:	93 30       	cpi	r25, 0x03	; 3
 5ca:	c9 f0       	breq	.+50     	; 0x5fe <M_Dio_PinWrite+0xe6>
 5cc:	94 30       	cpi	r25, 0x04	; 4
 5ce:	11 f1       	breq	.+68     	; 0x614 <M_Dio_PinWrite+0xfc>
 5d0:	08 95       	ret
 5d2:	3b b3       	in	r19, 0x1b	; 27
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <M_Dio_PinWrite+0xc6>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	2a 95       	dec	r18
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <M_Dio_PinWrite+0xc2>
 5e2:	83 2b       	or	r24, r19
 5e4:	8b bb       	out	0x1b, r24	; 27
 5e6:	08 95       	ret
 5e8:	38 b3       	in	r19, 0x18	; 24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <M_Dio_PinWrite+0xdc>
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	2a 95       	dec	r18
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <M_Dio_PinWrite+0xd8>
 5f8:	83 2b       	or	r24, r19
 5fa:	88 bb       	out	0x18, r24	; 24
 5fc:	08 95       	ret
 5fe:	35 b3       	in	r19, 0x15	; 21
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <M_Dio_PinWrite+0xf2>
 606:	88 0f       	add	r24, r24
 608:	99 1f       	adc	r25, r25
 60a:	2a 95       	dec	r18
 60c:	e2 f7       	brpl	.-8      	; 0x606 <M_Dio_PinWrite+0xee>
 60e:	83 2b       	or	r24, r19
 610:	85 bb       	out	0x15, r24	; 21
 612:	08 95       	ret
 614:	32 b3       	in	r19, 0x12	; 18
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	02 c0       	rjmp	.+4      	; 0x620 <M_Dio_PinWrite+0x108>
 61c:	88 0f       	add	r24, r24
 61e:	99 1f       	adc	r25, r25
 620:	2a 95       	dec	r18
 622:	e2 f7       	brpl	.-8      	; 0x61c <M_Dio_PinWrite+0x104>
 624:	83 2b       	or	r24, r19
 626:	82 bb       	out	0x12, r24	; 18
 628:	08 95       	ret

0000062a <M_Dio_PinPullUp>:

void M_Dio_PinPullUp	(u8 Local_u8_PinNumber, u8 Local_u8_PullUpState)
{
	u8 Local_u8_Pin		=	Local_u8_PinNumber % 10;
 62a:	9d ec       	ldi	r25, 0xCD	; 205
 62c:	89 9f       	mul	r24, r25
 62e:	91 2d       	mov	r25, r1
 630:	11 24       	eor	r1, r1
 632:	29 2f       	mov	r18, r25
 634:	26 95       	lsr	r18
 636:	26 95       	lsr	r18
 638:	26 95       	lsr	r18
 63a:	22 0f       	add	r18, r18
 63c:	32 2f       	mov	r19, r18
 63e:	33 0f       	add	r19, r19
 640:	33 0f       	add	r19, r19
 642:	23 0f       	add	r18, r19
 644:	82 1b       	sub	r24, r18
 646:	28 2f       	mov	r18, r24
	u8 Local_u8_Port	=	Local_u8_PinNumber / 10;
 648:	96 95       	lsr	r25
 64a:	96 95       	lsr	r25
 64c:	96 95       	lsr	r25
	switch(Local_u8_PullUpState)
 64e:	66 23       	and	r22, r22
 650:	f1 f1       	breq	.+124    	; 0x6ce <M_Dio_PinPullUp+0xa4>
 652:	61 30       	cpi	r22, 0x01	; 1
 654:	09 f0       	breq	.+2      	; 0x658 <M_Dio_PinPullUp+0x2e>
 656:	71 c0       	rjmp	.+226    	; 0x73a <M_Dio_PinPullUp+0x110>
	{
		case PULLUP_DISABLE:
		switch(Local_u8_Port)
 658:	92 30       	cpi	r25, 0x02	; 2
 65a:	a9 f0       	breq	.+42     	; 0x686 <M_Dio_PinPullUp+0x5c>
 65c:	18 f4       	brcc	.+6      	; 0x664 <M_Dio_PinPullUp+0x3a>
 65e:	91 30       	cpi	r25, 0x01	; 1
 660:	31 f0       	breq	.+12     	; 0x66e <M_Dio_PinPullUp+0x44>
 662:	08 95       	ret
 664:	93 30       	cpi	r25, 0x03	; 3
 666:	d9 f0       	breq	.+54     	; 0x69e <M_Dio_PinPullUp+0x74>
 668:	94 30       	cpi	r25, 0x04	; 4
 66a:	29 f1       	breq	.+74     	; 0x6b6 <M_Dio_PinPullUp+0x8c>
 66c:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin);		break;
 66e:	3b b3       	in	r19, 0x1b	; 27
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <M_Dio_PinPullUp+0x50>
 676:	88 0f       	add	r24, r24
 678:	99 1f       	adc	r25, r25
 67a:	2a 95       	dec	r18
 67c:	e2 f7       	brpl	.-8      	; 0x676 <M_Dio_PinPullUp+0x4c>
 67e:	80 95       	com	r24
 680:	83 23       	and	r24, r19
 682:	8b bb       	out	0x1b, r24	; 27
 684:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin);		break;
 686:	38 b3       	in	r19, 0x18	; 24
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	02 c0       	rjmp	.+4      	; 0x692 <M_Dio_PinPullUp+0x68>
 68e:	88 0f       	add	r24, r24
 690:	99 1f       	adc	r25, r25
 692:	2a 95       	dec	r18
 694:	e2 f7       	brpl	.-8      	; 0x68e <M_Dio_PinPullUp+0x64>
 696:	80 95       	com	r24
 698:	83 23       	and	r24, r19
 69a:	88 bb       	out	0x18, r24	; 24
 69c:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin);		break;
 69e:	35 b3       	in	r19, 0x15	; 21
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <M_Dio_PinPullUp+0x80>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	2a 95       	dec	r18
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <M_Dio_PinPullUp+0x7c>
 6ae:	80 95       	com	r24
 6b0:	83 23       	and	r24, r19
 6b2:	85 bb       	out	0x15, r24	; 21
 6b4:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin);		break;
 6b6:	32 b3       	in	r19, 0x12	; 18
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <M_Dio_PinPullUp+0x98>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	2a 95       	dec	r18
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <M_Dio_PinPullUp+0x94>
 6c6:	80 95       	com	r24
 6c8:	83 23       	and	r24, r19
 6ca:	82 bb       	out	0x12, r24	; 18
 6cc:	08 95       	ret
			default:								break;
		}
		break;
		
		case PULLUP_ENABLE:
		switch(Local_u8_Port)
 6ce:	92 30       	cpi	r25, 0x02	; 2
 6d0:	a1 f0       	breq	.+40     	; 0x6fa <M_Dio_PinPullUp+0xd0>
 6d2:	18 f4       	brcc	.+6      	; 0x6da <M_Dio_PinPullUp+0xb0>
 6d4:	91 30       	cpi	r25, 0x01	; 1
 6d6:	31 f0       	breq	.+12     	; 0x6e4 <M_Dio_PinPullUp+0xba>
 6d8:	08 95       	ret
 6da:	93 30       	cpi	r25, 0x03	; 3
 6dc:	c9 f0       	breq	.+50     	; 0x710 <M_Dio_PinPullUp+0xe6>
 6de:	94 30       	cpi	r25, 0x04	; 4
 6e0:	11 f1       	breq	.+68     	; 0x726 <M_Dio_PinPullUp+0xfc>
 6e2:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin);		break;
 6e4:	3b b3       	in	r19, 0x1b	; 27
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <M_Dio_PinPullUp+0xc6>
 6ec:	88 0f       	add	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	2a 95       	dec	r18
 6f2:	e2 f7       	brpl	.-8      	; 0x6ec <M_Dio_PinPullUp+0xc2>
 6f4:	83 2b       	or	r24, r19
 6f6:	8b bb       	out	0x1b, r24	; 27
 6f8:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin);		break;
 6fa:	38 b3       	in	r19, 0x18	; 24
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	02 c0       	rjmp	.+4      	; 0x706 <M_Dio_PinPullUp+0xdc>
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	2a 95       	dec	r18
 708:	e2 f7       	brpl	.-8      	; 0x702 <M_Dio_PinPullUp+0xd8>
 70a:	83 2b       	or	r24, r19
 70c:	88 bb       	out	0x18, r24	; 24
 70e:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin);		break;
 710:	35 b3       	in	r19, 0x15	; 21
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <M_Dio_PinPullUp+0xf2>
 718:	88 0f       	add	r24, r24
 71a:	99 1f       	adc	r25, r25
 71c:	2a 95       	dec	r18
 71e:	e2 f7       	brpl	.-8      	; 0x718 <M_Dio_PinPullUp+0xee>
 720:	83 2b       	or	r24, r19
 722:	85 bb       	out	0x15, r24	; 21
 724:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin);		break;
 726:	32 b3       	in	r19, 0x12	; 18
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	02 c0       	rjmp	.+4      	; 0x732 <M_Dio_PinPullUp+0x108>
 72e:	88 0f       	add	r24, r24
 730:	99 1f       	adc	r25, r25
 732:	2a 95       	dec	r18
 734:	e2 f7       	brpl	.-8      	; 0x72e <M_Dio_PinPullUp+0x104>
 736:	83 2b       	or	r24, r19
 738:	82 bb       	out	0x12, r24	; 18
 73a:	08 95       	ret

0000073c <M_I2c_Init>:
//     SetBit(TWCR,6);					 //   later
// 	SetBit(TWCR,7);                  //   to clear the flag bit
// 	while(GetBit(TWCR,7) == 0);
// 	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
// 	return TWDR;
}
 73c:	86 b7       	in	r24, 0x36	; 54
 73e:	8b 7f       	andi	r24, 0xFB	; 251
 740:	86 bf       	out	0x36, r24	; 54
 742:	8c e0       	ldi	r24, 0x0C	; 12
 744:	80 b9       	out	0x00, r24	; 0
 746:	86 b7       	in	r24, 0x36	; 54
 748:	84 60       	ori	r24, 0x04	; 4
 74a:	86 bf       	out	0x36, r24	; 54
 74c:	8f e3       	ldi	r24, 0x3F	; 63
 74e:	9c e9       	ldi	r25, 0x9C	; 156
 750:	01 97       	sbiw	r24, 0x01	; 1
 752:	f1 f7       	brne	.-4      	; 0x750 <M_I2c_Init+0x14>
 754:	00 c0       	rjmp	.+0      	; 0x756 <M_I2c_Init+0x1a>
 756:	00 00       	nop
 758:	08 95       	ret

0000075a <M_I2c_StartCondition>:
 75a:	86 b7       	in	r24, 0x36	; 54
 75c:	80 62       	ori	r24, 0x20	; 32
 75e:	86 bf       	out	0x36, r24	; 54
 760:	86 b7       	in	r24, 0x36	; 54
 762:	80 68       	ori	r24, 0x80	; 128
 764:	86 bf       	out	0x36, r24	; 54
 766:	06 b6       	in	r0, 0x36	; 54
 768:	07 fe       	sbrs	r0, 7
 76a:	fd cf       	rjmp	.-6      	; 0x766 <M_I2c_StartCondition+0xc>
 76c:	81 b1       	in	r24, 0x01	; 1
 76e:	88 7f       	andi	r24, 0xF8	; 248
 770:	88 30       	cpi	r24, 0x08	; 8
 772:	e1 f7       	brne	.-8      	; 0x76c <M_I2c_StartCondition+0x12>
 774:	8f e3       	ldi	r24, 0x3F	; 63
 776:	9c e9       	ldi	r25, 0x9C	; 156
 778:	01 97       	sbiw	r24, 0x01	; 1
 77a:	f1 f7       	brne	.-4      	; 0x778 <M_I2c_StartCondition+0x1e>
 77c:	00 c0       	rjmp	.+0      	; 0x77e <M_I2c_StartCondition+0x24>
 77e:	00 00       	nop
 780:	08 95       	ret

00000782 <M_I2c_SendSlaveAddressWrite>:
 782:	88 0f       	add	r24, r24
 784:	83 b9       	out	0x03, r24	; 3
 786:	86 b7       	in	r24, 0x36	; 54
 788:	80 68       	ori	r24, 0x80	; 128
 78a:	86 bf       	out	0x36, r24	; 54
 78c:	06 b6       	in	r0, 0x36	; 54
 78e:	07 fe       	sbrs	r0, 7
 790:	fd cf       	rjmp	.-6      	; 0x78c <M_I2c_SendSlaveAddressWrite+0xa>
 792:	81 b1       	in	r24, 0x01	; 1
 794:	88 7f       	andi	r24, 0xF8	; 248
 796:	88 31       	cpi	r24, 0x18	; 24
 798:	e1 f7       	brne	.-8      	; 0x792 <M_I2c_SendSlaveAddressWrite+0x10>
 79a:	8f e3       	ldi	r24, 0x3F	; 63
 79c:	9c e9       	ldi	r25, 0x9C	; 156
 79e:	01 97       	sbiw	r24, 0x01	; 1
 7a0:	f1 f7       	brne	.-4      	; 0x79e <M_I2c_SendSlaveAddressWrite+0x1c>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <M_I2c_SendSlaveAddressWrite+0x22>
 7a4:	00 00       	nop
 7a6:	08 95       	ret

000007a8 <M_I2c_SendSlaveAddressRead>:
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	88 0f       	add	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	81 60       	ori	r24, 0x01	; 1
 7b0:	83 b9       	out	0x03, r24	; 3
 7b2:	86 b7       	in	r24, 0x36	; 54
 7b4:	80 68       	ori	r24, 0x80	; 128
 7b6:	86 bf       	out	0x36, r24	; 54
 7b8:	06 b6       	in	r0, 0x36	; 54
 7ba:	07 fe       	sbrs	r0, 7
 7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <M_I2c_SendSlaveAddressRead+0x10>
 7be:	81 b1       	in	r24, 0x01	; 1
 7c0:	88 7f       	andi	r24, 0xF8	; 248
 7c2:	80 34       	cpi	r24, 0x40	; 64
 7c4:	e1 f7       	brne	.-8      	; 0x7be <M_I2c_SendSlaveAddressRead+0x16>
 7c6:	8f e3       	ldi	r24, 0x3F	; 63
 7c8:	9c e9       	ldi	r25, 0x9C	; 156
 7ca:	01 97       	sbiw	r24, 0x01	; 1
 7cc:	f1 f7       	brne	.-4      	; 0x7ca <M_I2c_SendSlaveAddressRead+0x22>
 7ce:	00 c0       	rjmp	.+0      	; 0x7d0 <M_I2c_SendSlaveAddressRead+0x28>
 7d0:	00 00       	nop
 7d2:	08 95       	ret

000007d4 <M_I2c_SendSByte>:
 7d4:	83 b9       	out	0x03, r24	; 3
 7d6:	86 b7       	in	r24, 0x36	; 54
 7d8:	8f 7d       	andi	r24, 0xDF	; 223
 7da:	86 bf       	out	0x36, r24	; 54
 7dc:	86 b7       	in	r24, 0x36	; 54
 7de:	80 68       	ori	r24, 0x80	; 128
 7e0:	86 bf       	out	0x36, r24	; 54
 7e2:	06 b6       	in	r0, 0x36	; 54
 7e4:	07 fe       	sbrs	r0, 7
 7e6:	fd cf       	rjmp	.-6      	; 0x7e2 <M_I2c_SendSByte+0xe>
 7e8:	81 b1       	in	r24, 0x01	; 1
 7ea:	88 7f       	andi	r24, 0xF8	; 248
 7ec:	88 32       	cpi	r24, 0x28	; 40
 7ee:	e1 f7       	brne	.-8      	; 0x7e8 <M_I2c_SendSByte+0x14>
 7f0:	8f e3       	ldi	r24, 0x3F	; 63
 7f2:	9c e9       	ldi	r25, 0x9C	; 156
 7f4:	01 97       	sbiw	r24, 0x01	; 1
 7f6:	f1 f7       	brne	.-4      	; 0x7f4 <M_I2c_SendSByte+0x20>
 7f8:	00 c0       	rjmp	.+0      	; 0x7fa <M_I2c_SendSByte+0x26>
 7fa:	00 00       	nop
 7fc:	08 95       	ret

000007fe <M_I2c_ReadByteNoAck>:
u8 M_I2c_ReadByteNoAck()
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 7fe:	84 e8       	ldi	r24, 0x84	; 132
 800:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,TWINT) == 0);
 802:	06 b6       	in	r0, 0x36	; 54
 804:	07 fe       	sbrs	r0, 7
 806:	fd cf       	rjmp	.-6      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	return TWDR;
 808:	83 b1       	in	r24, 0x03	; 3
}
 80a:	08 95       	ret

0000080c <M_I2c_RepeatedStart>:
void M_I2c_RepeatedStart(void)
{
	SetBit(TWCR,5);
 80c:	86 b7       	in	r24, 0x36	; 54
 80e:	80 62       	ori	r24, 0x20	; 32
 810:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);                  //   to clear the flag bit
 812:	86 b7       	in	r24, 0x36	; 54
 814:	80 68       	ori	r24, 0x80	; 128
 816:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,7) == 0);
 818:	06 b6       	in	r0, 0x36	; 54
 81a:	07 fe       	sbrs	r0, 7
 81c:	fd cf       	rjmp	.-6      	; 0x818 <M_I2c_RepeatedStart+0xc>
	while((TWSR & 0xF8) != REP_START_ACK);
 81e:	81 b1       	in	r24, 0x01	; 1
 820:	88 7f       	andi	r24, 0xF8	; 248
 822:	80 31       	cpi	r24, 0x10	; 16
 824:	e1 f7       	brne	.-8      	; 0x81e <M_I2c_RepeatedStart+0x12>
}
 826:	08 95       	ret

00000828 <M_I2c_StopCondition>:
//  	SetBit(TWCR,7);                  //   to clear the flag bit
//  	SetBit(TWCR,4);
// // 	SetBit(TWCR,2);	
	//while(GetBit(TWCR,7) == 0);
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	SetBit(TWCR,4);
 828:	86 b7       	in	r24, 0x36	; 54
 82a:	80 61       	ori	r24, 0x10	; 16
 82c:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);
 82e:	86 b7       	in	r24, 0x36	; 54
 830:	80 68       	ori	r24, 0x80	; 128
 832:	86 bf       	out	0x36, r24	; 54
 834:	8f e9       	ldi	r24, 0x9F	; 159
 836:	9f e0       	ldi	r25, 0x0F	; 15
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	f1 f7       	brne	.-4      	; 0x838 <M_I2c_StopCondition+0x10>
 83c:	00 c0       	rjmp	.+0      	; 0x83e <M_I2c_StopCondition+0x16>
 83e:	00 00       	nop
 840:	08 95       	ret

00000842 <M_Pwm1_Init>:
	
}
void M_Pwm1_SetDutyCycle		(f32 Local_f32_DesiredDutyCycle)
{
	OCR1A = (((Local_f32_DesiredDutyCycle * ICR1)/100)-1);
}
 842:	81 b3       	in	r24, 0x11	; 17
 844:	80 62       	ori	r24, 0x20	; 32
 846:	81 bb       	out	0x11, r24	; 17
 848:	8f b5       	in	r24, 0x2f	; 47
 84a:	80 68       	ori	r24, 0x80	; 128
 84c:	8f bd       	out	0x2f, r24	; 47
 84e:	8f b5       	in	r24, 0x2f	; 47
 850:	8f 7b       	andi	r24, 0xBF	; 191
 852:	8f bd       	out	0x2f, r24	; 47
 854:	8e b5       	in	r24, 0x2e	; 46
 856:	80 61       	ori	r24, 0x10	; 16
 858:	8e bd       	out	0x2e, r24	; 46
 85a:	8e b5       	in	r24, 0x2e	; 46
 85c:	88 60       	ori	r24, 0x08	; 8
 85e:	8e bd       	out	0x2e, r24	; 46
 860:	8f b5       	in	r24, 0x2f	; 47
 862:	82 60       	ori	r24, 0x02	; 2
 864:	8f bd       	out	0x2f, r24	; 47
 866:	8f b5       	in	r24, 0x2f	; 47
 868:	8e 7f       	andi	r24, 0xFE	; 254
 86a:	8f bd       	out	0x2f, r24	; 47
 86c:	08 95       	ret

0000086e <M_Pwm1_SetFrequency>:
void M_Pwm1_SetFrequency		(u16 Local_u16_DesiredFrequency)
{
	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Local_u16_DesiredFrequency * TIMER1_PRESCALER));
 86e:	00 24       	eor	r0, r0
 870:	96 95       	lsr	r25
 872:	87 95       	ror	r24
 874:	07 94       	ror	r0
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	07 94       	ror	r0
 87c:	98 2f       	mov	r25, r24
 87e:	80 2d       	mov	r24, r0
 880:	9c 01       	movw	r18, r24
 882:	40 e0       	ldi	r20, 0x00	; 0
 884:	50 e0       	ldi	r21, 0x00	; 0
 886:	60 e0       	ldi	r22, 0x00	; 0
 888:	74 e2       	ldi	r23, 0x24	; 36
 88a:	84 ef       	ldi	r24, 0xF4	; 244
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 94 7f 04 	call	0x8fe	; 0x8fe <__divmodsi4>
 892:	37 bd       	out	0x27, r19	; 39
 894:	26 bd       	out	0x26, r18	; 38
 896:	08 95       	ret

00000898 <M_Pwm2_Init>:
}


void M_Pwm2_Init				(void)
{
	M_Dio_PinMode(PD7,OUTPUT);
 898:	61 e0       	ldi	r22, 0x01	; 1
 89a:	8f e2       	ldi	r24, 0x2F	; 47
 89c:	0e 94 03 02 	call	0x406	; 0x406 <M_Dio_PinMode>

	#if			PWM2_MODE		==		FAST_PWM
	SetBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
 8a0:	85 b5       	in	r24, 0x25	; 37
 8a2:	88 60       	ori	r24, 0x08	; 8
 8a4:	85 bd       	out	0x25, r24	; 37
 8a6:	85 b5       	in	r24, 0x25	; 37
 8a8:	80 64       	ori	r24, 0x40	; 64
 8aa:	85 bd       	out	0x25, r24	; 37
	#elif		PWM2_MODE		==		PHASE_CORRECT
	ClrBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
	#endif
	
	#if			OUTPUT_MODE		==		NON_INVERTED
	SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
 8ac:	85 b5       	in	r24, 0x25	; 37
 8ae:	80 62       	ori	r24, 0x20	; 32
 8b0:	85 bd       	out	0x25, r24	; 37
 8b2:	85 b5       	in	r24, 0x25	; 37
 8b4:	8f 7e       	andi	r24, 0xEF	; 239
 8b6:	85 bd       	out	0x25, r24	; 37
 8b8:	08 95       	ret

000008ba <__udivmodsi4>:
 8ba:	a1 e2       	ldi	r26, 0x21	; 33
 8bc:	1a 2e       	mov	r1, r26
 8be:	aa 1b       	sub	r26, r26
 8c0:	bb 1b       	sub	r27, r27
 8c2:	fd 01       	movw	r30, r26
 8c4:	0d c0       	rjmp	.+26     	; 0x8e0 <__udivmodsi4_ep>

000008c6 <__udivmodsi4_loop>:
 8c6:	aa 1f       	adc	r26, r26
 8c8:	bb 1f       	adc	r27, r27
 8ca:	ee 1f       	adc	r30, r30
 8cc:	ff 1f       	adc	r31, r31
 8ce:	a2 17       	cp	r26, r18
 8d0:	b3 07       	cpc	r27, r19
 8d2:	e4 07       	cpc	r30, r20
 8d4:	f5 07       	cpc	r31, r21
 8d6:	20 f0       	brcs	.+8      	; 0x8e0 <__udivmodsi4_ep>
 8d8:	a2 1b       	sub	r26, r18
 8da:	b3 0b       	sbc	r27, r19
 8dc:	e4 0b       	sbc	r30, r20
 8de:	f5 0b       	sbc	r31, r21

000008e0 <__udivmodsi4_ep>:
 8e0:	66 1f       	adc	r22, r22
 8e2:	77 1f       	adc	r23, r23
 8e4:	88 1f       	adc	r24, r24
 8e6:	99 1f       	adc	r25, r25
 8e8:	1a 94       	dec	r1
 8ea:	69 f7       	brne	.-38     	; 0x8c6 <__udivmodsi4_loop>
 8ec:	60 95       	com	r22
 8ee:	70 95       	com	r23
 8f0:	80 95       	com	r24
 8f2:	90 95       	com	r25
 8f4:	9b 01       	movw	r18, r22
 8f6:	ac 01       	movw	r20, r24
 8f8:	bd 01       	movw	r22, r26
 8fa:	cf 01       	movw	r24, r30
 8fc:	08 95       	ret

000008fe <__divmodsi4>:
 8fe:	05 2e       	mov	r0, r21
 900:	97 fb       	bst	r25, 7
 902:	1e f4       	brtc	.+6      	; 0x90a <__divmodsi4+0xc>
 904:	00 94       	com	r0
 906:	0e 94 96 04 	call	0x92c	; 0x92c <__negsi2>
 90a:	57 fd       	sbrc	r21, 7
 90c:	07 d0       	rcall	.+14     	; 0x91c <__divmodsi4_neg2>
 90e:	0e 94 5d 04 	call	0x8ba	; 0x8ba <__udivmodsi4>
 912:	07 fc       	sbrc	r0, 7
 914:	03 d0       	rcall	.+6      	; 0x91c <__divmodsi4_neg2>
 916:	4e f4       	brtc	.+18     	; 0x92a <__divmodsi4_exit>
 918:	0c 94 96 04 	jmp	0x92c	; 0x92c <__negsi2>

0000091c <__divmodsi4_neg2>:
 91c:	50 95       	com	r21
 91e:	40 95       	com	r20
 920:	30 95       	com	r19
 922:	21 95       	neg	r18
 924:	3f 4f       	sbci	r19, 0xFF	; 255
 926:	4f 4f       	sbci	r20, 0xFF	; 255
 928:	5f 4f       	sbci	r21, 0xFF	; 255

0000092a <__divmodsi4_exit>:
 92a:	08 95       	ret

0000092c <__negsi2>:
 92c:	90 95       	com	r25
 92e:	80 95       	com	r24
 930:	70 95       	com	r23
 932:	61 95       	neg	r22
 934:	7f 4f       	sbci	r23, 0xFF	; 255
 936:	8f 4f       	sbci	r24, 0xFF	; 255
 938:	9f 4f       	sbci	r25, 0xFF	; 255
 93a:	08 95       	ret

0000093c <_exit>:
 93c:	f8 94       	cli

0000093e <__stop_program>:
 93e:	ff cf       	rjmp	.-2      	; 0x93e <__stop_program>
