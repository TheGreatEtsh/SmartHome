
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  00001d1a  00001dae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001c2  008001c2  00001f10  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000420  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004c8f  00000000  00000000  0000239c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000154e  00000000  00000000  0000702b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000026ba  00000000  00000000  00008579  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000860  00000000  00000000  0000ac34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e6b  00000000  00000000  0000b494  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002d26  00000000  00000000  0000c2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000368  00000000  00000000  0000f025  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 03 	call	0x63a	; 0x63a <main>
      8a:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <A_Main_ExtInt0Exc>:
	H_Eeprom_Write('2',0,102);
	H_Eeprom_Write('3',0,103);	
	H_Eeprom_Write('1',0,104);	
	H_Eeprom_Write('2',0,105);	
	H_Eeprom_Write('3',0,106);	
	H_Eeprom_Write('4',0,107);		
      92:	08 95       	ret

00000094 <AddUser>:
      94:	af 92       	push	r10
      96:	bf 92       	push	r11
      98:	cf 92       	push	r12
      9a:	df 92       	push	r13
      9c:	ef 92       	push	r14
      9e:	ff 92       	push	r15
      a0:	0f 93       	push	r16
      a2:	1f 93       	push	r17
      a4:	cf 93       	push	r28
      a6:	df 93       	push	r29
      a8:	8c 01       	movw	r16, r24
      aa:	7b 01       	movw	r14, r22
      ac:	64 e6       	ldi	r22, 0x64	; 100
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
      b4:	b8 2e       	mov	r11, r24
      b6:	29 e0       	ldi	r18, 0x09	; 9
      b8:	28 17       	cp	r18, r24
      ba:	08 f4       	brcc	.+2      	; 0xbe <AddUser+0x2a>
      bc:	c8 c0       	rjmp	.+400    	; 0x24e <AddUser+0x1ba>
      be:	81 11       	cpse	r24, r1
      c0:	2f c0       	rjmp	.+94     	; 0x120 <AddUser+0x8c>
      c2:	6c c0       	rjmp	.+216    	; 0x19c <AddUser+0x108>
      c4:	dd 2d       	mov	r29, r13
      c6:	dd 0f       	add	r29, r29
      c8:	dd 0f       	add	r29, r29
      ca:	dd 0f       	add	r29, r29
      cc:	dd 19       	sub	r29, r13
      ce:	0f 2e       	mov	r0, r31
      d0:	f3 e0       	ldi	r31, 0x03	; 3
      d2:	cf 2e       	mov	r12, r31
      d4:	f0 2d       	mov	r31, r0
      d6:	c0 e0       	ldi	r28, 0x00	; 0
      d8:	0d c0       	rjmp	.+26     	; 0xf4 <AddUser+0x60>
      da:	6c 2f       	mov	r22, r28
      dc:	6d 0f       	add	r22, r29
      de:	80 e0       	ldi	r24, 0x00	; 0
      e0:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
      e4:	f8 01       	movw	r30, r16
      e6:	ec 0f       	add	r30, r28
      e8:	f1 1d       	adc	r31, r1
      ea:	90 81       	ld	r25, Z
      ec:	89 13       	cpse	r24, r25
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <AddUser+0x5e>
      f0:	ca 94       	dec	r12
      f2:	cf 5f       	subi	r28, 0xFF	; 255
      f4:	c3 30       	cpi	r28, 0x03	; 3
      f6:	88 f3       	brcs	.-30     	; 0xda <AddUser+0x46>
      f8:	c1 10       	cpse	r12, r1
      fa:	10 c0       	rjmp	.+32     	; 0x11c <AddUser+0x88>
      fc:	a3 94       	inc	r10
      fe:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     102:	80 e6       	ldi	r24, 0x60	; 96
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     10a:	8f ef       	ldi	r24, 0xFF	; 255
     10c:	99 e6       	ldi	r25, 0x69	; 105
     10e:	28 e1       	ldi	r18, 0x18	; 24
     110:	81 50       	subi	r24, 0x01	; 1
     112:	90 40       	sbci	r25, 0x00	; 0
     114:	20 40       	sbci	r18, 0x00	; 0
     116:	e1 f7       	brne	.-8      	; 0x110 <AddUser+0x7c>
     118:	00 c0       	rjmp	.+0      	; 0x11a <AddUser+0x86>
     11a:	00 00       	nop
     11c:	d3 94       	inc	r13
     11e:	02 c0       	rjmp	.+4      	; 0x124 <AddUser+0x90>
     120:	a1 2c       	mov	r10, r1
     122:	d1 2c       	mov	r13, r1
     124:	db 14       	cp	r13, r11
     126:	70 f2       	brcs	.-100    	; 0xc4 <AddUser+0x30>
     128:	a1 10       	cpse	r10, r1
     12a:	a8 c0       	rjmp	.+336    	; 0x27c <AddUser+0x1e8>
     12c:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     130:	81 e7       	ldi	r24, 0x71	; 113
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     138:	8f ef       	ldi	r24, 0xFF	; 255
     13a:	99 e6       	ldi	r25, 0x69	; 105
     13c:	28 e1       	ldi	r18, 0x18	; 24
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	90 40       	sbci	r25, 0x00	; 0
     142:	20 40       	sbci	r18, 0x00	; 0
     144:	e1 f7       	brne	.-8      	; 0x13e <AddUser+0xaa>
     146:	00 c0       	rjmp	.+0      	; 0x148 <AddUser+0xb4>
     148:	00 00       	nop
     14a:	db 2d       	mov	r29, r11
     14c:	dd 0f       	add	r29, r29
     14e:	dd 0f       	add	r29, r29
     150:	dd 0f       	add	r29, r29
     152:	db 19       	sub	r29, r11
     154:	c0 e0       	ldi	r28, 0x00	; 0
     156:	0a c0       	rjmp	.+20     	; 0x16c <AddUser+0xd8>
     158:	4c 2f       	mov	r20, r28
     15a:	4d 0f       	add	r20, r29
     15c:	f8 01       	movw	r30, r16
     15e:	ec 0f       	add	r30, r28
     160:	f1 1d       	adc	r31, r1
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	0e 94 78 04 	call	0x8f0	; 0x8f0 <H_Eeprom_Write>
     16a:	cf 5f       	subi	r28, 0xFF	; 255
     16c:	c3 30       	cpi	r28, 0x03	; 3
     16e:	a0 f3       	brcs	.-24     	; 0x158 <AddUser+0xc4>
     170:	c0 e0       	ldi	r28, 0x00	; 0
     172:	0b c0       	rjmp	.+22     	; 0x18a <AddUser+0xf6>
     174:	4c 2f       	mov	r20, r28
     176:	4d 0f       	add	r20, r29
     178:	4d 5f       	subi	r20, 0xFD	; 253
     17a:	f7 01       	movw	r30, r14
     17c:	ec 0f       	add	r30, r28
     17e:	f1 1d       	adc	r31, r1
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	80 81       	ld	r24, Z
     184:	0e 94 78 04 	call	0x8f0	; 0x8f0 <H_Eeprom_Write>
     188:	cf 5f       	subi	r28, 0xFF	; 255
     18a:	c4 30       	cpi	r28, 0x04	; 4
     18c:	98 f3       	brcs	.-26     	; 0x174 <AddUser+0xe0>
     18e:	44 e6       	ldi	r20, 0x64	; 100
     190:	60 e0       	ldi	r22, 0x00	; 0
     192:	81 e0       	ldi	r24, 0x01	; 1
     194:	8b 0d       	add	r24, r11
     196:	0e 94 78 04 	call	0x8f0	; 0x8f0 <H_Eeprom_Write>
     19a:	70 c0       	rjmp	.+224    	; 0x27c <AddUser+0x1e8>
     19c:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     1a0:	81 e7       	ldi	r24, 0x71	; 113
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     1a8:	8f ef       	ldi	r24, 0xFF	; 255
     1aa:	99 e6       	ldi	r25, 0x69	; 105
     1ac:	28 e1       	ldi	r18, 0x18	; 24
     1ae:	81 50       	subi	r24, 0x01	; 1
     1b0:	90 40       	sbci	r25, 0x00	; 0
     1b2:	20 40       	sbci	r18, 0x00	; 0
     1b4:	e1 f7       	brne	.-8      	; 0x1ae <AddUser+0x11a>
     1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <AddUser+0x124>
     1b8:	00 00       	nop
     1ba:	db 2d       	mov	r29, r11
     1bc:	dd 0f       	add	r29, r29
     1be:	dd 0f       	add	r29, r29
     1c0:	dd 0f       	add	r29, r29
     1c2:	db 19       	sub	r29, r11
     1c4:	c0 e0       	ldi	r28, 0x00	; 0
     1c6:	0a c0       	rjmp	.+20     	; 0x1dc <AddUser+0x148>
     1c8:	4c 2f       	mov	r20, r28
     1ca:	4d 0f       	add	r20, r29
     1cc:	f8 01       	movw	r30, r16
     1ce:	ec 0f       	add	r30, r28
     1d0:	f1 1d       	adc	r31, r1
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	80 81       	ld	r24, Z
     1d6:	0e 94 78 04 	call	0x8f0	; 0x8f0 <H_Eeprom_Write>
     1da:	cf 5f       	subi	r28, 0xFF	; 255
     1dc:	c3 30       	cpi	r28, 0x03	; 3
     1de:	a0 f3       	brcs	.-24     	; 0x1c8 <AddUser+0x134>
     1e0:	c0 e0       	ldi	r28, 0x00	; 0
     1e2:	0b c0       	rjmp	.+22     	; 0x1fa <AddUser+0x166>
     1e4:	4c 2f       	mov	r20, r28
     1e6:	4d 0f       	add	r20, r29
     1e8:	4d 5f       	subi	r20, 0xFD	; 253
     1ea:	f7 01       	movw	r30, r14
     1ec:	ec 0f       	add	r30, r28
     1ee:	f1 1d       	adc	r31, r1
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	80 81       	ld	r24, Z
     1f4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <H_Eeprom_Write>
     1f8:	cf 5f       	subi	r28, 0xFF	; 255
     1fa:	c4 30       	cpi	r28, 0x04	; 4
     1fc:	98 f3       	brcs	.-26     	; 0x1e4 <AddUser+0x150>
     1fe:	44 e6       	ldi	r20, 0x64	; 100
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	8b 0d       	add	r24, r11
     206:	0e 94 78 04 	call	0x8f0	; 0x8f0 <H_Eeprom_Write>
     20a:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     20e:	8d e7       	ldi	r24, 0x7D	; 125
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	81 e0       	ldi	r24, 0x01	; 1
     21a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     21e:	88 e8       	ldi	r24, 0x88	; 136
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     226:	64 e6       	ldi	r22, 0x64	; 100
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
     22e:	68 2f       	mov	r22, r24
     230:	70 e0       	ldi	r23, 0x00	; 0
     232:	80 e0       	ldi	r24, 0x00	; 0
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 90 07 	call	0xf20	; 0xf20 <H_Lcd_WriteNumber>
     23a:	8f ef       	ldi	r24, 0xFF	; 255
     23c:	99 e6       	ldi	r25, 0x69	; 105
     23e:	28 e1       	ldi	r18, 0x18	; 24
     240:	81 50       	subi	r24, 0x01	; 1
     242:	90 40       	sbci	r25, 0x00	; 0
     244:	20 40       	sbci	r18, 0x00	; 0
     246:	e1 f7       	brne	.-8      	; 0x240 <AddUser+0x1ac>
     248:	00 c0       	rjmp	.+0      	; 0x24a <AddUser+0x1b6>
     24a:	00 00       	nop
     24c:	17 c0       	rjmp	.+46     	; 0x27c <AddUser+0x1e8>
     24e:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     252:	85 e9       	ldi	r24, 0x95	; 149
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     262:	81 ea       	ldi	r24, 0xA1	; 161
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	99 e6       	ldi	r25, 0x69	; 105
     26e:	28 e1       	ldi	r18, 0x18	; 24
     270:	81 50       	subi	r24, 0x01	; 1
     272:	90 40       	sbci	r25, 0x00	; 0
     274:	20 40       	sbci	r18, 0x00	; 0
     276:	e1 f7       	brne	.-8      	; 0x270 <AddUser+0x1dc>
     278:	00 c0       	rjmp	.+0      	; 0x27a <AddUser+0x1e6>
     27a:	00 00       	nop
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	ff 90       	pop	r15
     286:	ef 90       	pop	r14
     288:	df 90       	pop	r13
     28a:	cf 90       	pop	r12
     28c:	bf 90       	pop	r11
     28e:	af 90       	pop	r10
     290:	08 95       	ret

00000292 <AdminLogin>:
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
     296:	0f 93       	push	r16
     298:	1f 93       	push	r17
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	7c 01       	movw	r14, r24
     2a0:	8b 01       	movw	r16, r22
     2a2:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     2a6:	c0 e0       	ldi	r28, 0x00	; 0
     2a8:	d0 e0       	ldi	r29, 0x00	; 0
     2aa:	0d c0       	rjmp	.+26     	; 0x2c6 <AdminLogin+0x34>
     2ac:	65 e6       	ldi	r22, 0x65	; 101
     2ae:	6c 0f       	add	r22, r28
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
     2b6:	f7 01       	movw	r30, r14
     2b8:	ec 0f       	add	r30, r28
     2ba:	f1 1d       	adc	r31, r1
     2bc:	90 81       	ld	r25, Z
     2be:	89 13       	cpse	r24, r25
     2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <AdminLogin+0x32>
     2c2:	df 5f       	subi	r29, 0xFF	; 255
     2c4:	cf 5f       	subi	r28, 0xFF	; 255
     2c6:	c3 30       	cpi	r28, 0x03	; 3
     2c8:	88 f3       	brcs	.-30     	; 0x2ac <AdminLogin+0x1a>
     2ca:	c0 e0       	ldi	r28, 0x00	; 0
     2cc:	f1 2c       	mov	r15, r1
     2ce:	0d c0       	rjmp	.+26     	; 0x2ea <AdminLogin+0x58>
     2d0:	68 e6       	ldi	r22, 0x68	; 104
     2d2:	6c 0f       	add	r22, r28
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
     2da:	f8 01       	movw	r30, r16
     2dc:	ec 0f       	add	r30, r28
     2de:	f1 1d       	adc	r31, r1
     2e0:	90 81       	ld	r25, Z
     2e2:	89 13       	cpse	r24, r25
     2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <AdminLogin+0x56>
     2e6:	f3 94       	inc	r15
     2e8:	cf 5f       	subi	r28, 0xFF	; 255
     2ea:	c4 30       	cpi	r28, 0x04	; 4
     2ec:	88 f3       	brcs	.-30     	; 0x2d0 <AdminLogin+0x3e>
     2ee:	d3 30       	cpi	r29, 0x03	; 3
     2f0:	91 f4       	brne	.+36     	; 0x316 <AdminLogin+0x84>
     2f2:	24 e0       	ldi	r18, 0x04	; 4
     2f4:	f2 12       	cpse	r15, r18
     2f6:	0f c0       	rjmp	.+30     	; 0x316 <AdminLogin+0x84>
     2f8:	80 ec       	ldi	r24, 0xC0	; 192
     2fa:	90 e0       	ldi	r25, 0x00	; 0
     2fc:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     300:	8f ef       	ldi	r24, 0xFF	; 255
     302:	99 e6       	ldi	r25, 0x69	; 105
     304:	28 e1       	ldi	r18, 0x18	; 24
     306:	81 50       	subi	r24, 0x01	; 1
     308:	90 40       	sbci	r25, 0x00	; 0
     30a:	20 40       	sbci	r18, 0x00	; 0
     30c:	e1 f7       	brne	.-8      	; 0x306 <AdminLogin+0x74>
     30e:	00 c0       	rjmp	.+0      	; 0x310 <AdminLogin+0x7e>
     310:	00 00       	nop
     312:	c0 e0       	ldi	r28, 0x00	; 0
     314:	47 c0       	rjmp	.+142    	; 0x3a4 <AdminLogin+0x112>
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	f8 12       	cpse	r15, r24
     31a:	11 c0       	rjmp	.+34     	; 0x33e <AdminLogin+0xac>
     31c:	d3 30       	cpi	r29, 0x03	; 3
     31e:	79 f0       	breq	.+30     	; 0x33e <AdminLogin+0xac>
     320:	80 e6       	ldi	r24, 0x60	; 96
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     328:	9f ef       	ldi	r25, 0xFF	; 255
     32a:	29 e6       	ldi	r18, 0x69	; 105
     32c:	88 e1       	ldi	r24, 0x18	; 24
     32e:	91 50       	subi	r25, 0x01	; 1
     330:	20 40       	sbci	r18, 0x00	; 0
     332:	80 40       	sbci	r24, 0x00	; 0
     334:	e1 f7       	brne	.-8      	; 0x32e <AdminLogin+0x9c>
     336:	00 c0       	rjmp	.+0      	; 0x338 <AdminLogin+0xa6>
     338:	00 00       	nop
     33a:	c1 e0       	ldi	r28, 0x01	; 1
     33c:	33 c0       	rjmp	.+102    	; 0x3a4 <AdminLogin+0x112>
     33e:	d3 30       	cpi	r29, 0x03	; 3
     340:	91 f4       	brne	.+36     	; 0x366 <AdminLogin+0xd4>
     342:	94 e0       	ldi	r25, 0x04	; 4
     344:	f9 16       	cp	r15, r25
     346:	79 f0       	breq	.+30     	; 0x366 <AdminLogin+0xd4>
     348:	81 ed       	ldi	r24, 0xD1	; 209
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     350:	2f ef       	ldi	r18, 0xFF	; 255
     352:	89 e6       	ldi	r24, 0x69	; 105
     354:	98 e1       	ldi	r25, 0x18	; 24
     356:	21 50       	subi	r18, 0x01	; 1
     358:	80 40       	sbci	r24, 0x00	; 0
     35a:	90 40       	sbci	r25, 0x00	; 0
     35c:	e1 f7       	brne	.-8      	; 0x356 <AdminLogin+0xc4>
     35e:	00 c0       	rjmp	.+0      	; 0x360 <AdminLogin+0xce>
     360:	00 00       	nop
     362:	c1 e0       	ldi	r28, 0x01	; 1
     364:	1f c0       	rjmp	.+62     	; 0x3a4 <AdminLogin+0x112>
     366:	d3 30       	cpi	r29, 0x03	; 3
     368:	d1 f0       	breq	.+52     	; 0x39e <AdminLogin+0x10c>
     36a:	24 e0       	ldi	r18, 0x04	; 4
     36c:	f2 16       	cp	r15, r18
     36e:	c9 f0       	breq	.+50     	; 0x3a2 <AdminLogin+0x110>
     370:	80 e6       	ldi	r24, 0x60	; 96
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     380:	81 ed       	ldi	r24, 0xD1	; 209
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     388:	8f ef       	ldi	r24, 0xFF	; 255
     38a:	99 e6       	ldi	r25, 0x69	; 105
     38c:	28 e1       	ldi	r18, 0x18	; 24
     38e:	81 50       	subi	r24, 0x01	; 1
     390:	90 40       	sbci	r25, 0x00	; 0
     392:	20 40       	sbci	r18, 0x00	; 0
     394:	e1 f7       	brne	.-8      	; 0x38e <AdminLogin+0xfc>
     396:	00 c0       	rjmp	.+0      	; 0x398 <AdminLogin+0x106>
     398:	00 00       	nop
     39a:	c1 e0       	ldi	r28, 0x01	; 1
     39c:	03 c0       	rjmp	.+6      	; 0x3a4 <AdminLogin+0x112>
     39e:	c0 e0       	ldi	r28, 0x00	; 0
     3a0:	01 c0       	rjmp	.+2      	; 0x3a4 <AdminLogin+0x112>
     3a2:	c0 e0       	ldi	r28, 0x00	; 0
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	95 ea       	ldi	r25, 0xA5	; 165
     3a8:	2e e0       	ldi	r18, 0x0E	; 14
     3aa:	81 50       	subi	r24, 0x01	; 1
     3ac:	90 40       	sbci	r25, 0x00	; 0
     3ae:	20 40       	sbci	r18, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <AdminLogin+0x118>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <AdminLogin+0x122>
     3b4:	00 00       	nop
     3b6:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     3ba:	8f ef       	ldi	r24, 0xFF	; 255
     3bc:	95 ea       	ldi	r25, 0xA5	; 165
     3be:	2e e0       	ldi	r18, 0x0E	; 14
     3c0:	81 50       	subi	r24, 0x01	; 1
     3c2:	90 40       	sbci	r25, 0x00	; 0
     3c4:	20 40       	sbci	r18, 0x00	; 0
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <AdminLogin+0x12e>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <AdminLogin+0x138>
     3ca:	00 00       	nop
     3cc:	8c 2f       	mov	r24, r28
     3ce:	df 91       	pop	r29
     3d0:	cf 91       	pop	r28
     3d2:	1f 91       	pop	r17
     3d4:	0f 91       	pop	r16
     3d6:	ff 90       	pop	r15
     3d8:	ef 90       	pop	r14
     3da:	08 95       	ret

000003dc <UserLogin>:
     3dc:	af 92       	push	r10
     3de:	bf 92       	push	r11
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
     3f0:	7c 01       	movw	r14, r24
     3f2:	8b 01       	movw	r16, r22
     3f4:	64 e6       	ldi	r22, 0x64	; 100
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
     3fc:	b8 2e       	mov	r11, r24
     3fe:	81 11       	cpse	r24, r1
     400:	33 c0       	rjmp	.+102    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     402:	51 c0       	rjmp	.+162    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
     404:	dd 2d       	mov	r29, r13
     406:	dd 0f       	add	r29, r29
     408:	dd 0f       	add	r29, r29
     40a:	dd 0f       	add	r29, r29
     40c:	dd 19       	sub	r29, r13
     40e:	c0 e0       	ldi	r28, 0x00	; 0
     410:	c1 2c       	mov	r12, r1
     412:	0d c0       	rjmp	.+26     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
     414:	6c 2f       	mov	r22, r28
     416:	6d 0f       	add	r22, r29
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
     41e:	f7 01       	movw	r30, r14
     420:	ec 0f       	add	r30, r28
     422:	f1 1d       	adc	r31, r1
     424:	90 81       	ld	r25, Z
     426:	89 13       	cpse	r24, r25
     428:	01 c0       	rjmp	.+2      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
     42a:	c3 94       	inc	r12
     42c:	cf 5f       	subi	r28, 0xFF	; 255
     42e:	c3 30       	cpi	r28, 0x03	; 3
     430:	88 f3       	brcs	.-30     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     432:	c0 e0       	ldi	r28, 0x00	; 0
     434:	a1 2c       	mov	r10, r1
     436:	0e c0       	rjmp	.+28     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
     438:	6c 2f       	mov	r22, r28
     43a:	6d 0f       	add	r22, r29
     43c:	6d 5f       	subi	r22, 0xFD	; 253
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
     444:	f8 01       	movw	r30, r16
     446:	ec 0f       	add	r30, r28
     448:	f1 1d       	adc	r31, r1
     44a:	90 81       	ld	r25, Z
     44c:	89 13       	cpse	r24, r25
     44e:	01 c0       	rjmp	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
     450:	a3 94       	inc	r10
     452:	cf 5f       	subi	r28, 0xFF	; 255
     454:	c4 30       	cpi	r28, 0x04	; 4
     456:	80 f3       	brcs	.-32     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     458:	23 e0       	ldi	r18, 0x03	; 3
     45a:	c2 12       	cpse	r12, r18
     45c:	03 c0       	rjmp	.+6      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
     45e:	84 e0       	ldi	r24, 0x04	; 4
     460:	a8 16       	cp	r10, r24
     462:	39 f0       	breq	.+14     	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     464:	d3 94       	inc	r13
     466:	01 c0       	rjmp	.+2      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
     468:	d1 2c       	mov	r13, r1
     46a:	db 14       	cp	r13, r11
     46c:	58 f2       	brcs	.-106    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     46e:	a1 2c       	mov	r10, r1
     470:	c1 2c       	mov	r12, r1
     472:	93 e0       	ldi	r25, 0x03	; 3
     474:	c9 12       	cpse	r12, r25
     476:	09 c0       	rjmp	.+18     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     478:	24 e0       	ldi	r18, 0x04	; 4
     47a:	a2 12       	cpse	r10, r18
     47c:	06 c0       	rjmp	.+12     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
     47e:	80 ec       	ldi	r24, 0xC0	; 192
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	26 c0       	rjmp	.+76     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     48a:	80 e6       	ldi	r24, 0x60	; 96
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     492:	60 e0       	ldi	r22, 0x00	; 0
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     49a:	82 ee       	ldi	r24, 0xE2	; 226
     49c:	90 e0       	ldi	r25, 0x00	; 0
     49e:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     4a2:	81 e0       	ldi	r24, 0x01	; 1
     4a4:	18 c0       	rjmp	.+48     	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
     4a6:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     4aa:	8e ee       	ldi	r24, 0xEE	; 238
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     4ba:	80 e0       	ldi	r24, 0x00	; 0
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     4c2:	8f ef       	ldi	r24, 0xFF	; 255
     4c4:	93 ed       	ldi	r25, 0xD3	; 211
     4c6:	20 e3       	ldi	r18, 0x30	; 48
     4c8:	81 50       	subi	r24, 0x01	; 1
     4ca:	90 40       	sbci	r25, 0x00	; 0
     4cc:	20 40       	sbci	r18, 0x00	; 0
     4ce:	e1 f7       	brne	.-8      	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
     4d0:	00 c0       	rjmp	.+0      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
     4d2:	00 00       	nop
     4d4:	82 e0       	ldi	r24, 0x02	; 2
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	ef 90       	pop	r14
     4e2:	df 90       	pop	r13
     4e4:	cf 90       	pop	r12
     4e6:	bf 90       	pop	r11
     4e8:	af 90       	pop	r10
     4ea:	08 95       	ret

000004ec <InputID>:
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	8c 01       	movw	r16, r24
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
     4fe:	0b c0       	rjmp	.+22     	; 0x516 <InputID+0x2a>
     500:	0e 94 ee 04 	call	0x9dc	; 0x9dc <H_KeyPad_Read>
     504:	88 23       	and	r24, r24
     506:	39 f0       	breq	.+14     	; 0x516 <InputID+0x2a>
     508:	f8 01       	movw	r30, r16
     50a:	ec 0f       	add	r30, r28
     50c:	f1 1d       	adc	r31, r1
     50e:	80 83       	st	Z, r24
     510:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_Lcd_WriteCharacter>
     514:	cf 5f       	subi	r28, 0xFF	; 255
     516:	c3 30       	cpi	r28, 0x03	; 3
     518:	98 f3       	brcs	.-26     	; 0x500 <InputID+0x14>
     51a:	2f ef       	ldi	r18, 0xFF	; 255
     51c:	85 ea       	ldi	r24, 0xA5	; 165
     51e:	9e e0       	ldi	r25, 0x0E	; 14
     520:	21 50       	subi	r18, 0x01	; 1
     522:	80 40       	sbci	r24, 0x00	; 0
     524:	90 40       	sbci	r25, 0x00	; 0
     526:	e1 f7       	brne	.-8      	; 0x520 <InputID+0x34>
     528:	00 c0       	rjmp	.+0      	; 0x52a <InputID+0x3e>
     52a:	00 00       	nop
     52c:	cf 91       	pop	r28
     52e:	1f 91       	pop	r17
     530:	0f 91       	pop	r16
     532:	08 95       	ret

00000534 <InputPassword>:
     534:	0f 93       	push	r16
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	8c 01       	movw	r16, r24
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	0c c0       	rjmp	.+24     	; 0x560 <InputPassword+0x2c>
     548:	0e 94 ee 04 	call	0x9dc	; 0x9dc <H_KeyPad_Read>
     54c:	88 23       	and	r24, r24
     54e:	41 f0       	breq	.+16     	; 0x560 <InputPassword+0x2c>
     550:	f8 01       	movw	r30, r16
     552:	ec 0f       	add	r30, r28
     554:	f1 1d       	adc	r31, r1
     556:	80 83       	st	Z, r24
     558:	8a e2       	ldi	r24, 0x2A	; 42
     55a:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_Lcd_WriteCharacter>
     55e:	cf 5f       	subi	r28, 0xFF	; 255
     560:	c4 30       	cpi	r28, 0x04	; 4
     562:	90 f3       	brcs	.-28     	; 0x548 <InputPassword+0x14>
     564:	2f ef       	ldi	r18, 0xFF	; 255
     566:	85 ea       	ldi	r24, 0xA5	; 165
     568:	9e e0       	ldi	r25, 0x0E	; 14
     56a:	21 50       	subi	r18, 0x01	; 1
     56c:	80 40       	sbci	r24, 0x00	; 0
     56e:	90 40       	sbci	r25, 0x00	; 0
     570:	e1 f7       	brne	.-8      	; 0x56a <InputPassword+0x36>
     572:	00 c0       	rjmp	.+0      	; 0x574 <InputPassword+0x40>
     574:	00 00       	nop
     576:	cf 91       	pop	r28
     578:	1f 91       	pop	r17
     57a:	0f 91       	pop	r16
     57c:	08 95       	ret

0000057e <SwitchDoor>:
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	ec 01       	movw	r28, r24
     584:	88 81       	ld	r24, Y
     586:	81 11       	cpse	r24, r1
     588:	1c c0       	rjmp	.+56     	; 0x5c2 <SwitchDoor+0x44>
     58a:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     596:	8a e0       	ldi	r24, 0x0A	; 10
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     59e:	60 e0       	ldi	r22, 0x00	; 0
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	80 ef       	ldi	r24, 0xF0	; 240
     5a4:	92 e4       	ldi	r25, 0x42	; 66
     5a6:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <H_Servo_SetAngel>
     5aa:	2f ef       	ldi	r18, 0xFF	; 255
     5ac:	89 e6       	ldi	r24, 0x69	; 105
     5ae:	98 e1       	ldi	r25, 0x18	; 24
     5b0:	21 50       	subi	r18, 0x01	; 1
     5b2:	80 40       	sbci	r24, 0x00	; 0
     5b4:	90 40       	sbci	r25, 0x00	; 0
     5b6:	e1 f7       	brne	.-8      	; 0x5b0 <SwitchDoor+0x32>
     5b8:	00 c0       	rjmp	.+0      	; 0x5ba <SwitchDoor+0x3c>
     5ba:	00 00       	nop
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	88 83       	st	Y, r24
     5c0:	19 c0       	rjmp	.+50     	; 0x5f4 <SwitchDoor+0x76>
     5c2:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
     5ce:	89 e1       	ldi	r24, 0x19	; 25
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     5d6:	60 e0       	ldi	r22, 0x00	; 0
     5d8:	70 e0       	ldi	r23, 0x00	; 0
     5da:	cb 01       	movw	r24, r22
     5dc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <H_Servo_SetAngel>
     5e0:	2f ef       	ldi	r18, 0xFF	; 255
     5e2:	89 e6       	ldi	r24, 0x69	; 105
     5e4:	98 e1       	ldi	r25, 0x18	; 24
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	80 40       	sbci	r24, 0x00	; 0
     5ea:	90 40       	sbci	r25, 0x00	; 0
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <SwitchDoor+0x68>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <SwitchDoor+0x72>
     5f0:	00 00       	nop
     5f2:	18 82       	st	Y, r1
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <WelcomingMsg>:
}

void WelcomingMsg(void)
{
	H_Lcd_Clear();
     5fa:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
	H_Lcd_WriteString("Welcome to Smart");
     5fe:	88 e2       	ldi	r24, 0x28	; 40
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
	H_Lcd_GoTo(1,0);
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	81 e0       	ldi	r24, 0x01	; 1
     60a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
	H_Lcd_WriteString("Home Project");
     60e:	89 e3       	ldi	r24, 0x39	; 57
     610:	91 e0       	ldi	r25, 0x01	; 1
     612:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     616:	2f ef       	ldi	r18, 0xFF	; 255
     618:	87 ea       	ldi	r24, 0xA7	; 167
     61a:	91 e6       	ldi	r25, 0x61	; 97
     61c:	21 50       	subi	r18, 0x01	; 1
     61e:	80 40       	sbci	r24, 0x00	; 0
     620:	90 40       	sbci	r25, 0x00	; 0
     622:	e1 f7       	brne	.-8      	; 0x61c <WelcomingMsg+0x22>
     624:	00 c0       	rjmp	.+0      	; 0x626 <WelcomingMsg+0x2c>
     626:	00 00       	nop
	_delay_ms(2000);
	H_Lcd_Clear();
     628:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
     62c:	08 95       	ret

0000062e <CloseTheDoor>:
}

void CloseTheDoor(void)
{
	H_Servo_SetAngel(0);
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	cb 01       	movw	r24, r22
     634:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <H_Servo_SetAngel>
     638:	08 95       	ret

0000063a <main>:
/************************************************************************/
/*                                                                      */
/************************************************************************/

int main ()
{
     63a:	cf 93       	push	r28
     63c:	df 93       	push	r29
     63e:	cd b7       	in	r28, 0x3d	; 61
     640:	de b7       	in	r29, 0x3e	; 62
     642:	28 97       	sbiw	r28, 0x08	; 8
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	de bf       	out	0x3e, r29	; 62
     64a:	0f be       	out	0x3f, r0	; 63
     64c:	cd bf       	out	0x3d, r28	; 61
	H_Lcd_Init();
     64e:	0e 94 58 07 	call	0xeb0	; 0xeb0 <H_Lcd_Init>
	H_KeyPad_Init();
     652:	0e 94 ad 04 	call	0x95a	; 0x95a <H_KeyPad_Init>
	H_Eeprom_Init();
     656:	0e 94 75 04 	call	0x8ea	; 0x8ea <H_Eeprom_Init>
	H_DcMotor_Init();
     65a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <H_DcMotor_Init>
	H_Lm35_Init();
     65e:	0e 94 ab 08 	call	0x1156	; 0x1156 <H_Lm35_Init>
	H_Servo_Init();
     662:	0e 94 d6 08 	call	0x11ac	; 0x11ac <H_Servo_Init>
	H_Led_Init(LED_0);
     666:	82 e0       	ldi	r24, 0x02	; 2
     668:	0e 94 a7 08 	call	0x114e	; 0x114e <H_Led_Init>
	H_Led_Init(LED_1);
     66c:	83 e0       	ldi	r24, 0x03	; 3
     66e:	0e 94 a7 08 	call	0x114e	; 0x114e <H_Led_Init>
	H_Buzzer_Init();
     672:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <H_Buzzer_Init>
	H_PushButton_Init(PUSH_BUTTON_0);
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	0e 94 ae 08 	call	0x115c	; 0x115c <H_PushButton_Init>
	
	M_ExtInt_Init(INT0);
     67c:	86 e0       	ldi	r24, 0x06	; 6
     67e:	0e 94 03 0b 	call	0x1606	; 0x1606 <M_ExtInt_Init>
	
	M_ExtInt_SetCallBackInt0(A_Main_ExtInt0Exc);
     682:	89 e4       	ldi	r24, 0x49	; 73
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 31 0b 	call	0x1662	; 0x1662 <M_ExtInt_SetCallBackInt0>
	
	char NumberOfUsers = 0;

	NumberOfUsers = H_Eeprom_Read(0,100);
     68a:	64 e6       	ldi	r22, 0x64	; 100
     68c:	80 e0       	ldi	r24, 0x00	; 0
     68e:	0e 94 92 04 	call	0x924	; 0x924 <H_Eeprom_Read>
 	u8 UserID		[3]	= {0,0,0};
     692:	19 82       	std	Y+1, r1	; 0x01
     694:	1a 82       	std	Y+2, r1	; 0x02
     696:	1b 82       	std	Y+3, r1	; 0x03
 	u8 UserPassword [4] = {0,0,0,0};	
     698:	1c 82       	std	Y+4, r1	; 0x04
     69a:	1d 82       	std	Y+5, r1	; 0x05
     69c:	1e 82       	std	Y+6, r1	; 0x06
     69e:	1f 82       	std	Y+7, r1	; 0x07
	u8 KeyPressed = 0;
	u8 Trails = 0;
	u8 DoorState = 0;
     6a0:	18 86       	std	Y+8, r1	; 0x08
	
	
	
	while (1)
	{
		switch(AppState)
     6a2:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
     6a6:	80 33       	cpi	r24, 0x30	; 48
     6a8:	99 f0       	breq	.+38     	; 0x6d0 <main+0x96>
     6aa:	30 f4       	brcc	.+12     	; 0x6b8 <main+0x7e>
     6ac:	88 23       	and	r24, r24
     6ae:	51 f0       	breq	.+20     	; 0x6c4 <main+0x8a>
     6b0:	81 30       	cpi	r24, 0x01	; 1
     6b2:	09 f4       	brne	.+2      	; 0x6b6 <main+0x7c>
     6b4:	be c0       	rjmp	.+380    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     6b6:	f5 cf       	rjmp	.-22     	; 0x6a2 <main+0x68>
     6b8:	81 33       	cpi	r24, 0x31	; 49
     6ba:	59 f1       	breq	.+86     	; 0x712 <main+0xd8>
     6bc:	82 33       	cpi	r24, 0x32	; 50
     6be:	09 f4       	brne	.+2      	; 0x6c2 <main+0x88>
     6c0:	82 c0       	rjmp	.+260    	; 0x7c6 <main+0x18c>
     6c2:	ef cf       	rjmp	.-34     	; 0x6a2 <main+0x68>
		{
			case WELCOME :
				WelcomingMsg();
     6c4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <WelcomingMsg>
				AppState = FIRST_PAGE;
     6c8:	80 e3       	ldi	r24, 0x30	; 48
     6ca:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
				break;
     6ce:	e9 cf       	rjmp	.-46     	; 0x6a2 <main+0x68>
			case FIRST_PAGE:
				H_Lcd_Clear();
     6d0:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
				H_Lcd_WriteString("    Welcome     ");
     6d4:	86 e4       	ldi	r24, 0x46	; 70
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
				H_Lcd_GoTo(1,0);
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
				H_Lcd_WriteString("1:Admin 2:User");
     6e4:	87 e5       	ldi	r24, 0x57	; 87
     6e6:	91 e0       	ldi	r25, 0x01	; 1
     6e8:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
				KeyPressed = H_KeyPad_Read();
     6ec:	0e 94 ee 04 	call	0x9dc	; 0x9dc <H_KeyPad_Read>
				while(!KeyPressed)
     6f0:	0d c0       	rjmp	.+26     	; 0x70c <main+0xd2>
				{
					KeyPressed = H_KeyPad_Read();
     6f2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <H_KeyPad_Read>
					if (KeyPressed == '1')
     6f6:	81 33       	cpi	r24, 0x31	; 49
     6f8:	21 f4       	brne	.+8      	; 0x702 <main+0xc8>
					{	
						AppState = ADMIN_LOGIN_PAGE;
     6fa:	91 e3       	ldi	r25, 0x31	; 49
     6fc:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <__data_end>
     700:	05 c0       	rjmp	.+10     	; 0x70c <main+0xd2>
					}
					else if (KeyPressed == '2')
     702:	82 33       	cpi	r24, 0x32	; 50
     704:	19 f4       	brne	.+6      	; 0x70c <main+0xd2>
					{
						AppState = USER_LOGIN_PAGE;
     706:	92 e3       	ldi	r25, 0x32	; 50
     708:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <__data_end>
				H_Lcd_Clear();
				H_Lcd_WriteString("    Welcome     ");
				H_Lcd_GoTo(1,0);
				H_Lcd_WriteString("1:Admin 2:User");
				KeyPressed = H_KeyPad_Read();
				while(!KeyPressed)
     70c:	88 23       	and	r24, r24
     70e:	89 f3       	breq	.-30     	; 0x6f2 <main+0xb8>
     710:	c8 cf       	rjmp	.-112    	; 0x6a2 <main+0x68>
					
				}
				break;
			
			case ADMIN_LOGIN_PAGE:
				H_Lcd_Clear();
     712:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
				H_Lcd_WriteString("Welcome Admin");
     716:	86 e6       	ldi	r24, 0x66	; 102
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     71e:	2f ef       	ldi	r18, 0xFF	; 255
     720:	83 ed       	ldi	r24, 0xD3	; 211
     722:	90 e3       	ldi	r25, 0x30	; 48
     724:	21 50       	subi	r18, 0x01	; 1
     726:	80 40       	sbci	r24, 0x00	; 0
     728:	90 40       	sbci	r25, 0x00	; 0
     72a:	e1 f7       	brne	.-8      	; 0x724 <main+0xea>
     72c:	00 c0       	rjmp	.+0      	; 0x72e <main+0xf4>
     72e:	00 00       	nop
				_delay_ms(1000);
				H_Lcd_Clear();
     730:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
 				while(Trails < 3)
     734:	10 e0       	ldi	r17, 0x00	; 0
     736:	43 c0       	rjmp	.+134    	; 0x7be <main+0x184>
				{
					H_Lcd_WriteString("Enter Username");
     738:	84 e7       	ldi	r24, 0x74	; 116
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
 					InputID(UserID);
     740:	ce 01       	movw	r24, r28
     742:	01 96       	adiw	r24, 0x01	; 1
     744:	0e 94 76 02 	call	0x4ec	; 0x4ec <InputID>
					H_Lcd_Clear();
     748:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
     74c:	83 e8       	ldi	r24, 0x83	; 131
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
					InputPassword(UserPassword);
     754:	ce 01       	movw	r24, r28
     756:	04 96       	adiw	r24, 0x04	; 4
     758:	0e 94 9a 02 	call	0x534	; 0x534 <InputPassword>
					
					if (AdminLogin(UserID,UserPassword) == 0)
     75c:	be 01       	movw	r22, r28
     75e:	6c 5f       	subi	r22, 0xFC	; 252
     760:	7f 4f       	sbci	r23, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	0e 94 49 01 	call	0x292	; 0x292 <AdminLogin>
     76a:	81 11       	cpse	r24, r1
     76c:	04 c0       	rjmp	.+8      	; 0x776 <main+0x13c>
					{
						AppState = ADMIN_SECOND_PAGE;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
						break;
     774:	96 cf       	rjmp	.-212    	; 0x6a2 <main+0x68>
					}
					else 
					{
						Trails++;
     776:	1f 5f       	subi	r17, 0xFF	; 255
						if (Trails == 3)
     778:	13 30       	cpi	r17, 0x03	; 3
     77a:	09 f5       	brne	.+66     	; 0x7be <main+0x184>
						{
							H_Buzzer_On();
     77c:	0e 94 60 04 	call	0x8c0	; 0x8c0 <H_Buzzer_On>
							CloseTheDoor();
     780:	0e 94 17 03 	call	0x62e	; 0x62e <CloseTheDoor>
							KeyPressed = H_PushButton_Read(PUSH_BUTTON_0);
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	0e 94 c3 08 	call	0x1186	; 0x1186 <H_PushButton_Read>
							while (1)
							{
								if (H_PushButton_Read(PUSH_BUTTON_2) == PRESSED)
     78a:	83 e0       	ldi	r24, 0x03	; 3
     78c:	0e 94 c3 08 	call	0x1186	; 0x1186 <H_PushButton_Read>
     790:	81 30       	cpi	r24, 0x01	; 1
     792:	d9 f7       	brne	.-10     	; 0x78a <main+0x150>
     794:	2f ef       	ldi	r18, 0xFF	; 255
     796:	87 ee       	ldi	r24, 0xE7	; 231
     798:	93 e0       	ldi	r25, 0x03	; 3
     79a:	21 50       	subi	r18, 0x01	; 1
     79c:	80 40       	sbci	r24, 0x00	; 0
     79e:	90 40       	sbci	r25, 0x00	; 0
     7a0:	e1 f7       	brne	.-8      	; 0x79a <main+0x160>
     7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <main+0x16a>
     7a4:	00 00       	nop
								{
									_delay_ms(80);
									if (H_PushButton_Read(PUSH_BUTTON_2) == PRESSED)
     7a6:	83 e0       	ldi	r24, 0x03	; 3
     7a8:	0e 94 c3 08 	call	0x1186	; 0x1186 <H_PushButton_Read>
     7ac:	81 30       	cpi	r24, 0x01	; 1
     7ae:	69 f7       	brne	.-38     	; 0x78a <main+0x150>
									{
										while(H_PushButton_Read(PUSH_BUTTON_2) == PRESSED);	
     7b0:	83 e0       	ldi	r24, 0x03	; 3
     7b2:	0e 94 c3 08 	call	0x1186	; 0x1186 <H_PushButton_Read>
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	d9 f3       	breq	.-10     	; 0x7b0 <main+0x176>
										H_Buzzer_Off();
     7ba:	0e 94 65 04 	call	0x8ca	; 0x8ca <H_Buzzer_Off>
			case ADMIN_LOGIN_PAGE:
				H_Lcd_Clear();
				H_Lcd_WriteString("Welcome Admin");
				_delay_ms(1000);
				H_Lcd_Clear();
 				while(Trails < 3)
     7be:	13 30       	cpi	r17, 0x03	; 3
     7c0:	08 f4       	brcc	.+2      	; 0x7c4 <main+0x18a>
     7c2:	ba cf       	rjmp	.-140    	; 0x738 <main+0xfe>
     7c4:	6e cf       	rjmp	.-292    	; 0x6a2 <main+0x68>
				Trails = 0;
				break;
				
			
			case USER_LOGIN_PAGE:
				H_Lcd_Clear();
     7c6:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
				H_Lcd_WriteString("Welcome User");
     7ca:	82 e9       	ldi	r24, 0x92	; 146
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
     7d2:	2f ef       	ldi	r18, 0xFF	; 255
     7d4:	83 ed       	ldi	r24, 0xD3	; 211
     7d6:	90 e3       	ldi	r25, 0x30	; 48
     7d8:	21 50       	subi	r18, 0x01	; 1
     7da:	80 40       	sbci	r24, 0x00	; 0
     7dc:	90 40       	sbci	r25, 0x00	; 0
     7de:	e1 f7       	brne	.-8      	; 0x7d8 <main+0x19e>
     7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <main+0x1a8>
     7e2:	00 00       	nop
				_delay_ms(1000);
				while(Trails < 3)
				{
					H_Lcd_Clear();
     7e4:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Username");
     7e8:	84 e7       	ldi	r24, 0x74	; 116
     7ea:	91 e0       	ldi	r25, 0x01	; 1
     7ec:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
					InputID(UserID);
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	0e 94 76 02 	call	0x4ec	; 0x4ec <InputID>
					H_Lcd_Clear();
     7f8:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
     7fc:	83 e8       	ldi	r24, 0x83	; 131
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
					InputPassword(UserPassword);
     804:	ce 01       	movw	r24, r28
     806:	04 96       	adiw	r24, 0x04	; 4
     808:	0e 94 9a 02 	call	0x534	; 0x534 <InputPassword>
					Trails = 0;
					u8 LoginResult = UserLogin(UserID,UserPassword);
     80c:	be 01       	movw	r22, r28
     80e:	6c 5f       	subi	r22, 0xFC	; 252
     810:	7f 4f       	sbci	r23, 0xFF	; 255
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	0e 94 ee 01 	call	0x3dc	; 0x3dc <UserLogin>
					if (LoginResult == 0)
     81a:	81 11       	cpse	r24, r1
     81c:	04 c0       	rjmp	.+8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
					{
						AppState = USER_SECOND_PAGE;
     81e:	82 e0       	ldi	r24, 0x02	; 2
     820:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
						break;
     824:	3e cf       	rjmp	.-388    	; 0x6a2 <main+0x68>
					}
					else if (LoginResult == 2)
     826:	82 30       	cpi	r24, 0x02	; 2
     828:	e9 f6       	brne	.-70     	; 0x7e4 <main+0x1aa>
					{
						AppState = FIRST_PAGE;
     82a:	80 e3       	ldi	r24, 0x30	; 48
     82c:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
						break;
     830:	38 cf       	rjmp	.-400    	; 0x6a2 <main+0x68>
				}
				Trails = 0;
				break;
			
			case ADMIN_SECOND_PAGE:
			 H_Lcd_Clear();
     832:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
			 H_Lcd_WriteString(" 1:Switch Door  ");
     836:	8f e9       	ldi	r24, 0x9F	; 159
     838:	91 e0       	ldi	r25, 0x01	; 1
     83a:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
			 H_Lcd_GoTo(1,0);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
			 H_Lcd_WriteString("2:AddUser 3:Next");
     846:	80 eb       	ldi	r24, 0xB0	; 176
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
			 KeyPressed = H_KeyPad_Read();
     84e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <H_KeyPad_Read>
     852:	18 2f       	mov	r17, r24
			 while(!KeyPressed)
     854:	2d c0       	rjmp	.+90     	; 0x8b0 <__stack+0x51>
			{
				KeyPressed = H_KeyPad_Read();
     856:	0e 94 ee 04 	call	0x9dc	; 0x9dc <H_KeyPad_Read>
     85a:	18 2f       	mov	r17, r24
				if (KeyPressed == '1')
     85c:	81 33       	cpi	r24, 0x31	; 49
     85e:	29 f4       	brne	.+10     	; 0x86a <__stack+0xb>
				{
					SwitchDoor(&DoorState);
     860:	ce 01       	movw	r24, r28
     862:	08 96       	adiw	r24, 0x08	; 8
     864:	0e 94 bf 02 	call	0x57e	; 0x57e <SwitchDoor>
     868:	23 c0       	rjmp	.+70     	; 0x8b0 <__stack+0x51>
				}
				else if (KeyPressed == '2')
     86a:	82 33       	cpi	r24, 0x32	; 50
     86c:	e1 f4       	brne	.+56     	; 0x8a6 <__stack+0x47>
				{
					H_Lcd_Clear();
     86e:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Username");
     872:	84 e7       	ldi	r24, 0x74	; 116
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
					InputID(UserID);
     87a:	ce 01       	movw	r24, r28
     87c:	01 96       	adiw	r24, 0x01	; 1
     87e:	0e 94 76 02 	call	0x4ec	; 0x4ec <InputID>
					H_Lcd_Clear();
     882:	0e 94 86 08 	call	0x110c	; 0x110c <H_Lcd_Clear>
					H_Lcd_WriteString("Enter Password");
     886:	83 e8       	ldi	r24, 0x83	; 131
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	0e 94 8e 08 	call	0x111c	; 0x111c <H_Lcd_WriteString>
					InputPassword(UserPassword);
     88e:	ce 01       	movw	r24, r28
     890:	04 96       	adiw	r24, 0x04	; 4
     892:	0e 94 9a 02 	call	0x534	; 0x534 <InputPassword>
					AddUser(UserID, UserPassword);
     896:	be 01       	movw	r22, r28
     898:	6c 5f       	subi	r22, 0xFC	; 252
     89a:	7f 4f       	sbci	r23, 0xFF	; 255
     89c:	ce 01       	movw	r24, r28
     89e:	01 96       	adiw	r24, 0x01	; 1
     8a0:	0e 94 4a 00 	call	0x94	; 0x94 <AddUser>
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <__stack+0x51>
				}
				else if (KeyPressed == '3')
     8a6:	83 33       	cpi	r24, 0x33	; 51
     8a8:	19 f4       	brne	.+6      	; 0x8b0 <__stack+0x51>
				{
					AppState = ADMIN_THIRD_PAGE;
     8aa:	83 e0       	ldi	r24, 0x03	; 3
     8ac:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
			 H_Lcd_Clear();
			 H_Lcd_WriteString(" 1:Switch Door  ");
			 H_Lcd_GoTo(1,0);
			 H_Lcd_WriteString("2:AddUser 3:Next");
			 KeyPressed = H_KeyPad_Read();
			 while(!KeyPressed)
     8b0:	11 23       	and	r17, r17
     8b2:	89 f2       	breq	.-94     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     8b4:	f6 ce       	rjmp	.-532    	; 0x6a2 <main+0x68>

000008b6 <H_Buzzer_Init>:

#include "Buzzer.h"

void	H_Buzzer_Init(void)
{
	M_Dio_PinMode(BUZZERPIN,OUTPUT);
     8b6:	61 e0       	ldi	r22, 0x01	; 1
     8b8:	8b e2       	ldi	r24, 0x2B	; 43
     8ba:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
     8be:	08 95       	ret

000008c0 <H_Buzzer_On>:
}

void	H_Buzzer_On(void)
{
	M_Dio_PinWrite(BUZZERPIN,HIGH);
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	8b e2       	ldi	r24, 0x2B	; 43
     8c4:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     8c8:	08 95       	ret

000008ca <H_Buzzer_Off>:
}

void H_Buzzer_Off(void)
{
	M_Dio_PinWrite(BUZZERPIN,LOW);
     8ca:	60 e0       	ldi	r22, 0x00	; 0
     8cc:	8b e2       	ldi	r24, 0x2B	; 43
     8ce:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     8d2:	08 95       	ret

000008d4 <H_DcMotor_Init>:

#include "DcMotor.h"

void H_DcMotor_Init				(void)
{
	M_Dio_PinMode(DC_MOTOR_PIN_1,OUTPUT);
     8d4:	61 e0       	ldi	r22, 0x01	; 1
     8d6:	8e e2       	ldi	r24, 0x2E	; 46
     8d8:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(DC_MOTOR_PIN_0,OUTPUT);
     8dc:	61 e0       	ldi	r22, 0x01	; 1
     8de:	8c e2       	ldi	r24, 0x2C	; 44
     8e0:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Pwm2_Init();
     8e4:	0e 94 16 0c 	call	0x182c	; 0x182c <M_Pwm2_Init>
     8e8:	08 95       	ret

000008ea <H_Eeprom_Init>:
 */ 
#include "Eeprom.h"

void H_Eeprom_Init(void)
{
	M_I2c_Init();
     8ea:	0e 94 36 0b 	call	0x166c	; 0x166c <M_I2c_Init>
     8ee:	08 95       	ret

000008f0 <H_Eeprom_Write>:
}
void H_Eeprom_Write(u8 Local_u8_Data,u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     8f0:	1f 93       	push	r17
     8f2:	cf 93       	push	r28
     8f4:	df 93       	push	r29
	if(Local_u8_PageAddress < 8)
     8f6:	68 30       	cpi	r22, 0x08	; 8
     8f8:	88 f4       	brcc	.+34     	; 0x91c <H_Eeprom_Write+0x2c>
     8fa:	14 2f       	mov	r17, r20
     8fc:	c6 2f       	mov	r28, r22
     8fe:	d8 2f       	mov	r29, r24
	{
		M_I2c_StartCondition();
     900:	0e 94 45 0b 	call	0x168a	; 0x168a <M_I2c_StartCondition>
		M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     904:	8c 2f       	mov	r24, r28
     906:	80 65       	ori	r24, 0x50	; 80
     908:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <M_I2c_SendSlaveAddressWrite>
		M_I2c_SendSByte(Local_u8_ByteAddress);
     90c:	81 2f       	mov	r24, r17
     90e:	0e 94 82 0b 	call	0x1704	; 0x1704 <M_I2c_SendSByte>
		M_I2c_SendSByte(Local_u8_Data);
     912:	8d 2f       	mov	r24, r29
     914:	0e 94 82 0b 	call	0x1704	; 0x1704 <M_I2c_SendSByte>
		M_I2c_StopCondition();
     918:	0e 94 af 0b 	call	0x175e	; 0x175e <M_I2c_StopCondition>
	}
}
     91c:	df 91       	pop	r29
     91e:	cf 91       	pop	r28
     920:	1f 91       	pop	r17
     922:	08 95       	ret

00000924 <H_Eeprom_Read>:
u8   H_Eeprom_Read(u8 Local_u8_PageAddress,u8 Local_u8_ByteAddress)
{
     924:	cf 93       	push	r28
     926:	df 93       	push	r29
     928:	c8 2f       	mov	r28, r24
     92a:	d6 2f       	mov	r29, r22
	u8 Local_u8_Data = 0;
	M_I2c_StartCondition();
     92c:	0e 94 45 0b 	call	0x168a	; 0x168a <M_I2c_StartCondition>
	M_I2c_SendSlaveAddressWrite((0x50 | Local_u8_PageAddress));
     930:	c0 65       	ori	r28, 0x50	; 80
     932:	8c 2f       	mov	r24, r28
     934:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <M_I2c_SendSlaveAddressWrite>
	M_I2c_SendSByte(Local_u8_ByteAddress);
     938:	8d 2f       	mov	r24, r29
     93a:	0e 94 82 0b 	call	0x1704	; 0x1704 <M_I2c_SendSByte>
	M_I2c_RepeatedStart();
     93e:	0e 94 a1 0b 	call	0x1742	; 0x1742 <M_I2c_RepeatedStart>
	M_I2c_SendSlaveAddressRead((0x50 | Local_u8_PageAddress));
     942:	8c 2f       	mov	r24, r28
     944:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <M_I2c_SendSlaveAddressRead>
	Local_u8_Data = M_I2c_ReadByteNoAck();
     948:	0e 94 9a 0b 	call	0x1734	; 0x1734 <M_I2c_ReadByteNoAck>
     94c:	c8 2f       	mov	r28, r24
	M_I2c_StopCondition();
     94e:	0e 94 af 0b 	call	0x175e	; 0x175e <M_I2c_StopCondition>
	return Local_u8_Data;
     952:	8c 2f       	mov	r24, r28
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	08 95       	ret

0000095a <H_KeyPad_Init>:
#include "KeyPad.h"


void H_KeyPad_Init				(void)
{
	M_Dio_PinMode(KEYPAD_R0_PIN,OUTPUT);
     95a:	61 e0       	ldi	r22, 0x01	; 1
     95c:	82 e2       	ldi	r24, 0x22	; 34
     95e:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R1_PIN,OUTPUT);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	83 e2       	ldi	r24, 0x23	; 35
     966:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R2_PIN,OUTPUT);
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	84 e2       	ldi	r24, 0x24	; 36
     96e:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_R3_PIN,OUTPUT);
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	85 e2       	ldi	r24, 0x25	; 37
     976:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	82 e2       	ldi	r24, 0x22	; 34
     97e:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	83 e2       	ldi	r24, 0x23	; 35
     986:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	84 e2       	ldi	r24, 0x24	; 36
     98e:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	85 e2       	ldi	r24, 0x25	; 37
     996:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
	M_Dio_PinMode(KEYPAD_C0_PIN,INPUT);
     99a:	60 e0       	ldi	r22, 0x00	; 0
     99c:	8f e0       	ldi	r24, 0x0F	; 15
     99e:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C1_PIN,INPUT);
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	80 e1       	ldi	r24, 0x10	; 16
     9a6:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C2_PIN,INPUT);
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	81 e1       	ldi	r24, 0x11	; 17
     9ae:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(KEYPAD_C3_PIN,INPUT);
     9b2:	60 e0       	ldi	r22, 0x00	; 0
     9b4:	87 e1       	ldi	r24, 0x17	; 23
     9b6:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	
	M_Dio_PinPullUp(KEYPAD_C0_PIN,PULLUP_ENABLE);
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	8f e0       	ldi	r24, 0x0F	; 15
     9be:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C1_PIN,PULLUP_ENABLE);
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	80 e1       	ldi	r24, 0x10	; 16
     9c6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C2_PIN,PULLUP_ENABLE);
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	81 e1       	ldi	r24, 0x11	; 17
     9ce:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <M_Dio_PinPullUp>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	87 e1       	ldi	r24, 0x17	; 23
     9d6:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <M_Dio_PinPullUp>
     9da:	08 95       	ret

000009dc <H_KeyPad_Read>:
		
}
u8	 H_KeyPad_Read				(void)
{
     9dc:	cf 93       	push	r28
	u8 Local_u8_KeyPadArr [4][4]	={	{'7','8','9','/'},
										{'4','5','6','*'},
										{'1','2','3','-'},										
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	82 e2       	ldi	r24, 0x22	; 34
     9e2:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
     9e6:	8f e0       	ldi	r24, 0x0F	; 15
     9e8:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     9ec:	81 11       	cpse	r24, r1
     9ee:	19 c0       	rjmp	.+50     	; 0xa22 <H_KeyPad_Read+0x46>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	86 e7       	ldi	r24, 0x76	; 118
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	21 50       	subi	r18, 0x01	; 1
     9f8:	80 40       	sbci	r24, 0x00	; 0
     9fa:	90 40       	sbci	r25, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <H_KeyPad_Read+0x1a>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <H_KeyPad_Read+0x24>
     a00:	00 00       	nop
     a02:	8f e0       	ldi	r24, 0x0F	; 15
     a04:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a08:	81 11       	cpse	r24, r1
     a0a:	0d c0       	rjmp	.+26     	; 0xa26 <H_KeyPad_Read+0x4a>
     a0c:	8f e0       	ldi	r24, 0x0F	; 15
     a0e:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a12:	88 23       	and	r24, r24
     a14:	d9 f3       	breq	.-10     	; 0xa0c <H_KeyPad_Read+0x30>
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	82 e2       	ldi	r24, 0x22	; 34
     a1a:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     a1e:	c7 e3       	ldi	r28, 0x37	; 55
     a20:	03 c0       	rjmp	.+6      	; 0xa28 <H_KeyPad_Read+0x4c>
	M_Dio_PinPullUp(KEYPAD_C3_PIN,PULLUP_ENABLE);
		
}
u8	 H_KeyPad_Read				(void)
{
	u8 Local_u8_KeypadReading		=	0;
     a22:	c0 e0       	ldi	r28, 0x00	; 0
     a24:	01 c0       	rjmp	.+2      	; 0xa28 <H_KeyPad_Read+0x4c>
     a26:	c0 e0       	ldi	r28, 0x00	; 0
										{'C','0','=','+'} };
										
	M_Dio_PinWrite(KEYPAD_R0_PIN,LOW);
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][0];}}
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][1];}}
     a28:	80 e1       	ldi	r24, 0x10	; 16
     a2a:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a2e:	81 11       	cpse	r24, r1
     a30:	18 c0       	rjmp	.+48     	; 0xa62 <H_KeyPad_Read+0x86>
     a32:	2f ef       	ldi	r18, 0xFF	; 255
     a34:	86 e7       	ldi	r24, 0x76	; 118
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	21 50       	subi	r18, 0x01	; 1
     a3a:	80 40       	sbci	r24, 0x00	; 0
     a3c:	90 40       	sbci	r25, 0x00	; 0
     a3e:	e1 f7       	brne	.-8      	; 0xa38 <H_KeyPad_Read+0x5c>
     a40:	00 c0       	rjmp	.+0      	; 0xa42 <H_KeyPad_Read+0x66>
     a42:	00 00       	nop
     a44:	80 e1       	ldi	r24, 0x10	; 16
     a46:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a4a:	81 11       	cpse	r24, r1
     a4c:	0a c0       	rjmp	.+20     	; 0xa62 <H_KeyPad_Read+0x86>
     a4e:	80 e1       	ldi	r24, 0x10	; 16
     a50:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a54:	88 23       	and	r24, r24
     a56:	d9 f3       	breq	.-10     	; 0xa4e <H_KeyPad_Read+0x72>
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	82 e2       	ldi	r24, 0x22	; 34
     a5c:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     a60:	c8 e3       	ldi	r28, 0x38	; 56
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][2];}}
     a62:	81 e1       	ldi	r24, 0x11	; 17
     a64:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a68:	81 11       	cpse	r24, r1
     a6a:	18 c0       	rjmp	.+48     	; 0xa9c <H_KeyPad_Read+0xc0>
     a6c:	2f ef       	ldi	r18, 0xFF	; 255
     a6e:	86 e7       	ldi	r24, 0x76	; 118
     a70:	91 e0       	ldi	r25, 0x01	; 1
     a72:	21 50       	subi	r18, 0x01	; 1
     a74:	80 40       	sbci	r24, 0x00	; 0
     a76:	90 40       	sbci	r25, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <H_KeyPad_Read+0x96>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <H_KeyPad_Read+0xa0>
     a7c:	00 00       	nop
     a7e:	81 e1       	ldi	r24, 0x11	; 17
     a80:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a84:	81 11       	cpse	r24, r1
     a86:	0a c0       	rjmp	.+20     	; 0xa9c <H_KeyPad_Read+0xc0>
     a88:	81 e1       	ldi	r24, 0x11	; 17
     a8a:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     a8e:	88 23       	and	r24, r24
     a90:	d9 f3       	breq	.-10     	; 0xa88 <H_KeyPad_Read+0xac>
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	82 e2       	ldi	r24, 0x22	; 34
     a96:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     a9a:	c9 e3       	ldi	r28, 0x39	; 57
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [0][3];}}
     a9c:	87 e1       	ldi	r24, 0x17	; 23
     a9e:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     aa2:	81 11       	cpse	r24, r1
     aa4:	18 c0       	rjmp	.+48     	; 0xad6 <H_KeyPad_Read+0xfa>
     aa6:	2f ef       	ldi	r18, 0xFF	; 255
     aa8:	86 e7       	ldi	r24, 0x76	; 118
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	21 50       	subi	r18, 0x01	; 1
     aae:	80 40       	sbci	r24, 0x00	; 0
     ab0:	90 40       	sbci	r25, 0x00	; 0
     ab2:	e1 f7       	brne	.-8      	; 0xaac <H_KeyPad_Read+0xd0>
     ab4:	00 c0       	rjmp	.+0      	; 0xab6 <H_KeyPad_Read+0xda>
     ab6:	00 00       	nop
     ab8:	87 e1       	ldi	r24, 0x17	; 23
     aba:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     abe:	81 11       	cpse	r24, r1
     ac0:	0a c0       	rjmp	.+20     	; 0xad6 <H_KeyPad_Read+0xfa>
     ac2:	87 e1       	ldi	r24, 0x17	; 23
     ac4:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     ac8:	88 23       	and	r24, r24
     aca:	d9 f3       	breq	.-10     	; 0xac2 <H_KeyPad_Read+0xe6>
     acc:	61 e0       	ldi	r22, 0x01	; 1
     ace:	82 e2       	ldi	r24, 0x22	; 34
     ad0:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     ad4:	cf e2       	ldi	r28, 0x2F	; 47
	
	M_Dio_PinWrite(KEYPAD_R0_PIN,HIGH);
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	82 e2       	ldi	r24, 0x22	; 34
     ada:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,LOW);
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	83 e2       	ldi	r24, 0x23	; 35
     ae2:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][0];}}
     ae6:	8f e0       	ldi	r24, 0x0F	; 15
     ae8:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     aec:	81 11       	cpse	r24, r1
     aee:	18 c0       	rjmp	.+48     	; 0xb20 <H_KeyPad_Read+0x144>
     af0:	2f ef       	ldi	r18, 0xFF	; 255
     af2:	86 e7       	ldi	r24, 0x76	; 118
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	21 50       	subi	r18, 0x01	; 1
     af8:	80 40       	sbci	r24, 0x00	; 0
     afa:	90 40       	sbci	r25, 0x00	; 0
     afc:	e1 f7       	brne	.-8      	; 0xaf6 <H_KeyPad_Read+0x11a>
     afe:	00 c0       	rjmp	.+0      	; 0xb00 <H_KeyPad_Read+0x124>
     b00:	00 00       	nop
     b02:	8f e0       	ldi	r24, 0x0F	; 15
     b04:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b08:	81 11       	cpse	r24, r1
     b0a:	0a c0       	rjmp	.+20     	; 0xb20 <H_KeyPad_Read+0x144>
     b0c:	8f e0       	ldi	r24, 0x0F	; 15
     b0e:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b12:	88 23       	and	r24, r24
     b14:	d9 f3       	breq	.-10     	; 0xb0c <H_KeyPad_Read+0x130>
     b16:	61 e0       	ldi	r22, 0x01	; 1
     b18:	83 e2       	ldi	r24, 0x23	; 35
     b1a:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     b1e:	c4 e3       	ldi	r28, 0x34	; 52
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][1];}}
     b20:	80 e1       	ldi	r24, 0x10	; 16
     b22:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b26:	81 11       	cpse	r24, r1
     b28:	18 c0       	rjmp	.+48     	; 0xb5a <H_KeyPad_Read+0x17e>
     b2a:	2f ef       	ldi	r18, 0xFF	; 255
     b2c:	86 e7       	ldi	r24, 0x76	; 118
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	21 50       	subi	r18, 0x01	; 1
     b32:	80 40       	sbci	r24, 0x00	; 0
     b34:	90 40       	sbci	r25, 0x00	; 0
     b36:	e1 f7       	brne	.-8      	; 0xb30 <H_KeyPad_Read+0x154>
     b38:	00 c0       	rjmp	.+0      	; 0xb3a <H_KeyPad_Read+0x15e>
     b3a:	00 00       	nop
     b3c:	80 e1       	ldi	r24, 0x10	; 16
     b3e:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b42:	81 11       	cpse	r24, r1
     b44:	0a c0       	rjmp	.+20     	; 0xb5a <H_KeyPad_Read+0x17e>
     b46:	80 e1       	ldi	r24, 0x10	; 16
     b48:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b4c:	88 23       	and	r24, r24
     b4e:	d9 f3       	breq	.-10     	; 0xb46 <H_KeyPad_Read+0x16a>
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	83 e2       	ldi	r24, 0x23	; 35
     b54:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     b58:	c5 e3       	ldi	r28, 0x35	; 53
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][2];}}
     b5a:	81 e1       	ldi	r24, 0x11	; 17
     b5c:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b60:	81 11       	cpse	r24, r1
     b62:	18 c0       	rjmp	.+48     	; 0xb94 <H_KeyPad_Read+0x1b8>
     b64:	2f ef       	ldi	r18, 0xFF	; 255
     b66:	86 e7       	ldi	r24, 0x76	; 118
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	21 50       	subi	r18, 0x01	; 1
     b6c:	80 40       	sbci	r24, 0x00	; 0
     b6e:	90 40       	sbci	r25, 0x00	; 0
     b70:	e1 f7       	brne	.-8      	; 0xb6a <H_KeyPad_Read+0x18e>
     b72:	00 c0       	rjmp	.+0      	; 0xb74 <H_KeyPad_Read+0x198>
     b74:	00 00       	nop
     b76:	81 e1       	ldi	r24, 0x11	; 17
     b78:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b7c:	81 11       	cpse	r24, r1
     b7e:	0a c0       	rjmp	.+20     	; 0xb94 <H_KeyPad_Read+0x1b8>
     b80:	81 e1       	ldi	r24, 0x11	; 17
     b82:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b86:	88 23       	and	r24, r24
     b88:	d9 f3       	breq	.-10     	; 0xb80 <H_KeyPad_Read+0x1a4>
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	83 e2       	ldi	r24, 0x23	; 35
     b8e:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     b92:	c6 e3       	ldi	r28, 0x36	; 54
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0); M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [1][3];}}
     b94:	87 e1       	ldi	r24, 0x17	; 23
     b96:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     b9a:	81 11       	cpse	r24, r1
     b9c:	18 c0       	rjmp	.+48     	; 0xbce <H_KeyPad_Read+0x1f2>
     b9e:	2f ef       	ldi	r18, 0xFF	; 255
     ba0:	86 e7       	ldi	r24, 0x76	; 118
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	21 50       	subi	r18, 0x01	; 1
     ba6:	80 40       	sbci	r24, 0x00	; 0
     ba8:	90 40       	sbci	r25, 0x00	; 0
     baa:	e1 f7       	brne	.-8      	; 0xba4 <H_KeyPad_Read+0x1c8>
     bac:	00 c0       	rjmp	.+0      	; 0xbae <H_KeyPad_Read+0x1d2>
     bae:	00 00       	nop
     bb0:	87 e1       	ldi	r24, 0x17	; 23
     bb2:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     bb6:	81 11       	cpse	r24, r1
     bb8:	0a c0       	rjmp	.+20     	; 0xbce <H_KeyPad_Read+0x1f2>
     bba:	87 e1       	ldi	r24, 0x17	; 23
     bbc:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     bc0:	88 23       	and	r24, r24
     bc2:	d9 f3       	breq	.-10     	; 0xbba <H_KeyPad_Read+0x1de>
     bc4:	61 e0       	ldi	r22, 0x01	; 1
     bc6:	83 e2       	ldi	r24, 0x23	; 35
     bc8:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     bcc:	ca e2       	ldi	r28, 0x2A	; 42
	
	M_Dio_PinWrite(KEYPAD_R1_PIN,HIGH);
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	83 e2       	ldi	r24, 0x23	; 35
     bd2:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,LOW);
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	84 e2       	ldi	r24, 0x24	; 36
     bda:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
		
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][0];}}
     bde:	8f e0       	ldi	r24, 0x0F	; 15
     be0:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     be4:	81 11       	cpse	r24, r1
     be6:	18 c0       	rjmp	.+48     	; 0xc18 <H_KeyPad_Read+0x23c>
     be8:	2f ef       	ldi	r18, 0xFF	; 255
     bea:	86 e7       	ldi	r24, 0x76	; 118
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	21 50       	subi	r18, 0x01	; 1
     bf0:	80 40       	sbci	r24, 0x00	; 0
     bf2:	90 40       	sbci	r25, 0x00	; 0
     bf4:	e1 f7       	brne	.-8      	; 0xbee <H_KeyPad_Read+0x212>
     bf6:	00 c0       	rjmp	.+0      	; 0xbf8 <H_KeyPad_Read+0x21c>
     bf8:	00 00       	nop
     bfa:	8f e0       	ldi	r24, 0x0F	; 15
     bfc:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c00:	81 11       	cpse	r24, r1
     c02:	0a c0       	rjmp	.+20     	; 0xc18 <H_KeyPad_Read+0x23c>
     c04:	8f e0       	ldi	r24, 0x0F	; 15
     c06:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c0a:	88 23       	and	r24, r24
     c0c:	d9 f3       	breq	.-10     	; 0xc04 <H_KeyPad_Read+0x228>
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	84 e2       	ldi	r24, 0x24	; 36
     c12:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     c16:	c1 e3       	ldi	r28, 0x31	; 49
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][1];}}
     c18:	80 e1       	ldi	r24, 0x10	; 16
     c1a:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c1e:	81 11       	cpse	r24, r1
     c20:	18 c0       	rjmp	.+48     	; 0xc52 <H_KeyPad_Read+0x276>
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	86 e7       	ldi	r24, 0x76	; 118
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <H_KeyPad_Read+0x24c>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <H_KeyPad_Read+0x256>
     c32:	00 00       	nop
     c34:	80 e1       	ldi	r24, 0x10	; 16
     c36:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c3a:	81 11       	cpse	r24, r1
     c3c:	0a c0       	rjmp	.+20     	; 0xc52 <H_KeyPad_Read+0x276>
     c3e:	80 e1       	ldi	r24, 0x10	; 16
     c40:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c44:	88 23       	and	r24, r24
     c46:	d9 f3       	breq	.-10     	; 0xc3e <H_KeyPad_Read+0x262>
     c48:	61 e0       	ldi	r22, 0x01	; 1
     c4a:	84 e2       	ldi	r24, 0x24	; 36
     c4c:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     c50:	c2 e3       	ldi	r28, 0x32	; 50
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][2];}}
     c52:	81 e1       	ldi	r24, 0x11	; 17
     c54:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c58:	81 11       	cpse	r24, r1
     c5a:	18 c0       	rjmp	.+48     	; 0xc8c <H_KeyPad_Read+0x2b0>
     c5c:	2f ef       	ldi	r18, 0xFF	; 255
     c5e:	86 e7       	ldi	r24, 0x76	; 118
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	21 50       	subi	r18, 0x01	; 1
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	90 40       	sbci	r25, 0x00	; 0
     c68:	e1 f7       	brne	.-8      	; 0xc62 <H_KeyPad_Read+0x286>
     c6a:	00 c0       	rjmp	.+0      	; 0xc6c <H_KeyPad_Read+0x290>
     c6c:	00 00       	nop
     c6e:	81 e1       	ldi	r24, 0x11	; 17
     c70:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c74:	81 11       	cpse	r24, r1
     c76:	0a c0       	rjmp	.+20     	; 0xc8c <H_KeyPad_Read+0x2b0>
     c78:	81 e1       	ldi	r24, 0x11	; 17
     c7a:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c7e:	88 23       	and	r24, r24
     c80:	d9 f3       	breq	.-10     	; 0xc78 <H_KeyPad_Read+0x29c>
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	84 e2       	ldi	r24, 0x24	; 36
     c86:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     c8a:	c3 e3       	ldi	r28, 0x33	; 51
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [2][3];}}
     c8c:	87 e1       	ldi	r24, 0x17	; 23
     c8e:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     c92:	81 11       	cpse	r24, r1
     c94:	18 c0       	rjmp	.+48     	; 0xcc6 <H_KeyPad_Read+0x2ea>
     c96:	2f ef       	ldi	r18, 0xFF	; 255
     c98:	86 e7       	ldi	r24, 0x76	; 118
     c9a:	91 e0       	ldi	r25, 0x01	; 1
     c9c:	21 50       	subi	r18, 0x01	; 1
     c9e:	80 40       	sbci	r24, 0x00	; 0
     ca0:	90 40       	sbci	r25, 0x00	; 0
     ca2:	e1 f7       	brne	.-8      	; 0xc9c <H_KeyPad_Read+0x2c0>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <H_KeyPad_Read+0x2ca>
     ca6:	00 00       	nop
     ca8:	87 e1       	ldi	r24, 0x17	; 23
     caa:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     cae:	81 11       	cpse	r24, r1
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <H_KeyPad_Read+0x2ea>
     cb2:	87 e1       	ldi	r24, 0x17	; 23
     cb4:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     cb8:	88 23       	and	r24, r24
     cba:	d9 f3       	breq	.-10     	; 0xcb2 <H_KeyPad_Read+0x2d6>
     cbc:	61 e0       	ldi	r22, 0x01	; 1
     cbe:	84 e2       	ldi	r24, 0x24	; 36
     cc0:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     cc4:	cd e2       	ldi	r28, 0x2D	; 45
	
	M_Dio_PinWrite(KEYPAD_R2_PIN,HIGH);
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	84 e2       	ldi	r24, 0x24	; 36
     cca:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
				
	M_Dio_PinWrite(KEYPAD_R3_PIN,LOW);
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	85 e2       	ldi	r24, 0x25	; 37
     cd2:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
	if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C0_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C0_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][0];}}
     cd6:	8f e0       	ldi	r24, 0x0F	; 15
     cd8:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     cdc:	81 11       	cpse	r24, r1
     cde:	18 c0       	rjmp	.+48     	; 0xd10 <H_KeyPad_Read+0x334>
     ce0:	2f ef       	ldi	r18, 0xFF	; 255
     ce2:	86 e7       	ldi	r24, 0x76	; 118
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	21 50       	subi	r18, 0x01	; 1
     ce8:	80 40       	sbci	r24, 0x00	; 0
     cea:	90 40       	sbci	r25, 0x00	; 0
     cec:	e1 f7       	brne	.-8      	; 0xce6 <H_KeyPad_Read+0x30a>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <H_KeyPad_Read+0x314>
     cf0:	00 00       	nop
     cf2:	8f e0       	ldi	r24, 0x0F	; 15
     cf4:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     cf8:	81 11       	cpse	r24, r1
     cfa:	0a c0       	rjmp	.+20     	; 0xd10 <H_KeyPad_Read+0x334>
     cfc:	8f e0       	ldi	r24, 0x0F	; 15
     cfe:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d02:	88 23       	and	r24, r24
     d04:	d9 f3       	breq	.-10     	; 0xcfc <H_KeyPad_Read+0x320>
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	85 e2       	ldi	r24, 0x25	; 37
     d0a:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     d0e:	c3 e4       	ldi	r28, 0x43	; 67
	if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C1_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C1_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][1];}}
     d10:	80 e1       	ldi	r24, 0x10	; 16
     d12:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d16:	81 11       	cpse	r24, r1
     d18:	18 c0       	rjmp	.+48     	; 0xd4a <H_KeyPad_Read+0x36e>
     d1a:	2f ef       	ldi	r18, 0xFF	; 255
     d1c:	86 e7       	ldi	r24, 0x76	; 118
     d1e:	91 e0       	ldi	r25, 0x01	; 1
     d20:	21 50       	subi	r18, 0x01	; 1
     d22:	80 40       	sbci	r24, 0x00	; 0
     d24:	90 40       	sbci	r25, 0x00	; 0
     d26:	e1 f7       	brne	.-8      	; 0xd20 <H_KeyPad_Read+0x344>
     d28:	00 c0       	rjmp	.+0      	; 0xd2a <H_KeyPad_Read+0x34e>
     d2a:	00 00       	nop
     d2c:	80 e1       	ldi	r24, 0x10	; 16
     d2e:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d32:	81 11       	cpse	r24, r1
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <H_KeyPad_Read+0x36e>
     d36:	80 e1       	ldi	r24, 0x10	; 16
     d38:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d3c:	88 23       	and	r24, r24
     d3e:	d9 f3       	breq	.-10     	; 0xd36 <H_KeyPad_Read+0x35a>
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	85 e2       	ldi	r24, 0x25	; 37
     d44:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     d48:	c0 e3       	ldi	r28, 0x30	; 48
	if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C2_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C2_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][2];}}
     d4a:	81 e1       	ldi	r24, 0x11	; 17
     d4c:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d50:	81 11       	cpse	r24, r1
     d52:	18 c0       	rjmp	.+48     	; 0xd84 <H_KeyPad_Read+0x3a8>
     d54:	2f ef       	ldi	r18, 0xFF	; 255
     d56:	86 e7       	ldi	r24, 0x76	; 118
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	21 50       	subi	r18, 0x01	; 1
     d5c:	80 40       	sbci	r24, 0x00	; 0
     d5e:	90 40       	sbci	r25, 0x00	; 0
     d60:	e1 f7       	brne	.-8      	; 0xd5a <H_KeyPad_Read+0x37e>
     d62:	00 c0       	rjmp	.+0      	; 0xd64 <H_KeyPad_Read+0x388>
     d64:	00 00       	nop
     d66:	81 e1       	ldi	r24, 0x11	; 17
     d68:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d6c:	81 11       	cpse	r24, r1
     d6e:	0a c0       	rjmp	.+20     	; 0xd84 <H_KeyPad_Read+0x3a8>
     d70:	81 e1       	ldi	r24, 0x11	; 17
     d72:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d76:	88 23       	and	r24, r24
     d78:	d9 f3       	breq	.-10     	; 0xd70 <H_KeyPad_Read+0x394>
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	85 e2       	ldi	r24, 0x25	; 37
     d7e:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     d82:	cd e3       	ldi	r28, 0x3D	; 61
	if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) { _delay_ms(30);if(M_Dio_PinRead(KEYPAD_C3_PIN) == 0) {while(M_Dio_PinRead(KEYPAD_C3_PIN) == 0);M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH); Local_u8_KeypadReading = Local_u8_KeyPadArr [3][3];}}
     d84:	87 e1       	ldi	r24, 0x17	; 23
     d86:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     d8a:	81 11       	cpse	r24, r1
     d8c:	18 c0       	rjmp	.+48     	; 0xdbe <H_KeyPad_Read+0x3e2>
     d8e:	2f ef       	ldi	r18, 0xFF	; 255
     d90:	86 e7       	ldi	r24, 0x76	; 118
     d92:	91 e0       	ldi	r25, 0x01	; 1
     d94:	21 50       	subi	r18, 0x01	; 1
     d96:	80 40       	sbci	r24, 0x00	; 0
     d98:	90 40       	sbci	r25, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <H_KeyPad_Read+0x3b8>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <H_KeyPad_Read+0x3c2>
     d9e:	00 00       	nop
     da0:	87 e1       	ldi	r24, 0x17	; 23
     da2:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     da6:	81 11       	cpse	r24, r1
     da8:	0a c0       	rjmp	.+20     	; 0xdbe <H_KeyPad_Read+0x3e2>
     daa:	87 e1       	ldi	r24, 0x17	; 23
     dac:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
     db0:	88 23       	and	r24, r24
     db2:	d9 f3       	breq	.-10     	; 0xdaa <H_KeyPad_Read+0x3ce>
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	85 e2       	ldi	r24, 0x25	; 37
     db8:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     dbc:	cb e2       	ldi	r28, 0x2B	; 43
	
	M_Dio_PinWrite(KEYPAD_R3_PIN,HIGH);
     dbe:	61 e0       	ldi	r22, 0x01	; 1
     dc0:	85 e2       	ldi	r24, 0x25	; 37
     dc2:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	
	return Local_u8_KeypadReading ;
     dc6:	8c 2f       	mov	r24, r28
     dc8:	cf 91       	pop	r28
     dca:	08 95       	ret

00000dcc <H_Lcd_WriteCharacter>:
// 	#endif
// }


void H_Lcd_WriteCharacter	(u8 Local_u8_Character)
{
     dcc:	cf 93       	push	r28
     dce:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	84 e1       	ldi	r24, 0x14	; 20
     dd4:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	#elif		LCD_MODE	==	_4_BIT_MODE
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character & 0XF0);	
     dd8:	88 b3       	in	r24, 0x18	; 24
     dda:	8f 70       	andi	r24, 0x0F	; 15
     ddc:	9c 2f       	mov	r25, r28
     dde:	90 7f       	andi	r25, 0xF0	; 240
     de0:	89 2b       	or	r24, r25
     de2:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	86 e1       	ldi	r24, 0x16	; 22
     de8:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     dec:	8f e9       	ldi	r24, 0x9F	; 159
     dee:	9f e0       	ldi	r25, 0x0F	; 15
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	f1 f7       	brne	.-4      	; 0xdf0 <H_Lcd_WriteCharacter+0x24>
     df4:	00 c0       	rjmp	.+0      	; 0xdf6 <H_Lcd_WriteCharacter+0x2a>
     df6:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	86 e1       	ldi	r24, 0x16	; 22
     dfc:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F)| (Local_u8_Character << 4);
     e00:	28 b3       	in	r18, 0x18	; 24
     e02:	30 e1       	ldi	r19, 0x10	; 16
     e04:	c3 9f       	mul	r28, r19
     e06:	c0 01       	movw	r24, r0
     e08:	11 24       	eor	r1, r1
     e0a:	92 2f       	mov	r25, r18
     e0c:	9f 70       	andi	r25, 0x0F	; 15
     e0e:	89 2b       	or	r24, r25
     e10:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	86 e1       	ldi	r24, 0x16	; 22
     e16:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     e1a:	8f e9       	ldi	r24, 0x9F	; 159
     e1c:	9f e0       	ldi	r25, 0x0F	; 15
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <H_Lcd_WriteCharacter+0x52>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <H_Lcd_WriteCharacter+0x58>
     e24:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	86 e1       	ldi	r24, 0x16	; 22
     e2a:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	#endif 

	
}
     e2e:	cf 91       	pop	r28
     e30:	08 95       	ret

00000e32 <H_Lcd_WriteCommand>:
// 	#endif
// }


void H_Lcd_WriteCommand		(u8 Local_u8_Command)
{
     e32:	cf 93       	push	r28
     e34:	c8 2f       	mov	r28, r24
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	84 e1       	ldi	r24, 0x14	; 20
     e3a:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);
	
	#elif		LCD_MODE	==	_4_BIT_MODE
	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command & 0XF0);
     e3e:	88 b3       	in	r24, 0x18	; 24
     e40:	8f 70       	andi	r24, 0x0F	; 15
     e42:	9c 2f       	mov	r25, r28
     e44:	90 7f       	andi	r25, 0xF0	; 240
     e46:	89 2b       	or	r24, r25
     e48:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	86 e1       	ldi	r24, 0x16	; 22
     e4e:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     e52:	8f e9       	ldi	r24, 0x9F	; 159
     e54:	9f e0       	ldi	r25, 0x0F	; 15
     e56:	01 97       	sbiw	r24, 0x01	; 1
     e58:	f1 f7       	brne	.-4      	; 0xe56 <H_Lcd_WriteCommand+0x24>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <H_Lcd_WriteCommand+0x2a>
     e5c:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	86 e1       	ldi	r24, 0x16	; 22
     e62:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     e66:	8f e1       	ldi	r24, 0x1F	; 31
     e68:	9e e4       	ldi	r25, 0x4E	; 78
     e6a:	01 97       	sbiw	r24, 0x01	; 1
     e6c:	f1 f7       	brne	.-4      	; 0xe6a <H_Lcd_WriteCommand+0x38>
     e6e:	00 c0       	rjmp	.+0      	; 0xe70 <H_Lcd_WriteCommand+0x3e>
     e70:	00 00       	nop
	_delay_ms(5);

	LCD_DATA_PORT = (LCD_DATA_PORT & 0X0F) | (Local_u8_Command << 4);
     e72:	28 b3       	in	r18, 0x18	; 24
     e74:	30 e1       	ldi	r19, 0x10	; 16
     e76:	c3 9f       	mul	r28, r19
     e78:	c0 01       	movw	r24, r0
     e7a:	11 24       	eor	r1, r1
     e7c:	92 2f       	mov	r25, r18
     e7e:	9f 70       	andi	r25, 0x0F	; 15
     e80:	89 2b       	or	r24, r25
     e82:	88 bb       	out	0x18, r24	; 24
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	86 e1       	ldi	r24, 0x16	; 22
     e88:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     e8c:	8f e9       	ldi	r24, 0x9F	; 159
     e8e:	9f e0       	ldi	r25, 0x0F	; 15
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <H_Lcd_WriteCommand+0x5e>
     e94:	00 c0       	rjmp	.+0      	; 0xe96 <H_Lcd_WriteCommand+0x64>
     e96:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     e98:	60 e0       	ldi	r22, 0x00	; 0
     e9a:	86 e1       	ldi	r24, 0x16	; 22
     e9c:	0e 94 ad 09 	call	0x135a	; 0x135a <M_Dio_PinWrite>
     ea0:	8f e1       	ldi	r24, 0x1F	; 31
     ea2:	9e e4       	ldi	r25, 0x4E	; 78
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	f1 f7       	brne	.-4      	; 0xea4 <H_Lcd_WriteCommand+0x72>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <H_Lcd_WriteCommand+0x78>
     eaa:	00 00       	nop
	_delay_ms(5);
	#endif

}
     eac:	cf 91       	pop	r28
     eae:	08 95       	ret

00000eb0 <H_Lcd_Init>:
	M_Dio_PinMode(LCD_DATA_1_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_2_PIN,OUTPUT);
	M_Dio_PinMode(LCD_DATA_3_PIN,OUTPUT);
	#elif	LCD_MODE	==	_4_BIT_MODE
	#endif
	M_Dio_PinMode(LCD_DATA_4_PIN,OUTPUT);
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	88 e1       	ldi	r24, 0x18	; 24
     eb4:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_5_PIN,OUTPUT);
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	89 e1       	ldi	r24, 0x19	; 25
     ebc:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_6_PIN,OUTPUT);
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	8a e1       	ldi	r24, 0x1A	; 26
     ec4:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA_7_PIN,OUTPUT);
     ec8:	61 e0       	ldi	r22, 0x01	; 1
     eca:	8b e1       	ldi	r24, 0x1B	; 27
     ecc:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	84 e1       	ldi	r24, 0x14	; 20
     ed4:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	85 e1       	ldi	r24, 0x15	; 21
     edc:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);	
     ee0:	61 e0       	ldi	r22, 0x01	; 1
     ee2:	86 e1       	ldi	r24, 0x16	; 22
     ee4:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
     ee8:	2f ef       	ldi	r18, 0xFF	; 255
     eea:	83 ed       	ldi	r24, 0xD3	; 211
     eec:	90 e3       	ldi	r25, 0x30	; 48
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	80 40       	sbci	r24, 0x00	; 0
     ef2:	90 40       	sbci	r25, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <H_Lcd_Init+0x3e>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <H_Lcd_Init+0x48>
     ef8:	00 00       	nop
	_delay_ms(1000);
	
	#if			LCD_MODE	==	_8_BIT_MODE	
	H_Lcd_WriteCommand(LCD_CMD_SELECT_8_BIT_MODE);				// to select 8 bit mode
	#elif		LCD_MODE	==	_4_BIT_MODE	
	H_Lcd_WriteCommand(0X33);
     efa:	83 e3       	ldi	r24, 0x33	; 51
     efc:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(0X32);
     f00:	82 e3       	ldi	r24, 0x32	; 50
     f02:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_SELECT_4_BIT_MODE);				// to select 4 bit mode
     f06:	88 e2       	ldi	r24, 0x28	; 40
     f08:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
	#endif		
	H_Lcd_WriteCommand(LCD_CMD_DISPLAY_ON_CURSOR_OFF);			// to Display ON, cursor OFF
     f0c:	8c e0       	ldi	r24, 0x0C	; 12
     f0e:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);							// to clear LCD
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CMD_RETURN_HOME);					// to return home
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
     f1e:	08 95       	ret

00000f20 <H_Lcd_WriteNumber>:
// 	_delay_ms(5);
// 	#endif
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
     f20:	3f 92       	push	r3
     f22:	4f 92       	push	r4
     f24:	5f 92       	push	r5
     f26:	6f 92       	push	r6
     f28:	7f 92       	push	r7
     f2a:	8f 92       	push	r8
     f2c:	9f 92       	push	r9
     f2e:	af 92       	push	r10
     f30:	bf 92       	push	r11
     f32:	cf 92       	push	r12
     f34:	df 92       	push	r13
     f36:	ef 92       	push	r14
     f38:	ff 92       	push	r15
     f3a:	0f 93       	push	r16
     f3c:	1f 93       	push	r17
     f3e:	cf 93       	push	r28
     f40:	df 93       	push	r29
     f42:	00 d0       	rcall	.+0      	; 0xf44 <H_Lcd_WriteNumber+0x24>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <H_Lcd_WriteNumber+0x26>
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	4b 01       	movw	r8, r22
     f4c:	5c 01       	movw	r10, r24
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
     f4e:	2d b7       	in	r18, 0x3d	; 61
     f50:	3e b7       	in	r19, 0x3e	; 62
     f52:	3a 83       	std	Y+2, r19	; 0x02
     f54:	29 83       	std	Y+1, r18	; 0x01
// }

void H_Lcd_WriteNumber		(s32 Local_s32_Number)
{
 	s32 check_reminder = Local_s32_Number;
 	if (Local_s32_Number == 0)
     f56:	67 2b       	or	r22, r23
     f58:	68 2b       	or	r22, r24
     f5a:	69 2b       	or	r22, r25
     f5c:	19 f4       	brne	.+6      	; 0xf64 <H_Lcd_WriteNumber+0x44>
 	{
 		H_Lcd_WriteCharacter('0');
     f5e:	80 e3       	ldi	r24, 0x30	; 48
     f60:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_Lcd_WriteCharacter>
 	}
 	check_reminder*=1000;
     f64:	a8 ee       	ldi	r26, 0xE8	; 232
     f66:	b3 e0       	ldi	r27, 0x03	; 3
     f68:	a5 01       	movw	r20, r10
     f6a:	94 01       	movw	r18, r8
     f6c:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__muluhisi3>
 	
 	if ((check_reminder % 1000)== 0)
     f70:	28 ee       	ldi	r18, 0xE8	; 232
     f72:	33 e0       	ldi	r19, 0x03	; 3
     f74:	40 e0       	ldi	r20, 0x00	; 0
     f76:	50 e0       	ldi	r21, 0x00	; 0
     f78:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__divmodsi4>
     f7c:	67 2b       	or	r22, r23
     f7e:	68 2b       	or	r22, r24
     f80:	69 2b       	or	r22, r25
     f82:	09 f0       	breq	.+2      	; 0xf86 <H_Lcd_WriteNumber+0x66>
     f84:	8e c0       	rjmp	.+284    	; 0x10a2 <H_Lcd_WriteNumber+0x182>
 	{
 		if (Local_s32_Number < 0)
     f86:	bb 20       	and	r11, r11
     f88:	5c f4       	brge	.+22     	; 0xfa0 <H_Lcd_WriteNumber+0x80>
 		{
 		
 			H_Lcd_WriteCharacter('-');
     f8a:	8d e2       	ldi	r24, 0x2D	; 45
     f8c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_Lcd_WriteCharacter>
 			Local_s32_Number = Local_s32_Number * -1;
     f90:	b0 94       	com	r11
     f92:	a0 94       	com	r10
     f94:	90 94       	com	r9
     f96:	80 94       	com	r8
     f98:	81 1c       	adc	r8, r1
     f9a:	91 1c       	adc	r9, r1
     f9c:	a1 1c       	adc	r10, r1
     f9e:	b1 1c       	adc	r11, r1
 		}
 		if (Local_s32_Number > 0)
     fa0:	18 14       	cp	r1, r8
     fa2:	19 04       	cpc	r1, r9
     fa4:	1a 04       	cpc	r1, r10
     fa6:	1b 04       	cpc	r1, r11
     fa8:	0c f0       	brlt	.+2      	; 0xfac <H_Lcd_WriteNumber+0x8c>
     faa:	7b c0       	rjmp	.+246    	; 0x10a2 <H_Lcd_WriteNumber+0x182>
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
     fac:	a5 01       	movw	r20, r10
     fae:	94 01       	movw	r18, r8
 			u8  Local_u8_DigitCounter = 0;
     fb0:	31 2c       	mov	r3, r1
 			while (Local_u32_Printed_Number)
     fb2:	0e c0       	rjmp	.+28     	; 0xfd0 <H_Lcd_WriteNumber+0xb0>
 			{
 				if (Local_u32_Printed_Number)
     fb4:	21 15       	cp	r18, r1
     fb6:	31 05       	cpc	r19, r1
     fb8:	41 05       	cpc	r20, r1
     fba:	51 05       	cpc	r21, r1
     fbc:	49 f0       	breq	.+18     	; 0xfd0 <H_Lcd_WriteNumber+0xb0>
 				{
 					Local_u32_Printed_Number/= 10;
     fbe:	ca 01       	movw	r24, r20
     fc0:	b9 01       	movw	r22, r18
     fc2:	2a e0       	ldi	r18, 0x0A	; 10
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__udivmodsi4>
 					Local_u8_DigitCounter++;
     fce:	33 94       	inc	r3
 		}
 		if (Local_s32_Number > 0)
 		{
 			u32 Local_u32_Printed_Number = Local_s32_Number;
 			u8  Local_u8_DigitCounter = 0;
 			while (Local_u32_Printed_Number)
     fd0:	21 15       	cp	r18, r1
     fd2:	31 05       	cpc	r19, r1
     fd4:	41 05       	cpc	r20, r1
     fd6:	51 05       	cpc	r21, r1
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <H_Lcd_WriteNumber+0x94>
 					Local_u32_Printed_Number/= 10;
 					Local_u8_DigitCounter++;
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
     fda:	8d b7       	in	r24, 0x3d	; 61
     fdc:	9e b7       	in	r25, 0x3e	; 62
     fde:	9c 83       	std	Y+4, r25	; 0x04
     fe0:	8b 83       	std	Y+3, r24	; 0x03
     fe2:	83 2d       	mov	r24, r3
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	2d b7       	in	r18, 0x3d	; 61
     ff0:	3e b7       	in	r19, 0x3e	; 62
     ff2:	28 1b       	sub	r18, r24
     ff4:	39 0b       	sbc	r19, r25
     ff6:	0f b6       	in	r0, 0x3f	; 63
     ff8:	f8 94       	cli
     ffa:	3e bf       	out	0x3e, r19	; 62
     ffc:	0f be       	out	0x3f, r0	; 63
     ffe:	2d bf       	out	0x3d, r18	; 61
    1000:	0d b7       	in	r16, 0x3d	; 61
    1002:	1e b7       	in	r17, 0x3e	; 62
    1004:	0f 5f       	subi	r16, 0xFF	; 255
    1006:	1f 4f       	sbci	r17, 0xFF	; 255
 			u32 Local_u8_ArrCounter = 0;
    1008:	41 2c       	mov	r4, r1
    100a:	51 2c       	mov	r5, r1
    100c:	32 01       	movw	r6, r4
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    100e:	20 c0       	rjmp	.+64     	; 0x1050 <H_Lcd_WriteNumber+0x130>
 			{
 				Local_u8_ArrCounter ++;
    1010:	3f ef       	ldi	r19, 0xFF	; 255
    1012:	43 1a       	sub	r4, r19
    1014:	53 0a       	sbc	r5, r19
    1016:	63 0a       	sbc	r6, r19
    1018:	73 0a       	sbc	r7, r19
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
    101a:	c4 18       	sub	r12, r4
    101c:	d5 08       	sbc	r13, r5
    101e:	e6 08       	sbc	r14, r6
    1020:	f7 08       	sbc	r15, r7
    1022:	c5 01       	movw	r24, r10
    1024:	b4 01       	movw	r22, r8
    1026:	2a e0       	ldi	r18, 0x0A	; 10
    1028:	30 e0       	ldi	r19, 0x00	; 0
    102a:	40 e0       	ldi	r20, 0x00	; 0
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__divmodsi4>
    1032:	cc 0c       	add	r12, r12
    1034:	dd 1c       	adc	r13, r13
    1036:	cc 0c       	add	r12, r12
    1038:	dd 1c       	adc	r13, r13
    103a:	f8 01       	movw	r30, r16
    103c:	ec 0d       	add	r30, r12
    103e:	fd 1d       	adc	r31, r13
    1040:	60 83       	st	Z, r22
    1042:	71 83       	std	Z+1, r23	; 0x01
    1044:	82 83       	std	Z+2, r24	; 0x02
    1046:	93 83       	std	Z+3, r25	; 0x03
 				Local_s32_Number /= 10;
    1048:	82 2e       	mov	r8, r18
    104a:	93 2e       	mov	r9, r19
    104c:	a4 2e       	mov	r10, r20
    104e:	b5 2e       	mov	r11, r21
 				}
 
 			}
 			u32 arr[Local_u8_DigitCounter] ;
 			u32 Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    1050:	c3 2c       	mov	r12, r3
    1052:	d1 2c       	mov	r13, r1
    1054:	e1 2c       	mov	r14, r1
    1056:	f1 2c       	mov	r15, r1
    1058:	4c 14       	cp	r4, r12
    105a:	5d 04       	cpc	r5, r13
    105c:	6e 04       	cpc	r6, r14
    105e:	7f 04       	cpc	r7, r15
    1060:	b8 f2       	brcs	.-82     	; 0x1010 <H_Lcd_WriteNumber+0xf0>
    1062:	81 2c       	mov	r8, r1
    1064:	91 2c       	mov	r9, r1
    1066:	54 01       	movw	r10, r8
    1068:	10 c0       	rjmp	.+32     	; 0x108a <H_Lcd_WriteNumber+0x16a>
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
 			{
 				H_Lcd_WriteCharacter(arr[Local_u8_ArrCounter]+48);
    106a:	f4 01       	movw	r30, r8
    106c:	ee 0f       	add	r30, r30
    106e:	ff 1f       	adc	r31, r31
    1070:	ee 0f       	add	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	e0 0f       	add	r30, r16
    1076:	f1 1f       	adc	r31, r17
    1078:	80 81       	ld	r24, Z
    107a:	80 5d       	subi	r24, 0xD0	; 208
    107c:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_Lcd_WriteCharacter>
 				Local_u8_ArrCounter++;
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	88 1a       	sub	r8, r24
    1084:	98 0a       	sbc	r9, r24
    1086:	a8 0a       	sbc	r10, r24
    1088:	b8 0a       	sbc	r11, r24
 				arr[Local_u8_DigitCounter-Local_u8_ArrCounter] = Local_s32_Number % 10;
 				Local_s32_Number /= 10;
 			
 			}
 			Local_u8_ArrCounter = 0;
 			while (Local_u8_ArrCounter < Local_u8_DigitCounter)
    108a:	8c 14       	cp	r8, r12
    108c:	9d 04       	cpc	r9, r13
    108e:	ae 04       	cpc	r10, r14
    1090:	bf 04       	cpc	r11, r15
    1092:	58 f3       	brcs	.-42     	; 0x106a <H_Lcd_WriteNumber+0x14a>
    1094:	2b 81       	ldd	r18, Y+3	; 0x03
    1096:	3c 81       	ldd	r19, Y+4	; 0x04
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	3e bf       	out	0x3e, r19	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	2d bf       	out	0x3d, r18	; 61
 				Local_u8_ArrCounter++;
 			}	
 		}
 	}
 	
 }
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	9a 81       	ldd	r25, Y+2	; 0x02
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	9e bf       	out	0x3e, r25	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	8d bf       	out	0x3d, r24	; 61
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	1f 91       	pop	r17
    10be:	0f 91       	pop	r16
    10c0:	ff 90       	pop	r15
    10c2:	ef 90       	pop	r14
    10c4:	df 90       	pop	r13
    10c6:	cf 90       	pop	r12
    10c8:	bf 90       	pop	r11
    10ca:	af 90       	pop	r10
    10cc:	9f 90       	pop	r9
    10ce:	8f 90       	pop	r8
    10d0:	7f 90       	pop	r7
    10d2:	6f 90       	pop	r6
    10d4:	5f 90       	pop	r5
    10d6:	4f 90       	pop	r4
    10d8:	3f 90       	pop	r3
    10da:	08 95       	ret

000010dc <H_Lcd_GoTo>:
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
	H_Lcd_GoTo(0,0);
}

void H_Lcd_GoTo	(u8 Local_u8_Row,u8 Local_u8_Coloumn )
{
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <H_Lcd_GoTo+0x6>
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
	u8 arr [2] = {LCD_CMD_FIRST_ROW, LCD_CMD_SECOND_ROW};
    10e6:	90 e8       	ldi	r25, 0x80	; 128
    10e8:	99 83       	std	Y+1, r25	; 0x01
    10ea:	90 ec       	ldi	r25, 0xC0	; 192
    10ec:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
    10ee:	e1 e0       	ldi	r30, 0x01	; 1
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	ec 0f       	add	r30, r28
    10f4:	fd 1f       	adc	r31, r29
    10f6:	e8 0f       	add	r30, r24
    10f8:	f1 1d       	adc	r31, r1
    10fa:	80 81       	ld	r24, Z
    10fc:	86 0f       	add	r24, r22
    10fe:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
	
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	08 95       	ret

0000110c <H_Lcd_Clear>:
// }

void H_Lcd_Clear (void)
{
	
	H_Lcd_WriteCommand(LCD_CMD_CLEAR);	// to clear LCD
    110c:	81 e0       	ldi	r24, 0x01	; 1
    110e:	0e 94 19 07 	call	0xe32	; 0xe32 <H_Lcd_WriteCommand>
	H_Lcd_GoTo(0,0);
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
    111a:	08 95       	ret

0000111c <H_Lcd_WriteString>:
	H_Lcd_WriteCommand(arr [Local_u8_Row] + Local_u8_Coloumn);
	
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
    111c:	0f 93       	push	r16
    111e:	1f 93       	push	r17
    1120:	cf 93       	push	r28
    1122:	8c 01       	movw	r16, r24
	u8 Local_u8_Counter = 0;
    1124:	c0 e0       	ldi	r28, 0x00	; 0
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    1126:	09 c0       	rjmp	.+18     	; 0x113a <H_Lcd_WriteString+0x1e>
	{
		H_Lcd_WriteCharacter(Local_u8_PtrToString[Local_u8_Counter]);
    1128:	0e 94 e6 06 	call	0xdcc	; 0xdcc <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
    112c:	cf 5f       	subi	r28, 0xFF	; 255
		if (Local_u8_Counter == 16)
    112e:	c0 31       	cpi	r28, 0x10	; 16
    1130:	21 f4       	brne	.+8      	; 0x113a <H_Lcd_WriteString+0x1e>
		{
			H_Lcd_GoTo(1,0);
    1132:	60 e0       	ldi	r22, 0x00	; 0
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	0e 94 6e 08 	call	0x10dc	; 0x10dc <H_Lcd_GoTo>
}

void H_Lcd_WriteString		(u8* Local_u8_PtrToString)
{
	u8 Local_u8_Counter = 0;
	while (Local_u8_PtrToString[Local_u8_Counter] != '\0')
    113a:	f8 01       	movw	r30, r16
    113c:	ec 0f       	add	r30, r28
    113e:	f1 1d       	adc	r31, r1
    1140:	80 81       	ld	r24, Z
    1142:	81 11       	cpse	r24, r1
    1144:	f1 cf       	rjmp	.-30     	; 0x1128 <H_Lcd_WriteString+0xc>
		if (Local_u8_Counter == 16)
		{
			H_Lcd_GoTo(1,0);
		}
	}
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <H_Led_Init>:

#include "Led.h"

void	H_Led_Init(u8 Local_u8_Led_Number)
{	
	M_Dio_PinMode(Local_u8_Led_Number,OUTPUT);		
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
    1154:	08 95       	ret

00001156 <H_Lm35_Init>:

#include "Lm35.h"

void H_Lm35_Init				(void)
{
	M_Adc_Init();
    1156:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <M_Adc_Init>
    115a:	08 95       	ret

0000115c <H_PushButton_Init>:

#include "PushButton.h"

void H_PushButton_Init(u8 Local_u8_Push_Button_Number)
{
	switch(Local_u8_Push_Button_Number)
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	49 f0       	breq	.+18     	; 0x1172 <H_PushButton_Init+0x16>
    1160:	83 30       	cpi	r24, 0x03	; 3
    1162:	61 f0       	breq	.+24     	; 0x117c <H_PushButton_Init+0x20>
    1164:	81 30       	cpi	r24, 0x01	; 1
    1166:	71 f4       	brne	.+28     	; 0x1184 <H_PushButton_Init+0x28>
	{
		case PUSH_BUTTON_0: M_Dio_PinMode(PUSH_BUTTON_0_PIN,INPUT);		break;
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	8a e2       	ldi	r24, 0x2A	; 42
    116c:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
    1170:	08 95       	ret
		case PUSH_BUTTON_1: M_Dio_PinMode(PUSH_BUTTON_1_PIN,INPUT);		break;
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	8a e2       	ldi	r24, 0x2A	; 42
    1176:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
    117a:	08 95       	ret
		case PUSH_BUTTON_2: M_Dio_PinMode(PUSH_BUTTON_2_PIN,INPUT);		break;
    117c:	60 e0       	ldi	r22, 0x00	; 0
    117e:	8a e2       	ldi	r24, 0x2A	; 42
    1180:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
    1184:	08 95       	ret

00001186 <H_PushButton_Read>:
	}
}
u8	H_PushButton_Read(u8 Local_u8_Push_Button_Number)
{
	u8 Local_u8_Push_Button_Value = 0;
	switch(Local_u8_Push_Button_Number)
    1186:	82 30       	cpi	r24, 0x02	; 2
    1188:	39 f0       	breq	.+14     	; 0x1198 <H_PushButton_Read+0x12>
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	49 f0       	breq	.+18     	; 0x11a0 <H_PushButton_Read+0x1a>
    118e:	81 30       	cpi	r24, 0x01	; 1
    1190:	59 f4       	brne	.+22     	; 0x11a8 <H_PushButton_Read+0x22>
	{
		case PUSH_BUTTON_0: Local_u8_Push_Button_Value = M_Dio_PinRead(PUSH_BUTTON_0);  /*if( M_Dio_PinRead(PUSH_BUTTON_0_PIN) == PRESSED ) { _delay_ms(80); if( M_Dio_PinRead(PUSH_BUTTON_0_PIN) == PRESSED ) {while(M_Dio_PinRead(PUSH_BUTTON_0 == PRESSED));Local_u8_Push_Button_Value = PRESSED;}else Local_u8_Push_Button_Value = RELEASED;} else Local_u8_Push_Button_Value = RELEASED;*/break;
    1192:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
    1196:	08 95       	ret
		case PUSH_BUTTON_1: Local_u8_Push_Button_Value = M_Dio_PinRead(PUSH_BUTTON_1);  /*if( M_Dio_PinRead(PUSH_BUTTON_1_PIN) == PRESSED ) { _delay_ms(80); if( M_Dio_PinRead(PUSH_BUTTON_1_PIN) == PRESSED ) {while(M_Dio_PinRead(PUSH_BUTTON_1 == PRESSED));Local_u8_Push_Button_Value = PRESSED;}else Local_u8_Push_Button_Value = RELEASED;} else Local_u8_Push_Button_Value = RELEASED;*/break;
    1198:	82 e0       	ldi	r24, 0x02	; 2
    119a:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
    119e:	08 95       	ret
		case PUSH_BUTTON_2: Local_u8_Push_Button_Value = M_Dio_PinRead(PUSH_BUTTON_2); /*if( M_Dio_PinRead(PUSH_BUTTON_2_PIN) == PRESSED ) { _delay_ms(80); if( M_Dio_PinRead(PUSH_BUTTON_2_PIN) == PRESSED ) {while(M_Dio_PinRead(PUSH_BUTTON_2 == PRESSED));Local_u8_Push_Button_Value = PRESSED;}else Local_u8_Push_Button_Value = RELEASED;} else Local_u8_Push_Button_Value = RELEASED;*/break;
    11a0:	83 e0       	ldi	r24, 0x03	; 3
    11a2:	0e 94 36 0a 	call	0x146c	; 0x146c <M_Dio_PinRead>
    11a6:	08 95       	ret
		default:														break;
	}
}
u8	H_PushButton_Read(u8 Local_u8_Push_Button_Number)
{
	u8 Local_u8_Push_Button_Value = 0;
    11a8:	80 e0       	ldi	r24, 0x00	; 0
		default:														break;
	}
	
	
	return Local_u8_Push_Button_Value ;
}
    11aa:	08 95       	ret

000011ac <H_Servo_Init>:
	so I initialized an output pwm signal with frequency 50 hz
*/
void H_Servo_Init		(void)
{
	/*To Set Control Pin as Output*/
	M_Dio_PinMode(SERVO_OUTPUT_PIN, OUTPUT);
    11ac:	61 e0       	ldi	r22, 0x01	; 1
    11ae:	8d e2       	ldi	r24, 0x2D	; 45
    11b0:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	
	/*To initialize PWM*/
	M_Pwm1_Init();
    11b4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <M_Pwm1_Init>
		
	/*To set working Frequency*/
	M_Pwm1_SetFrequency(50);
    11b8:	82 e3       	ldi	r24, 0x32	; 50
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <M_Pwm1_SetFrequency>
    11c0:	08 95       	ret

000011c2 <H_Servo_SetAngel>:
/*To set desired angel for the servo step, Servo usually works from 5% to 10% duty cycle so I mapped 0-180 degrees to 5%-10% */
void H_Servo_SetAngel	(f32 Local_f32_DesiredAngel)
{
	/*scaling from 180 degrees to 5 to 10 Percents*/
 	
	Local_f32_DesiredAngel *= 5;
    11c2:	20 e0       	ldi	r18, 0x00	; 0
    11c4:	30 e0       	ldi	r19, 0x00	; 0
    11c6:	40 ea       	ldi	r20, 0xA0	; 160
    11c8:	50 e4       	ldi	r21, 0x40	; 64
    11ca:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__mulsf3>
 	Local_f32_DesiredAngel /= 180;
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	44 e3       	ldi	r20, 0x34	; 52
    11d4:	53 e4       	ldi	r21, 0x43	; 67
    11d6:	0e 94 94 0c 	call	0x1928	; 0x1928 <__divsf3>
	Local_f32_DesiredAngel += 5;
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 ea       	ldi	r20, 0xA0	; 160
    11e0:	50 e4       	ldi	r21, 0x40	; 64
    11e2:	0e 94 28 0c 	call	0x1850	; 0x1850 <__addsf3>
	 
	/*to set PWM Duty Cycle*/
 	M_Pwm1_SetDutyCycle(Local_f32_DesiredAngel);
    11e6:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <M_Pwm1_SetDutyCycle>
	 
	/*To start the clock*/
 	M_Pwm1_Start();
    11ea:	0e 94 0c 0c 	call	0x1818	; 0x1818 <M_Pwm1_Start>
    11ee:	08 95       	ret

000011f0 <M_Adc_Init>:
void (* Adc_void_CallBack) (void);

void M_Adc_Init (void)
{
	
	M_Dio_PinMode(PA1, INPUT);
    11f0:	60 e0       	ldi	r22, 0x00	; 0
    11f2:	8b e0       	ldi	r24, 0x0B	; 11
    11f4:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>
	/* Step 1	->		Set Voltage Reference  */
	#if			VOLTAGE_REFERENCE		==		AREF
	ClrBit(ADMUX,REF0);
	ClrBit(ADMUX,REF1);
	#elif		VOLTAGE_REFERENCE		==		AVCC
	SetBit(ADMUX,REF0);
    11f8:	87 b1       	in	r24, 0x07	; 7
    11fa:	80 64       	ori	r24, 0x40	; 64
    11fc:	87 b9       	out	0x07, r24	; 7
	ClrBit(ADMUX,REF1);
    11fe:	87 b1       	in	r24, 0x07	; 7
    1200:	8f 77       	andi	r24, 0x7F	; 127
    1202:	87 b9       	out	0x07, r24	; 7
	SetBit(ADMUX,REF1);
	#endif
	
	/* Step 2	->		Set Left Adjust Result  */
	#if			LEFT_ADJUST_RESULT		==		RIGHT_ADJUST
	ClrBit(ADMUX,ADLAR);
    1204:	87 b1       	in	r24, 0x07	; 7
    1206:	8f 7d       	andi	r24, 0xDF	; 223
    1208:	87 b9       	out	0x07, r24	; 7
	#elif		LEFT_ADJUST_RESULT		==		LEFT_ADJUST
	SetBit(ADMUX,ADLAR);
	#endif				
	
	/* Step 3	->		Set Pin Used  */
	ClrBit(ADMUX,MUX4); ClrBit(ADMUX,MUX3); ClrBit(ADMUX,MUX2); ClrBit(ADMUX,MUX1); ClrBit(ADMUX,MUX0);
    120a:	87 b1       	in	r24, 0x07	; 7
    120c:	8f 7e       	andi	r24, 0xEF	; 239
    120e:	87 b9       	out	0x07, r24	; 7
    1210:	87 b1       	in	r24, 0x07	; 7
    1212:	87 7f       	andi	r24, 0xF7	; 247
    1214:	87 b9       	out	0x07, r24	; 7
    1216:	87 b1       	in	r24, 0x07	; 7
    1218:	8b 7f       	andi	r24, 0xFB	; 251
    121a:	87 b9       	out	0x07, r24	; 7
    121c:	87 b1       	in	r24, 0x07	; 7
    121e:	8d 7f       	andi	r24, 0xFD	; 253
    1220:	87 b9       	out	0x07, r24	; 7
    1222:	87 b1       	in	r24, 0x07	; 7
    1224:	8e 7f       	andi	r24, 0xFE	; 254
    1226:	87 b9       	out	0x07, r24	; 7
	
	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_64	
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	ClrBit(ADCSRA,ADPS0);

	#elif		PRESCALER_SELECTION		==		DIVISION_FACTOR_128
	SetBit(ADCSRA,ADPS2); SetBit(ADCSRA,ADPS1);	SetBit(ADCSRA,ADPS0);
    1228:	86 b1       	in	r24, 0x06	; 6
    122a:	84 60       	ori	r24, 0x04	; 4
    122c:	86 b9       	out	0x06, r24	; 6
    122e:	86 b1       	in	r24, 0x06	; 6
    1230:	82 60       	ori	r24, 0x02	; 2
    1232:	86 b9       	out	0x06, r24	; 6
    1234:	86 b1       	in	r24, 0x06	; 6
    1236:	81 60       	ori	r24, 0x01	; 1
    1238:	86 b9       	out	0x06, r24	; 6
	#endif



	/* Step 5	->		set ADC Enable */
	SetBit(ADCSRA,ADEN);
    123a:	86 b1       	in	r24, 0x06	; 6
    123c:	80 68       	ori	r24, 0x80	; 128
    123e:	86 b9       	out	0x06, r24	; 6
	
	SetBit(ADCSRA,ADATE);
    1240:	86 b1       	in	r24, 0x06	; 6
    1242:	80 62       	ori	r24, 0x20	; 32
    1244:	86 b9       	out	0x06, r24	; 6
    1246:	08 95       	ret

00001248 <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case 1: TogBit(PORTA,Local_u8_Pin);		break;
		case 2: TogBit(PORTB,Local_u8_Pin);		break;
		case 3: TogBit(PORTC,Local_u8_Pin);		break;
		case 4: TogBit(PORTD,Local_u8_Pin);		break;
    1248:	9d ec       	ldi	r25, 0xCD	; 205
    124a:	89 9f       	mul	r24, r25
    124c:	91 2d       	mov	r25, r1
    124e:	11 24       	eor	r1, r1
    1250:	29 2f       	mov	r18, r25
    1252:	26 95       	lsr	r18
    1254:	26 95       	lsr	r18
    1256:	26 95       	lsr	r18
    1258:	22 0f       	add	r18, r18
    125a:	32 2f       	mov	r19, r18
    125c:	33 0f       	add	r19, r19
    125e:	33 0f       	add	r19, r19
    1260:	23 0f       	add	r18, r19
    1262:	82 1b       	sub	r24, r18
    1264:	28 2f       	mov	r18, r24
    1266:	96 95       	lsr	r25
    1268:	96 95       	lsr	r25
    126a:	96 95       	lsr	r25
    126c:	66 23       	and	r22, r22
    126e:	19 f0       	breq	.+6      	; 0x1276 <M_Dio_PinMode+0x2e>
    1270:	61 30       	cpi	r22, 0x01	; 1
    1272:	e1 f1       	breq	.+120    	; 0x12ec <M_Dio_PinMode+0xa4>
    1274:	08 95       	ret
    1276:	92 30       	cpi	r25, 0x02	; 2
    1278:	a9 f0       	breq	.+42     	; 0x12a4 <M_Dio_PinMode+0x5c>
    127a:	18 f4       	brcc	.+6      	; 0x1282 <M_Dio_PinMode+0x3a>
    127c:	91 30       	cpi	r25, 0x01	; 1
    127e:	31 f0       	breq	.+12     	; 0x128c <M_Dio_PinMode+0x44>
    1280:	08 95       	ret
    1282:	93 30       	cpi	r25, 0x03	; 3
    1284:	d9 f0       	breq	.+54     	; 0x12bc <M_Dio_PinMode+0x74>
    1286:	94 30       	cpi	r25, 0x04	; 4
    1288:	29 f1       	breq	.+74     	; 0x12d4 <M_Dio_PinMode+0x8c>
    128a:	08 95       	ret
    128c:	3a b3       	in	r19, 0x1a	; 26
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <M_Dio_PinMode+0x50>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	2a 95       	dec	r18
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <M_Dio_PinMode+0x4c>
    129c:	80 95       	com	r24
    129e:	83 23       	and	r24, r19
    12a0:	8a bb       	out	0x1a, r24	; 26
    12a2:	08 95       	ret
    12a4:	37 b3       	in	r19, 0x17	; 23
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	02 c0       	rjmp	.+4      	; 0x12b0 <M_Dio_PinMode+0x68>
    12ac:	88 0f       	add	r24, r24
    12ae:	99 1f       	adc	r25, r25
    12b0:	2a 95       	dec	r18
    12b2:	e2 f7       	brpl	.-8      	; 0x12ac <M_Dio_PinMode+0x64>
    12b4:	80 95       	com	r24
    12b6:	83 23       	and	r24, r19
    12b8:	87 bb       	out	0x17, r24	; 23
    12ba:	08 95       	ret
    12bc:	34 b3       	in	r19, 0x14	; 20
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 c0       	rjmp	.+4      	; 0x12c8 <M_Dio_PinMode+0x80>
    12c4:	88 0f       	add	r24, r24
    12c6:	99 1f       	adc	r25, r25
    12c8:	2a 95       	dec	r18
    12ca:	e2 f7       	brpl	.-8      	; 0x12c4 <M_Dio_PinMode+0x7c>
    12cc:	80 95       	com	r24
    12ce:	83 23       	and	r24, r19
    12d0:	84 bb       	out	0x14, r24	; 20
    12d2:	08 95       	ret
    12d4:	31 b3       	in	r19, 0x11	; 17
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	90 e0       	ldi	r25, 0x00	; 0
    12da:	02 c0       	rjmp	.+4      	; 0x12e0 <M_Dio_PinMode+0x98>
    12dc:	88 0f       	add	r24, r24
    12de:	99 1f       	adc	r25, r25
    12e0:	2a 95       	dec	r18
    12e2:	e2 f7       	brpl	.-8      	; 0x12dc <M_Dio_PinMode+0x94>
    12e4:	80 95       	com	r24
    12e6:	83 23       	and	r24, r19
    12e8:	81 bb       	out	0x11, r24	; 17
    12ea:	08 95       	ret
    12ec:	92 30       	cpi	r25, 0x02	; 2
    12ee:	a1 f0       	breq	.+40     	; 0x1318 <M_Dio_PinMode+0xd0>
    12f0:	18 f4       	brcc	.+6      	; 0x12f8 <M_Dio_PinMode+0xb0>
    12f2:	91 30       	cpi	r25, 0x01	; 1
    12f4:	31 f0       	breq	.+12     	; 0x1302 <M_Dio_PinMode+0xba>
    12f6:	08 95       	ret
    12f8:	93 30       	cpi	r25, 0x03	; 3
    12fa:	c9 f0       	breq	.+50     	; 0x132e <M_Dio_PinMode+0xe6>
    12fc:	94 30       	cpi	r25, 0x04	; 4
    12fe:	11 f1       	breq	.+68     	; 0x1344 <M_Dio_PinMode+0xfc>
    1300:	08 95       	ret
    1302:	3a b3       	in	r19, 0x1a	; 26
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <M_Dio_PinMode+0xc6>
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	2a 95       	dec	r18
    1310:	e2 f7       	brpl	.-8      	; 0x130a <M_Dio_PinMode+0xc2>
    1312:	83 2b       	or	r24, r19
    1314:	8a bb       	out	0x1a, r24	; 26
    1316:	08 95       	ret
    1318:	37 b3       	in	r19, 0x17	; 23
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <M_Dio_PinMode+0xdc>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	2a 95       	dec	r18
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <M_Dio_PinMode+0xd8>
    1328:	83 2b       	or	r24, r19
    132a:	87 bb       	out	0x17, r24	; 23
    132c:	08 95       	ret
    132e:	34 b3       	in	r19, 0x14	; 20
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 c0       	rjmp	.+4      	; 0x133a <M_Dio_PinMode+0xf2>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	2a 95       	dec	r18
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <M_Dio_PinMode+0xee>
    133e:	83 2b       	or	r24, r19
    1340:	84 bb       	out	0x14, r24	; 20
    1342:	08 95       	ret
    1344:	31 b3       	in	r19, 0x11	; 17
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <M_Dio_PinMode+0x108>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	2a 95       	dec	r18
    1352:	e2 f7       	brpl	.-8      	; 0x134c <M_Dio_PinMode+0x104>
    1354:	83 2b       	or	r24, r19
    1356:	81 bb       	out	0x11, r24	; 17
    1358:	08 95       	ret

0000135a <M_Dio_PinWrite>:
    135a:	9d ec       	ldi	r25, 0xCD	; 205
    135c:	89 9f       	mul	r24, r25
    135e:	91 2d       	mov	r25, r1
    1360:	11 24       	eor	r1, r1
    1362:	29 2f       	mov	r18, r25
    1364:	26 95       	lsr	r18
    1366:	26 95       	lsr	r18
    1368:	26 95       	lsr	r18
    136a:	22 0f       	add	r18, r18
    136c:	32 2f       	mov	r19, r18
    136e:	33 0f       	add	r19, r19
    1370:	33 0f       	add	r19, r19
    1372:	23 0f       	add	r18, r19
    1374:	82 1b       	sub	r24, r18
    1376:	28 2f       	mov	r18, r24
    1378:	96 95       	lsr	r25
    137a:	96 95       	lsr	r25
    137c:	96 95       	lsr	r25
    137e:	66 23       	and	r22, r22
    1380:	19 f0       	breq	.+6      	; 0x1388 <M_Dio_PinWrite+0x2e>
    1382:	61 30       	cpi	r22, 0x01	; 1
    1384:	e1 f1       	breq	.+120    	; 0x13fe <M_Dio_PinWrite+0xa4>
    1386:	08 95       	ret
    1388:	92 30       	cpi	r25, 0x02	; 2
    138a:	a9 f0       	breq	.+42     	; 0x13b6 <M_Dio_PinWrite+0x5c>
    138c:	18 f4       	brcc	.+6      	; 0x1394 <M_Dio_PinWrite+0x3a>
    138e:	91 30       	cpi	r25, 0x01	; 1
    1390:	31 f0       	breq	.+12     	; 0x139e <M_Dio_PinWrite+0x44>
    1392:	08 95       	ret
    1394:	93 30       	cpi	r25, 0x03	; 3
    1396:	d9 f0       	breq	.+54     	; 0x13ce <M_Dio_PinWrite+0x74>
    1398:	94 30       	cpi	r25, 0x04	; 4
    139a:	29 f1       	breq	.+74     	; 0x13e6 <M_Dio_PinWrite+0x8c>
    139c:	08 95       	ret
    139e:	3b b3       	in	r19, 0x1b	; 27
    13a0:	81 e0       	ldi	r24, 0x01	; 1
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <M_Dio_PinWrite+0x50>
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	2a 95       	dec	r18
    13ac:	e2 f7       	brpl	.-8      	; 0x13a6 <M_Dio_PinWrite+0x4c>
    13ae:	80 95       	com	r24
    13b0:	83 23       	and	r24, r19
    13b2:	8b bb       	out	0x1b, r24	; 27
    13b4:	08 95       	ret
    13b6:	38 b3       	in	r19, 0x18	; 24
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <M_Dio_PinWrite+0x68>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	2a 95       	dec	r18
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <M_Dio_PinWrite+0x64>
    13c6:	80 95       	com	r24
    13c8:	83 23       	and	r24, r19
    13ca:	88 bb       	out	0x18, r24	; 24
    13cc:	08 95       	ret
    13ce:	35 b3       	in	r19, 0x15	; 21
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <M_Dio_PinWrite+0x80>
    13d6:	88 0f       	add	r24, r24
    13d8:	99 1f       	adc	r25, r25
    13da:	2a 95       	dec	r18
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <M_Dio_PinWrite+0x7c>
    13de:	80 95       	com	r24
    13e0:	83 23       	and	r24, r19
    13e2:	85 bb       	out	0x15, r24	; 21
    13e4:	08 95       	ret
    13e6:	32 b3       	in	r19, 0x12	; 18
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 c0       	rjmp	.+4      	; 0x13f2 <M_Dio_PinWrite+0x98>
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	2a 95       	dec	r18
    13f4:	e2 f7       	brpl	.-8      	; 0x13ee <M_Dio_PinWrite+0x94>
    13f6:	80 95       	com	r24
    13f8:	83 23       	and	r24, r19
    13fa:	82 bb       	out	0x12, r24	; 18
    13fc:	08 95       	ret
    13fe:	92 30       	cpi	r25, 0x02	; 2
    1400:	a1 f0       	breq	.+40     	; 0x142a <M_Dio_PinWrite+0xd0>
    1402:	18 f4       	brcc	.+6      	; 0x140a <M_Dio_PinWrite+0xb0>
    1404:	91 30       	cpi	r25, 0x01	; 1
    1406:	31 f0       	breq	.+12     	; 0x1414 <M_Dio_PinWrite+0xba>
    1408:	08 95       	ret
    140a:	93 30       	cpi	r25, 0x03	; 3
    140c:	c9 f0       	breq	.+50     	; 0x1440 <M_Dio_PinWrite+0xe6>
    140e:	94 30       	cpi	r25, 0x04	; 4
    1410:	11 f1       	breq	.+68     	; 0x1456 <M_Dio_PinWrite+0xfc>
    1412:	08 95       	ret
    1414:	3b b3       	in	r19, 0x1b	; 27
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <M_Dio_PinWrite+0xc6>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	2a 95       	dec	r18
    1422:	e2 f7       	brpl	.-8      	; 0x141c <M_Dio_PinWrite+0xc2>
    1424:	83 2b       	or	r24, r19
    1426:	8b bb       	out	0x1b, r24	; 27
    1428:	08 95       	ret
    142a:	38 b3       	in	r19, 0x18	; 24
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <M_Dio_PinWrite+0xdc>
    1432:	88 0f       	add	r24, r24
    1434:	99 1f       	adc	r25, r25
    1436:	2a 95       	dec	r18
    1438:	e2 f7       	brpl	.-8      	; 0x1432 <M_Dio_PinWrite+0xd8>
    143a:	83 2b       	or	r24, r19
    143c:	88 bb       	out	0x18, r24	; 24
    143e:	08 95       	ret
    1440:	35 b3       	in	r19, 0x15	; 21
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <M_Dio_PinWrite+0xf2>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	2a 95       	dec	r18
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <M_Dio_PinWrite+0xee>
    1450:	83 2b       	or	r24, r19
    1452:	85 bb       	out	0x15, r24	; 21
    1454:	08 95       	ret
    1456:	32 b3       	in	r19, 0x12	; 18
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 c0       	rjmp	.+4      	; 0x1462 <M_Dio_PinWrite+0x108>
    145e:	88 0f       	add	r24, r24
    1460:	99 1f       	adc	r25, r25
    1462:	2a 95       	dec	r18
    1464:	e2 f7       	brpl	.-8      	; 0x145e <M_Dio_PinWrite+0x104>
    1466:	83 2b       	or	r24, r19
    1468:	82 bb       	out	0x12, r24	; 18
    146a:	08 95       	ret

0000146c <M_Dio_PinRead>:
	
}

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
    146c:	9d ec       	ldi	r25, 0xCD	; 205
    146e:	89 9f       	mul	r24, r25
    1470:	91 2d       	mov	r25, r1
    1472:	11 24       	eor	r1, r1
    1474:	29 2f       	mov	r18, r25
    1476:	26 95       	lsr	r18
    1478:	26 95       	lsr	r18
    147a:	26 95       	lsr	r18
    147c:	22 0f       	add	r18, r18
    147e:	32 2f       	mov	r19, r18
    1480:	33 0f       	add	r19, r19
    1482:	33 0f       	add	r19, r19
    1484:	23 0f       	add	r18, r19
    1486:	82 1b       	sub	r24, r18
    1488:	28 2f       	mov	r18, r24
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
    148a:	89 2f       	mov	r24, r25
    148c:	86 95       	lsr	r24
    148e:	86 95       	lsr	r24
    1490:	86 95       	lsr	r24
	u8 Local_u8_Pin_Value	=	0;
	
	switch(Local_u8_Port)
    1492:	82 30       	cpi	r24, 0x02	; 2
    1494:	91 f0       	breq	.+36     	; 0x14ba <M_Dio_PinRead+0x4e>
    1496:	18 f4       	brcc	.+6      	; 0x149e <M_Dio_PinRead+0x32>
    1498:	81 30       	cpi	r24, 0x01	; 1
    149a:	31 f0       	breq	.+12     	; 0x14a8 <M_Dio_PinRead+0x3c>
    149c:	29 c0       	rjmp	.+82     	; 0x14f0 <M_Dio_PinRead+0x84>
    149e:	83 30       	cpi	r24, 0x03	; 3
    14a0:	a9 f0       	breq	.+42     	; 0x14cc <M_Dio_PinRead+0x60>
    14a2:	84 30       	cpi	r24, 0x04	; 4
    14a4:	e1 f0       	breq	.+56     	; 0x14de <M_Dio_PinRead+0x72>
    14a6:	24 c0       	rjmp	.+72     	; 0x14f0 <M_Dio_PinRead+0x84>
	{
		case 1: Local_u8_Pin_Value = GetBit(PINA,Local_u8_Pin);		break;
    14a8:	89 b3       	in	r24, 0x19	; 25
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <M_Dio_PinRead+0x46>
    14ae:	95 95       	asr	r25
    14b0:	87 95       	ror	r24
    14b2:	2a 95       	dec	r18
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <M_Dio_PinRead+0x42>
    14b6:	81 70       	andi	r24, 0x01	; 1
    14b8:	08 95       	ret
		case 2: Local_u8_Pin_Value = GetBit(PINB,Local_u8_Pin);		break;
    14ba:	86 b3       	in	r24, 0x16	; 22
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <M_Dio_PinRead+0x58>
    14c0:	95 95       	asr	r25
    14c2:	87 95       	ror	r24
    14c4:	2a 95       	dec	r18
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <M_Dio_PinRead+0x54>
    14c8:	81 70       	andi	r24, 0x01	; 1
    14ca:	08 95       	ret
		case 3: Local_u8_Pin_Value = GetBit(PINC,Local_u8_Pin);		break;
    14cc:	83 b3       	in	r24, 0x13	; 19
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 c0       	rjmp	.+4      	; 0x14d6 <M_Dio_PinRead+0x6a>
    14d2:	95 95       	asr	r25
    14d4:	87 95       	ror	r24
    14d6:	2a 95       	dec	r18
    14d8:	e2 f7       	brpl	.-8      	; 0x14d2 <M_Dio_PinRead+0x66>
    14da:	81 70       	andi	r24, 0x01	; 1
    14dc:	08 95       	ret
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
    14de:	80 b3       	in	r24, 0x10	; 16
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <M_Dio_PinRead+0x7c>
    14e4:	95 95       	asr	r25
    14e6:	87 95       	ror	r24
    14e8:	2a 95       	dec	r18
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <M_Dio_PinRead+0x78>
    14ec:	81 70       	andi	r24, 0x01	; 1
    14ee:	08 95       	ret

u8 M_Dio_PinRead	(u8	Local_u8_PinNumber)
{
	u8 Local_u8_Pin					=	Local_u8_PinNumber % 10;
	u8 Local_u8_Port				=	Local_u8_PinNumber / 10;
	u8 Local_u8_Pin_Value	=	0;
    14f0:	80 e0       	ldi	r24, 0x00	; 0
		case 4: Local_u8_Pin_Value = GetBit(PIND,Local_u8_Pin);		break;
		default:								break;
	}
	
	return Local_u8_Pin_Value;
}
    14f2:	08 95       	ret

000014f4 <M_Dio_PinPullUp>:

void M_Dio_PinPullUp	(u8 Local_u8_PinNumber, u8 Local_u8_PullUpState)
{
	u8 Local_u8_Pin		=	Local_u8_PinNumber % 10;
    14f4:	9d ec       	ldi	r25, 0xCD	; 205
    14f6:	89 9f       	mul	r24, r25
    14f8:	91 2d       	mov	r25, r1
    14fa:	11 24       	eor	r1, r1
    14fc:	29 2f       	mov	r18, r25
    14fe:	26 95       	lsr	r18
    1500:	26 95       	lsr	r18
    1502:	26 95       	lsr	r18
    1504:	22 0f       	add	r18, r18
    1506:	32 2f       	mov	r19, r18
    1508:	33 0f       	add	r19, r19
    150a:	33 0f       	add	r19, r19
    150c:	23 0f       	add	r18, r19
    150e:	82 1b       	sub	r24, r18
    1510:	28 2f       	mov	r18, r24
	u8 Local_u8_Port	=	Local_u8_PinNumber / 10;
    1512:	96 95       	lsr	r25
    1514:	96 95       	lsr	r25
    1516:	96 95       	lsr	r25
	switch(Local_u8_PullUpState)
    1518:	66 23       	and	r22, r22
    151a:	f1 f1       	breq	.+124    	; 0x1598 <M_Dio_PinPullUp+0xa4>
    151c:	61 30       	cpi	r22, 0x01	; 1
    151e:	09 f0       	breq	.+2      	; 0x1522 <M_Dio_PinPullUp+0x2e>
    1520:	71 c0       	rjmp	.+226    	; 0x1604 <M_Dio_PinPullUp+0x110>
	{
		case PULLUP_DISABLE:
		switch(Local_u8_Port)
    1522:	92 30       	cpi	r25, 0x02	; 2
    1524:	a9 f0       	breq	.+42     	; 0x1550 <M_Dio_PinPullUp+0x5c>
    1526:	18 f4       	brcc	.+6      	; 0x152e <M_Dio_PinPullUp+0x3a>
    1528:	91 30       	cpi	r25, 0x01	; 1
    152a:	31 f0       	breq	.+12     	; 0x1538 <M_Dio_PinPullUp+0x44>
    152c:	08 95       	ret
    152e:	93 30       	cpi	r25, 0x03	; 3
    1530:	d9 f0       	breq	.+54     	; 0x1568 <M_Dio_PinPullUp+0x74>
    1532:	94 30       	cpi	r25, 0x04	; 4
    1534:	29 f1       	breq	.+74     	; 0x1580 <M_Dio_PinPullUp+0x8c>
    1536:	08 95       	ret
		{
			case 1: ClrBit(PORTA,Local_u8_Pin);		break;
    1538:	3b b3       	in	r19, 0x1b	; 27
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <M_Dio_PinPullUp+0x50>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	2a 95       	dec	r18
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <M_Dio_PinPullUp+0x4c>
    1548:	80 95       	com	r24
    154a:	83 23       	and	r24, r19
    154c:	8b bb       	out	0x1b, r24	; 27
    154e:	08 95       	ret
			case 2: ClrBit(PORTB,Local_u8_Pin);		break;
    1550:	38 b3       	in	r19, 0x18	; 24
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <M_Dio_PinPullUp+0x68>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	2a 95       	dec	r18
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <M_Dio_PinPullUp+0x64>
    1560:	80 95       	com	r24
    1562:	83 23       	and	r24, r19
    1564:	88 bb       	out	0x18, r24	; 24
    1566:	08 95       	ret
			case 3: ClrBit(PORTC,Local_u8_Pin);		break;
    1568:	35 b3       	in	r19, 0x15	; 21
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <M_Dio_PinPullUp+0x80>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	2a 95       	dec	r18
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <M_Dio_PinPullUp+0x7c>
    1578:	80 95       	com	r24
    157a:	83 23       	and	r24, r19
    157c:	85 bb       	out	0x15, r24	; 21
    157e:	08 95       	ret
			case 4: ClrBit(PORTD,Local_u8_Pin);		break;
    1580:	32 b3       	in	r19, 0x12	; 18
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	02 c0       	rjmp	.+4      	; 0x158c <M_Dio_PinPullUp+0x98>
    1588:	88 0f       	add	r24, r24
    158a:	99 1f       	adc	r25, r25
    158c:	2a 95       	dec	r18
    158e:	e2 f7       	brpl	.-8      	; 0x1588 <M_Dio_PinPullUp+0x94>
    1590:	80 95       	com	r24
    1592:	83 23       	and	r24, r19
    1594:	82 bb       	out	0x12, r24	; 18
    1596:	08 95       	ret
			default:								break;
		}
		break;
		
		case PULLUP_ENABLE:
		switch(Local_u8_Port)
    1598:	92 30       	cpi	r25, 0x02	; 2
    159a:	a1 f0       	breq	.+40     	; 0x15c4 <M_Dio_PinPullUp+0xd0>
    159c:	18 f4       	brcc	.+6      	; 0x15a4 <M_Dio_PinPullUp+0xb0>
    159e:	91 30       	cpi	r25, 0x01	; 1
    15a0:	31 f0       	breq	.+12     	; 0x15ae <M_Dio_PinPullUp+0xba>
    15a2:	08 95       	ret
    15a4:	93 30       	cpi	r25, 0x03	; 3
    15a6:	c9 f0       	breq	.+50     	; 0x15da <M_Dio_PinPullUp+0xe6>
    15a8:	94 30       	cpi	r25, 0x04	; 4
    15aa:	11 f1       	breq	.+68     	; 0x15f0 <M_Dio_PinPullUp+0xfc>
    15ac:	08 95       	ret
		{
			case 1: SetBit(PORTA,Local_u8_Pin);		break;
    15ae:	3b b3       	in	r19, 0x1b	; 27
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <M_Dio_PinPullUp+0xc6>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	2a 95       	dec	r18
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <M_Dio_PinPullUp+0xc2>
    15be:	83 2b       	or	r24, r19
    15c0:	8b bb       	out	0x1b, r24	; 27
    15c2:	08 95       	ret
			case 2: SetBit(PORTB,Local_u8_Pin);		break;
    15c4:	38 b3       	in	r19, 0x18	; 24
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 c0       	rjmp	.+4      	; 0x15d0 <M_Dio_PinPullUp+0xdc>
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	2a 95       	dec	r18
    15d2:	e2 f7       	brpl	.-8      	; 0x15cc <M_Dio_PinPullUp+0xd8>
    15d4:	83 2b       	or	r24, r19
    15d6:	88 bb       	out	0x18, r24	; 24
    15d8:	08 95       	ret
			case 3: SetBit(PORTC,Local_u8_Pin);		break;
    15da:	35 b3       	in	r19, 0x15	; 21
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <M_Dio_PinPullUp+0xf2>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	2a 95       	dec	r18
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <M_Dio_PinPullUp+0xee>
    15ea:	83 2b       	or	r24, r19
    15ec:	85 bb       	out	0x15, r24	; 21
    15ee:	08 95       	ret
			case 4: SetBit(PORTD,Local_u8_Pin);		break;
    15f0:	32 b3       	in	r19, 0x12	; 18
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <M_Dio_PinPullUp+0x108>
    15f8:	88 0f       	add	r24, r24
    15fa:	99 1f       	adc	r25, r25
    15fc:	2a 95       	dec	r18
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <M_Dio_PinPullUp+0x104>
    1600:	83 2b       	or	r24, r19
    1602:	82 bb       	out	0x12, r24	; 18
    1604:	08 95       	ret

00001606 <M_ExtInt_Init>:

void M_ExtInt_Init (u8 Local_u8_IntNumber)
{
	
	/* Step 1	->		Choose Sense Control */
	switch(Local_u8_IntNumber)
    1606:	86 30       	cpi	r24, 0x06	; 6
    1608:	29 f0       	breq	.+10     	; 0x1614 <M_ExtInt_Init+0xe>
    160a:	87 30       	cpi	r24, 0x07	; 7
    160c:	51 f0       	breq	.+20     	; 0x1622 <M_ExtInt_Init+0x1c>
    160e:	85 30       	cpi	r24, 0x05	; 5
    1610:	91 f4       	brne	.+36     	; 0x1636 <M_ExtInt_Init+0x30>
    1612:	0e c0       	rjmp	.+28     	; 0x1630 <M_ExtInt_Init+0x2a>
		ClrBit(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		FALLING_EDGE
		ClrBit(MCUCR,ISC00);
		SetBit(MCUCR,ISC01);
		#elif		SENSE_CONTROL_0		==		RISING_EDGE
		SetBit(MCUCR,ISC00);
    1614:	95 b7       	in	r25, 0x35	; 53
    1616:	91 60       	ori	r25, 0x01	; 1
    1618:	95 bf       	out	0x35, r25	; 53
		SetBit(MCUCR,ISC01);
    161a:	95 b7       	in	r25, 0x35	; 53
    161c:	92 60       	ori	r25, 0x02	; 2
    161e:	95 bf       	out	0x35, r25	; 53
		#endif
		break;
    1620:	0a c0       	rjmp	.+20     	; 0x1636 <M_ExtInt_Init+0x30>
		ClrBit(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		FALLING_EDGE
		ClrBit(MCUCR,ISC10);
		SetBit(MCUCR,ISC11);
		#elif		SENSE_CONTROL_1		==		RISING_EDGE
		SetBit(MCUCR,ISC10);
    1622:	95 b7       	in	r25, 0x35	; 53
    1624:	94 60       	ori	r25, 0x04	; 4
    1626:	95 bf       	out	0x35, r25	; 53
		SetBit(MCUCR,ISC11);
    1628:	95 b7       	in	r25, 0x35	; 53
    162a:	98 60       	ori	r25, 0x08	; 8
    162c:	95 bf       	out	0x35, r25	; 53
		#endif
		break;
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <M_ExtInt_Init+0x30>
		
		case INT2:
		#if			SENSE_CONTROL_2		==		FALLING_EDGE
		ClrBit(MCUCR,ISC2);
		#elif		SENSE_CONTROL_2		==		RISING_EDGE
		SetBit(MCUCSR,ISC2);
    1630:	94 b7       	in	r25, 0x34	; 52
    1632:	90 64       	ori	r25, 0x40	; 64
    1634:	94 bf       	out	0x34, r25	; 52
		
		default: 
		break;
	}
	/* Step 2	->		Enable Peripheral Interrupt */
	switch(Local_u8_IntNumber)
    1636:	86 30       	cpi	r24, 0x06	; 6
    1638:	29 f0       	breq	.+10     	; 0x1644 <M_ExtInt_Init+0x3e>
    163a:	87 30       	cpi	r24, 0x07	; 7
    163c:	39 f0       	breq	.+14     	; 0x164c <M_ExtInt_Init+0x46>
    163e:	85 30       	cpi	r24, 0x05	; 5
    1640:	61 f4       	brne	.+24     	; 0x165a <M_ExtInt_Init+0x54>
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <M_ExtInt_Init+0x4e>
	{
		case INT0:	SetBit(GICR,INT0);		break;
    1644:	8b b7       	in	r24, 0x3b	; 59
    1646:	80 64       	ori	r24, 0x40	; 64
    1648:	8b bf       	out	0x3b, r24	; 59
    164a:	07 c0       	rjmp	.+14     	; 0x165a <M_ExtInt_Init+0x54>
		case INT1:	SetBit(GICR,INT1);		break;
    164c:	8b b7       	in	r24, 0x3b	; 59
    164e:	80 68       	ori	r24, 0x80	; 128
    1650:	8b bf       	out	0x3b, r24	; 59
    1652:	03 c0       	rjmp	.+6      	; 0x165a <M_ExtInt_Init+0x54>
		case INT2:	SetBit(GICR,INT2);		break;
    1654:	8b b7       	in	r24, 0x3b	; 59
    1656:	80 62       	ori	r24, 0x20	; 32
    1658:	8b bf       	out	0x3b, r24	; 59
		default:							break;		
	}
	
	
	/* Step 3	->		Enable Global Interrupt */
	SetBit(SREG,Ibit);
    165a:	8f b7       	in	r24, 0x3f	; 63
    165c:	80 68       	ori	r24, 0x80	; 128
    165e:	8f bf       	out	0x3f, r24	; 63
    1660:	08 95       	ret

00001662 <M_ExtInt_SetCallBackInt0>:
}

void M_ExtInt_SetCallBackInt0 (void (*Local_void_ptr) (void))
{
	ExtInt_void_CallBackInt0 = Local_void_ptr;
    1662:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <ExtInt_void_CallBackInt0+0x1>
    1666:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <ExtInt_void_CallBackInt0>
    166a:	08 95       	ret

0000166c <M_I2c_Init>:
//     SetBit(TWCR,6);					 //   later
// 	SetBit(TWCR,7);                  //   to clear the flag bit
// 	while(GetBit(TWCR,7) == 0);
// 	while((TWSR & 0xF8) != RD_BYTE_WITH_ACK);
// 	return TWDR;
}
    166c:	86 b7       	in	r24, 0x36	; 54
    166e:	8b 7f       	andi	r24, 0xFB	; 251
    1670:	86 bf       	out	0x36, r24	; 54
    1672:	8c e0       	ldi	r24, 0x0C	; 12
    1674:	80 b9       	out	0x00, r24	; 0
    1676:	86 b7       	in	r24, 0x36	; 54
    1678:	84 60       	ori	r24, 0x04	; 4
    167a:	86 bf       	out	0x36, r24	; 54
    167c:	8f e3       	ldi	r24, 0x3F	; 63
    167e:	9c e9       	ldi	r25, 0x9C	; 156
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <M_I2c_Init+0x14>
    1684:	00 c0       	rjmp	.+0      	; 0x1686 <M_I2c_Init+0x1a>
    1686:	00 00       	nop
    1688:	08 95       	ret

0000168a <M_I2c_StartCondition>:
    168a:	86 b7       	in	r24, 0x36	; 54
    168c:	80 62       	ori	r24, 0x20	; 32
    168e:	86 bf       	out	0x36, r24	; 54
    1690:	86 b7       	in	r24, 0x36	; 54
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	86 bf       	out	0x36, r24	; 54
    1696:	06 b6       	in	r0, 0x36	; 54
    1698:	07 fe       	sbrs	r0, 7
    169a:	fd cf       	rjmp	.-6      	; 0x1696 <M_I2c_StartCondition+0xc>
    169c:	81 b1       	in	r24, 0x01	; 1
    169e:	88 7f       	andi	r24, 0xF8	; 248
    16a0:	88 30       	cpi	r24, 0x08	; 8
    16a2:	e1 f7       	brne	.-8      	; 0x169c <M_I2c_StartCondition+0x12>
    16a4:	8f e3       	ldi	r24, 0x3F	; 63
    16a6:	9c e9       	ldi	r25, 0x9C	; 156
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <M_I2c_StartCondition+0x1e>
    16ac:	00 c0       	rjmp	.+0      	; 0x16ae <M_I2c_StartCondition+0x24>
    16ae:	00 00       	nop
    16b0:	08 95       	ret

000016b2 <M_I2c_SendSlaveAddressWrite>:
    16b2:	88 0f       	add	r24, r24
    16b4:	83 b9       	out	0x03, r24	; 3
    16b6:	86 b7       	in	r24, 0x36	; 54
    16b8:	80 68       	ori	r24, 0x80	; 128
    16ba:	86 bf       	out	0x36, r24	; 54
    16bc:	06 b6       	in	r0, 0x36	; 54
    16be:	07 fe       	sbrs	r0, 7
    16c0:	fd cf       	rjmp	.-6      	; 0x16bc <M_I2c_SendSlaveAddressWrite+0xa>
    16c2:	81 b1       	in	r24, 0x01	; 1
    16c4:	88 7f       	andi	r24, 0xF8	; 248
    16c6:	88 31       	cpi	r24, 0x18	; 24
    16c8:	e1 f7       	brne	.-8      	; 0x16c2 <M_I2c_SendSlaveAddressWrite+0x10>
    16ca:	8f e3       	ldi	r24, 0x3F	; 63
    16cc:	9c e9       	ldi	r25, 0x9C	; 156
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	f1 f7       	brne	.-4      	; 0x16ce <M_I2c_SendSlaveAddressWrite+0x1c>
    16d2:	00 c0       	rjmp	.+0      	; 0x16d4 <M_I2c_SendSlaveAddressWrite+0x22>
    16d4:	00 00       	nop
    16d6:	08 95       	ret

000016d8 <M_I2c_SendSlaveAddressRead>:
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	81 60       	ori	r24, 0x01	; 1
    16e0:	83 b9       	out	0x03, r24	; 3
    16e2:	86 b7       	in	r24, 0x36	; 54
    16e4:	80 68       	ori	r24, 0x80	; 128
    16e6:	86 bf       	out	0x36, r24	; 54
    16e8:	06 b6       	in	r0, 0x36	; 54
    16ea:	07 fe       	sbrs	r0, 7
    16ec:	fd cf       	rjmp	.-6      	; 0x16e8 <M_I2c_SendSlaveAddressRead+0x10>
    16ee:	81 b1       	in	r24, 0x01	; 1
    16f0:	88 7f       	andi	r24, 0xF8	; 248
    16f2:	80 34       	cpi	r24, 0x40	; 64
    16f4:	e1 f7       	brne	.-8      	; 0x16ee <M_I2c_SendSlaveAddressRead+0x16>
    16f6:	8f e3       	ldi	r24, 0x3F	; 63
    16f8:	9c e9       	ldi	r25, 0x9C	; 156
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	f1 f7       	brne	.-4      	; 0x16fa <M_I2c_SendSlaveAddressRead+0x22>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <M_I2c_SendSlaveAddressRead+0x28>
    1700:	00 00       	nop
    1702:	08 95       	ret

00001704 <M_I2c_SendSByte>:
    1704:	83 b9       	out	0x03, r24	; 3
    1706:	86 b7       	in	r24, 0x36	; 54
    1708:	8f 7d       	andi	r24, 0xDF	; 223
    170a:	86 bf       	out	0x36, r24	; 54
    170c:	86 b7       	in	r24, 0x36	; 54
    170e:	80 68       	ori	r24, 0x80	; 128
    1710:	86 bf       	out	0x36, r24	; 54
    1712:	06 b6       	in	r0, 0x36	; 54
    1714:	07 fe       	sbrs	r0, 7
    1716:	fd cf       	rjmp	.-6      	; 0x1712 <M_I2c_SendSByte+0xe>
    1718:	81 b1       	in	r24, 0x01	; 1
    171a:	88 7f       	andi	r24, 0xF8	; 248
    171c:	88 32       	cpi	r24, 0x28	; 40
    171e:	e1 f7       	brne	.-8      	; 0x1718 <M_I2c_SendSByte+0x14>
    1720:	2f ef       	ldi	r18, 0xFF	; 255
    1722:	81 ee       	ldi	r24, 0xE1	; 225
    1724:	94 e0       	ldi	r25, 0x04	; 4
    1726:	21 50       	subi	r18, 0x01	; 1
    1728:	80 40       	sbci	r24, 0x00	; 0
    172a:	90 40       	sbci	r25, 0x00	; 0
    172c:	e1 f7       	brne	.-8      	; 0x1726 <M_I2c_SendSByte+0x22>
    172e:	00 c0       	rjmp	.+0      	; 0x1730 <M_I2c_SendSByte+0x2c>
    1730:	00 00       	nop
    1732:	08 95       	ret

00001734 <M_I2c_ReadByteNoAck>:
u8 M_I2c_ReadByteNoAck()
{
	TWCR = (1<<TWINT)|(1<<TWEN);
    1734:	84 e8       	ldi	r24, 0x84	; 132
    1736:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,TWINT) == 0);
    1738:	06 b6       	in	r0, 0x36	; 54
    173a:	07 fe       	sbrs	r0, 7
    173c:	fd cf       	rjmp	.-6      	; 0x1738 <M_I2c_ReadByteNoAck+0x4>
	return TWDR;
    173e:	83 b1       	in	r24, 0x03	; 3
}
    1740:	08 95       	ret

00001742 <M_I2c_RepeatedStart>:
void M_I2c_RepeatedStart(void)
{
	SetBit(TWCR,5);
    1742:	86 b7       	in	r24, 0x36	; 54
    1744:	80 62       	ori	r24, 0x20	; 32
    1746:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);                  //   to clear the flag bit
    1748:	86 b7       	in	r24, 0x36	; 54
    174a:	80 68       	ori	r24, 0x80	; 128
    174c:	86 bf       	out	0x36, r24	; 54
	while(GetBit(TWCR,7) == 0);
    174e:	06 b6       	in	r0, 0x36	; 54
    1750:	07 fe       	sbrs	r0, 7
    1752:	fd cf       	rjmp	.-6      	; 0x174e <M_I2c_RepeatedStart+0xc>
	while((TWSR & 0xF8) != REP_START_ACK);
    1754:	81 b1       	in	r24, 0x01	; 1
    1756:	88 7f       	andi	r24, 0xF8	; 248
    1758:	80 31       	cpi	r24, 0x10	; 16
    175a:	e1 f7       	brne	.-8      	; 0x1754 <M_I2c_RepeatedStart+0x12>
}
    175c:	08 95       	ret

0000175e <M_I2c_StopCondition>:
//  	SetBit(TWCR,7);                  //   to clear the flag bit
//  	SetBit(TWCR,4);
// // 	SetBit(TWCR,2);	
	//while(GetBit(TWCR,7) == 0);
	//TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
	SetBit(TWCR,4);
    175e:	86 b7       	in	r24, 0x36	; 54
    1760:	80 61       	ori	r24, 0x10	; 16
    1762:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,7);
    1764:	86 b7       	in	r24, 0x36	; 54
    1766:	80 68       	ori	r24, 0x80	; 128
    1768:	86 bf       	out	0x36, r24	; 54
    176a:	8f e9       	ldi	r24, 0x9F	; 159
    176c:	9f e0       	ldi	r25, 0x0F	; 15
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	f1 f7       	brne	.-4      	; 0x176e <M_I2c_StopCondition+0x10>
    1772:	00 c0       	rjmp	.+0      	; 0x1774 <M_I2c_StopCondition+0x16>
    1774:	00 00       	nop
    1776:	08 95       	ret

00001778 <M_Pwm1_Init>:
#include "Timer1.h"

void M_Pwm1_Init				(void)
{
	
 	SetBit(DDRD,5);	
    1778:	81 b3       	in	r24, 0x11	; 17
    177a:	80 62       	ori	r24, 0x20	; 32
    177c:	81 bb       	out	0x11, r24	; 17
 	
 	SetBit(TCCR1A,COM1A1);
    177e:	8f b5       	in	r24, 0x2f	; 47
    1780:	80 68       	ori	r24, 0x80	; 128
    1782:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,COM1A0);
    1784:	8f b5       	in	r24, 0x2f	; 47
    1786:	8f 7b       	andi	r24, 0xBF	; 191
    1788:	8f bd       	out	0x2f, r24	; 47
	
	SetBit(TCCR1B,WGM13);
    178a:	8e b5       	in	r24, 0x2e	; 46
    178c:	80 61       	ori	r24, 0x10	; 16
    178e:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,WGM12);
    1790:	8e b5       	in	r24, 0x2e	; 46
    1792:	88 60       	ori	r24, 0x08	; 8
    1794:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1A,WGM11);
    1796:	8f b5       	in	r24, 0x2f	; 47
    1798:	82 60       	ori	r24, 0x02	; 2
    179a:	8f bd       	out	0x2f, r24	; 47
	ClrBit(TCCR1A,WGM10);
    179c:	8f b5       	in	r24, 0x2f	; 47
    179e:	8e 7f       	andi	r24, 0xFE	; 254
    17a0:	8f bd       	out	0x2f, r24	; 47
    17a2:	08 95       	ret

000017a4 <M_Pwm1_SetDutyCycle>:
	

	
}
void M_Pwm1_SetDutyCycle		(f32 Local_f32_DesiredDutyCycle)
{
    17a4:	cf 92       	push	r12
    17a6:	df 92       	push	r13
    17a8:	ef 92       	push	r14
    17aa:	ff 92       	push	r15
    17ac:	6b 01       	movw	r12, r22
    17ae:	7c 01       	movw	r14, r24
	OCR1A = (((Local_f32_DesiredDutyCycle * ICR1)/100)-1);
    17b0:	66 b5       	in	r22, 0x26	; 38
    17b2:	77 b5       	in	r23, 0x27	; 39
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <__floatunsisf>
    17bc:	a7 01       	movw	r20, r14
    17be:	96 01       	movw	r18, r12
    17c0:	0e 94 c3 0d 	call	0x1b86	; 0x1b86 <__mulsf3>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	48 ec       	ldi	r20, 0xC8	; 200
    17ca:	52 e4       	ldi	r21, 0x42	; 66
    17cc:	0e 94 94 0c 	call	0x1928	; 0x1928 <__divsf3>
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 27 0c 	call	0x184e	; 0x184e <__subsf3>
    17dc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <__fixunssfsi>
    17e0:	7b bd       	out	0x2b, r23	; 43
    17e2:	6a bd       	out	0x2a, r22	; 42
}
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	df 90       	pop	r13
    17ea:	cf 90       	pop	r12
    17ec:	08 95       	ret

000017ee <M_Pwm1_SetFrequency>:
void M_Pwm1_SetFrequency		(u16 Local_u16_DesiredFrequency)
{
	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Local_u16_DesiredFrequency * TIMER1_PRESCALER));
    17ee:	00 24       	eor	r0, r0
    17f0:	96 95       	lsr	r25
    17f2:	87 95       	ror	r24
    17f4:	07 94       	ror	r0
    17f6:	96 95       	lsr	r25
    17f8:	87 95       	ror	r24
    17fa:	07 94       	ror	r0
    17fc:	98 2f       	mov	r25, r24
    17fe:	80 2d       	mov	r24, r0
    1800:	9c 01       	movw	r18, r24
    1802:	40 e0       	ldi	r20, 0x00	; 0
    1804:	50 e0       	ldi	r21, 0x00	; 0
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	74 e2       	ldi	r23, 0x24	; 36
    180a:	84 ef       	ldi	r24, 0xF4	; 244
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <__divmodsi4>
    1812:	37 bd       	out	0x27, r19	; 39
    1814:	26 bd       	out	0x26, r18	; 38
    1816:	08 95       	ret

00001818 <M_Pwm1_Start>:
}
void M_Pwm1_Start				(void)
{
	#if		TIMER1_PRESCALER == PRESCLNG_64
	ClrBit(TCCR1B,CS12);
    1818:	8e b5       	in	r24, 0x2e	; 46
    181a:	8b 7f       	andi	r24, 0xFB	; 251
    181c:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS11);
    181e:	8e b5       	in	r24, 0x2e	; 46
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,CS10);
    1824:	8e b5       	in	r24, 0x2e	; 46
    1826:	81 60       	ori	r24, 0x01	; 1
    1828:	8e bd       	out	0x2e, r24	; 46
    182a:	08 95       	ret

0000182c <M_Pwm2_Init>:
}


void M_Pwm2_Init				(void)
{
	M_Dio_PinMode(PD7,OUTPUT);
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	8f e2       	ldi	r24, 0x2F	; 47
    1830:	0e 94 24 09 	call	0x1248	; 0x1248 <M_Dio_PinMode>

	#if			PWM2_MODE		==		FAST_PWM
	SetBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
    1834:	85 b5       	in	r24, 0x25	; 37
    1836:	88 60       	ori	r24, 0x08	; 8
    1838:	85 bd       	out	0x25, r24	; 37
    183a:	85 b5       	in	r24, 0x25	; 37
    183c:	80 64       	ori	r24, 0x40	; 64
    183e:	85 bd       	out	0x25, r24	; 37
	#elif		PWM2_MODE		==		PHASE_CORRECT
	ClrBit(TCCR2,WGM21); SetBit(TCCR2,WGM20);
	#endif
	
	#if			OUTPUT_MODE		==		NON_INVERTED
	SetBit(TCCR2,COM21); ClrBit(TCCR2,COM20);
    1840:	85 b5       	in	r24, 0x25	; 37
    1842:	80 62       	ori	r24, 0x20	; 32
    1844:	85 bd       	out	0x25, r24	; 37
    1846:	85 b5       	in	r24, 0x25	; 37
    1848:	8f 7e       	andi	r24, 0xEF	; 239
    184a:	85 bd       	out	0x25, r24	; 37
    184c:	08 95       	ret

0000184e <__subsf3>:
    184e:	50 58       	subi	r21, 0x80	; 128

00001850 <__addsf3>:
    1850:	bb 27       	eor	r27, r27
    1852:	aa 27       	eor	r26, r26
    1854:	0e 94 3f 0c 	call	0x187e	; 0x187e <__addsf3x>
    1858:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__fp_round>
    185c:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__fp_pscA>
    1860:	38 f0       	brcs	.+14     	; 0x1870 <__addsf3+0x20>
    1862:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__fp_pscB>
    1866:	20 f0       	brcs	.+8      	; 0x1870 <__addsf3+0x20>
    1868:	39 f4       	brne	.+14     	; 0x1878 <__addsf3+0x28>
    186a:	9f 3f       	cpi	r25, 0xFF	; 255
    186c:	19 f4       	brne	.+6      	; 0x1874 <__addsf3+0x24>
    186e:	26 f4       	brtc	.+8      	; 0x1878 <__addsf3+0x28>
    1870:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__fp_nan>
    1874:	0e f4       	brtc	.+2      	; 0x1878 <__addsf3+0x28>
    1876:	e0 95       	com	r30
    1878:	e7 fb       	bst	r30, 7
    187a:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_inf>

0000187e <__addsf3x>:
    187e:	e9 2f       	mov	r30, r25
    1880:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__fp_split3>
    1884:	58 f3       	brcs	.-42     	; 0x185c <__addsf3+0xc>
    1886:	ba 17       	cp	r27, r26
    1888:	62 07       	cpc	r22, r18
    188a:	73 07       	cpc	r23, r19
    188c:	84 07       	cpc	r24, r20
    188e:	95 07       	cpc	r25, r21
    1890:	20 f0       	brcs	.+8      	; 0x189a <__addsf3x+0x1c>
    1892:	79 f4       	brne	.+30     	; 0x18b2 <__addsf3x+0x34>
    1894:	a6 f5       	brtc	.+104    	; 0x18fe <__addsf3x+0x80>
    1896:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__fp_zero>
    189a:	0e f4       	brtc	.+2      	; 0x189e <__addsf3x+0x20>
    189c:	e0 95       	com	r30
    189e:	0b 2e       	mov	r0, r27
    18a0:	ba 2f       	mov	r27, r26
    18a2:	a0 2d       	mov	r26, r0
    18a4:	0b 01       	movw	r0, r22
    18a6:	b9 01       	movw	r22, r18
    18a8:	90 01       	movw	r18, r0
    18aa:	0c 01       	movw	r0, r24
    18ac:	ca 01       	movw	r24, r20
    18ae:	a0 01       	movw	r20, r0
    18b0:	11 24       	eor	r1, r1
    18b2:	ff 27       	eor	r31, r31
    18b4:	59 1b       	sub	r21, r25
    18b6:	99 f0       	breq	.+38     	; 0x18de <__addsf3x+0x60>
    18b8:	59 3f       	cpi	r21, 0xF9	; 249
    18ba:	50 f4       	brcc	.+20     	; 0x18d0 <__addsf3x+0x52>
    18bc:	50 3e       	cpi	r21, 0xE0	; 224
    18be:	68 f1       	brcs	.+90     	; 0x191a <__addsf3x+0x9c>
    18c0:	1a 16       	cp	r1, r26
    18c2:	f0 40       	sbci	r31, 0x00	; 0
    18c4:	a2 2f       	mov	r26, r18
    18c6:	23 2f       	mov	r18, r19
    18c8:	34 2f       	mov	r19, r20
    18ca:	44 27       	eor	r20, r20
    18cc:	58 5f       	subi	r21, 0xF8	; 248
    18ce:	f3 cf       	rjmp	.-26     	; 0x18b6 <__addsf3x+0x38>
    18d0:	46 95       	lsr	r20
    18d2:	37 95       	ror	r19
    18d4:	27 95       	ror	r18
    18d6:	a7 95       	ror	r26
    18d8:	f0 40       	sbci	r31, 0x00	; 0
    18da:	53 95       	inc	r21
    18dc:	c9 f7       	brne	.-14     	; 0x18d0 <__addsf3x+0x52>
    18de:	7e f4       	brtc	.+30     	; 0x18fe <__addsf3x+0x80>
    18e0:	1f 16       	cp	r1, r31
    18e2:	ba 0b       	sbc	r27, r26
    18e4:	62 0b       	sbc	r22, r18
    18e6:	73 0b       	sbc	r23, r19
    18e8:	84 0b       	sbc	r24, r20
    18ea:	ba f0       	brmi	.+46     	; 0x191a <__addsf3x+0x9c>
    18ec:	91 50       	subi	r25, 0x01	; 1
    18ee:	a1 f0       	breq	.+40     	; 0x1918 <__addsf3x+0x9a>
    18f0:	ff 0f       	add	r31, r31
    18f2:	bb 1f       	adc	r27, r27
    18f4:	66 1f       	adc	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	88 1f       	adc	r24, r24
    18fa:	c2 f7       	brpl	.-16     	; 0x18ec <__addsf3x+0x6e>
    18fc:	0e c0       	rjmp	.+28     	; 0x191a <__addsf3x+0x9c>
    18fe:	ba 0f       	add	r27, r26
    1900:	62 1f       	adc	r22, r18
    1902:	73 1f       	adc	r23, r19
    1904:	84 1f       	adc	r24, r20
    1906:	48 f4       	brcc	.+18     	; 0x191a <__addsf3x+0x9c>
    1908:	87 95       	ror	r24
    190a:	77 95       	ror	r23
    190c:	67 95       	ror	r22
    190e:	b7 95       	ror	r27
    1910:	f7 95       	ror	r31
    1912:	9e 3f       	cpi	r25, 0xFE	; 254
    1914:	08 f0       	brcs	.+2      	; 0x1918 <__addsf3x+0x9a>
    1916:	b0 cf       	rjmp	.-160    	; 0x1878 <__addsf3+0x28>
    1918:	93 95       	inc	r25
    191a:	88 0f       	add	r24, r24
    191c:	08 f0       	brcs	.+2      	; 0x1920 <__addsf3x+0xa2>
    191e:	99 27       	eor	r25, r25
    1920:	ee 0f       	add	r30, r30
    1922:	97 95       	ror	r25
    1924:	87 95       	ror	r24
    1926:	08 95       	ret

00001928 <__divsf3>:
    1928:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__divsf3x>
    192c:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__fp_round>
    1930:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__fp_pscB>
    1934:	58 f0       	brcs	.+22     	; 0x194c <__divsf3+0x24>
    1936:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__fp_pscA>
    193a:	40 f0       	brcs	.+16     	; 0x194c <__divsf3+0x24>
    193c:	29 f4       	brne	.+10     	; 0x1948 <__divsf3+0x20>
    193e:	5f 3f       	cpi	r21, 0xFF	; 255
    1940:	29 f0       	breq	.+10     	; 0x194c <__divsf3+0x24>
    1942:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_inf>
    1946:	51 11       	cpse	r21, r1
    1948:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__fp_szero>
    194c:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__fp_nan>

00001950 <__divsf3x>:
    1950:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__fp_split3>
    1954:	68 f3       	brcs	.-38     	; 0x1930 <__divsf3+0x8>

00001956 <__divsf3_pse>:
    1956:	99 23       	and	r25, r25
    1958:	b1 f3       	breq	.-20     	; 0x1946 <__divsf3+0x1e>
    195a:	55 23       	and	r21, r21
    195c:	91 f3       	breq	.-28     	; 0x1942 <__divsf3+0x1a>
    195e:	95 1b       	sub	r25, r21
    1960:	55 0b       	sbc	r21, r21
    1962:	bb 27       	eor	r27, r27
    1964:	aa 27       	eor	r26, r26
    1966:	62 17       	cp	r22, r18
    1968:	73 07       	cpc	r23, r19
    196a:	84 07       	cpc	r24, r20
    196c:	38 f0       	brcs	.+14     	; 0x197c <__divsf3_pse+0x26>
    196e:	9f 5f       	subi	r25, 0xFF	; 255
    1970:	5f 4f       	sbci	r21, 0xFF	; 255
    1972:	22 0f       	add	r18, r18
    1974:	33 1f       	adc	r19, r19
    1976:	44 1f       	adc	r20, r20
    1978:	aa 1f       	adc	r26, r26
    197a:	a9 f3       	breq	.-22     	; 0x1966 <__divsf3_pse+0x10>
    197c:	35 d0       	rcall	.+106    	; 0x19e8 <__divsf3_pse+0x92>
    197e:	0e 2e       	mov	r0, r30
    1980:	3a f0       	brmi	.+14     	; 0x1990 <__divsf3_pse+0x3a>
    1982:	e0 e8       	ldi	r30, 0x80	; 128
    1984:	32 d0       	rcall	.+100    	; 0x19ea <__divsf3_pse+0x94>
    1986:	91 50       	subi	r25, 0x01	; 1
    1988:	50 40       	sbci	r21, 0x00	; 0
    198a:	e6 95       	lsr	r30
    198c:	00 1c       	adc	r0, r0
    198e:	ca f7       	brpl	.-14     	; 0x1982 <__divsf3_pse+0x2c>
    1990:	2b d0       	rcall	.+86     	; 0x19e8 <__divsf3_pse+0x92>
    1992:	fe 2f       	mov	r31, r30
    1994:	29 d0       	rcall	.+82     	; 0x19e8 <__divsf3_pse+0x92>
    1996:	66 0f       	add	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	bb 1f       	adc	r27, r27
    199e:	26 17       	cp	r18, r22
    19a0:	37 07       	cpc	r19, r23
    19a2:	48 07       	cpc	r20, r24
    19a4:	ab 07       	cpc	r26, r27
    19a6:	b0 e8       	ldi	r27, 0x80	; 128
    19a8:	09 f0       	breq	.+2      	; 0x19ac <__divsf3_pse+0x56>
    19aa:	bb 0b       	sbc	r27, r27
    19ac:	80 2d       	mov	r24, r0
    19ae:	bf 01       	movw	r22, r30
    19b0:	ff 27       	eor	r31, r31
    19b2:	93 58       	subi	r25, 0x83	; 131
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
    19b6:	3a f0       	brmi	.+14     	; 0x19c6 <__divsf3_pse+0x70>
    19b8:	9e 3f       	cpi	r25, 0xFE	; 254
    19ba:	51 05       	cpc	r21, r1
    19bc:	78 f0       	brcs	.+30     	; 0x19dc <__divsf3_pse+0x86>
    19be:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_inf>
    19c2:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__fp_szero>
    19c6:	5f 3f       	cpi	r21, 0xFF	; 255
    19c8:	e4 f3       	brlt	.-8      	; 0x19c2 <__divsf3_pse+0x6c>
    19ca:	98 3e       	cpi	r25, 0xE8	; 232
    19cc:	d4 f3       	brlt	.-12     	; 0x19c2 <__divsf3_pse+0x6c>
    19ce:	86 95       	lsr	r24
    19d0:	77 95       	ror	r23
    19d2:	67 95       	ror	r22
    19d4:	b7 95       	ror	r27
    19d6:	f7 95       	ror	r31
    19d8:	9f 5f       	subi	r25, 0xFF	; 255
    19da:	c9 f7       	brne	.-14     	; 0x19ce <__divsf3_pse+0x78>
    19dc:	88 0f       	add	r24, r24
    19de:	91 1d       	adc	r25, r1
    19e0:	96 95       	lsr	r25
    19e2:	87 95       	ror	r24
    19e4:	97 f9       	bld	r25, 7
    19e6:	08 95       	ret
    19e8:	e1 e0       	ldi	r30, 0x01	; 1
    19ea:	66 0f       	add	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	bb 1f       	adc	r27, r27
    19f2:	62 17       	cp	r22, r18
    19f4:	73 07       	cpc	r23, r19
    19f6:	84 07       	cpc	r24, r20
    19f8:	ba 07       	cpc	r27, r26
    19fa:	20 f0       	brcs	.+8      	; 0x1a04 <__divsf3_pse+0xae>
    19fc:	62 1b       	sub	r22, r18
    19fe:	73 0b       	sbc	r23, r19
    1a00:	84 0b       	sbc	r24, r20
    1a02:	ba 0b       	sbc	r27, r26
    1a04:	ee 1f       	adc	r30, r30
    1a06:	88 f7       	brcc	.-30     	; 0x19ea <__divsf3_pse+0x94>
    1a08:	e0 95       	com	r30
    1a0a:	08 95       	ret

00001a0c <__fixunssfsi>:
    1a0c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <__fp_splitA>
    1a10:	88 f0       	brcs	.+34     	; 0x1a34 <__fixunssfsi+0x28>
    1a12:	9f 57       	subi	r25, 0x7F	; 127
    1a14:	98 f0       	brcs	.+38     	; 0x1a3c <__fixunssfsi+0x30>
    1a16:	b9 2f       	mov	r27, r25
    1a18:	99 27       	eor	r25, r25
    1a1a:	b7 51       	subi	r27, 0x17	; 23
    1a1c:	b0 f0       	brcs	.+44     	; 0x1a4a <__fixunssfsi+0x3e>
    1a1e:	e1 f0       	breq	.+56     	; 0x1a58 <__fixunssfsi+0x4c>
    1a20:	66 0f       	add	r22, r22
    1a22:	77 1f       	adc	r23, r23
    1a24:	88 1f       	adc	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	1a f0       	brmi	.+6      	; 0x1a30 <__fixunssfsi+0x24>
    1a2a:	ba 95       	dec	r27
    1a2c:	c9 f7       	brne	.-14     	; 0x1a20 <__fixunssfsi+0x14>
    1a2e:	14 c0       	rjmp	.+40     	; 0x1a58 <__fixunssfsi+0x4c>
    1a30:	b1 30       	cpi	r27, 0x01	; 1
    1a32:	91 f0       	breq	.+36     	; 0x1a58 <__fixunssfsi+0x4c>
    1a34:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <__fp_zero>
    1a38:	b1 e0       	ldi	r27, 0x01	; 1
    1a3a:	08 95       	ret
    1a3c:	0c 94 bc 0d 	jmp	0x1b78	; 0x1b78 <__fp_zero>
    1a40:	67 2f       	mov	r22, r23
    1a42:	78 2f       	mov	r23, r24
    1a44:	88 27       	eor	r24, r24
    1a46:	b8 5f       	subi	r27, 0xF8	; 248
    1a48:	39 f0       	breq	.+14     	; 0x1a58 <__fixunssfsi+0x4c>
    1a4a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a4c:	cc f3       	brlt	.-14     	; 0x1a40 <__fixunssfsi+0x34>
    1a4e:	86 95       	lsr	r24
    1a50:	77 95       	ror	r23
    1a52:	67 95       	ror	r22
    1a54:	b3 95       	inc	r27
    1a56:	d9 f7       	brne	.-10     	; 0x1a4e <__fixunssfsi+0x42>
    1a58:	3e f4       	brtc	.+14     	; 0x1a68 <__fixunssfsi+0x5c>
    1a5a:	90 95       	com	r25
    1a5c:	80 95       	com	r24
    1a5e:	70 95       	com	r23
    1a60:	61 95       	neg	r22
    1a62:	7f 4f       	sbci	r23, 0xFF	; 255
    1a64:	8f 4f       	sbci	r24, 0xFF	; 255
    1a66:	9f 4f       	sbci	r25, 0xFF	; 255
    1a68:	08 95       	ret

00001a6a <__floatunsisf>:
    1a6a:	e8 94       	clt
    1a6c:	09 c0       	rjmp	.+18     	; 0x1a80 <__floatsisf+0x12>

00001a6e <__floatsisf>:
    1a6e:	97 fb       	bst	r25, 7
    1a70:	3e f4       	brtc	.+14     	; 0x1a80 <__floatsisf+0x12>
    1a72:	90 95       	com	r25
    1a74:	80 95       	com	r24
    1a76:	70 95       	com	r23
    1a78:	61 95       	neg	r22
    1a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a7c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a80:	99 23       	and	r25, r25
    1a82:	a9 f0       	breq	.+42     	; 0x1aae <__floatsisf+0x40>
    1a84:	f9 2f       	mov	r31, r25
    1a86:	96 e9       	ldi	r25, 0x96	; 150
    1a88:	bb 27       	eor	r27, r27
    1a8a:	93 95       	inc	r25
    1a8c:	f6 95       	lsr	r31
    1a8e:	87 95       	ror	r24
    1a90:	77 95       	ror	r23
    1a92:	67 95       	ror	r22
    1a94:	b7 95       	ror	r27
    1a96:	f1 11       	cpse	r31, r1
    1a98:	f8 cf       	rjmp	.-16     	; 0x1a8a <__floatsisf+0x1c>
    1a9a:	fa f4       	brpl	.+62     	; 0x1ada <__floatsisf+0x6c>
    1a9c:	bb 0f       	add	r27, r27
    1a9e:	11 f4       	brne	.+4      	; 0x1aa4 <__floatsisf+0x36>
    1aa0:	60 ff       	sbrs	r22, 0
    1aa2:	1b c0       	rjmp	.+54     	; 0x1ada <__floatsisf+0x6c>
    1aa4:	6f 5f       	subi	r22, 0xFF	; 255
    1aa6:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa8:	8f 4f       	sbci	r24, 0xFF	; 255
    1aaa:	9f 4f       	sbci	r25, 0xFF	; 255
    1aac:	16 c0       	rjmp	.+44     	; 0x1ada <__floatsisf+0x6c>
    1aae:	88 23       	and	r24, r24
    1ab0:	11 f0       	breq	.+4      	; 0x1ab6 <__floatsisf+0x48>
    1ab2:	96 e9       	ldi	r25, 0x96	; 150
    1ab4:	11 c0       	rjmp	.+34     	; 0x1ad8 <__floatsisf+0x6a>
    1ab6:	77 23       	and	r23, r23
    1ab8:	21 f0       	breq	.+8      	; 0x1ac2 <__floatsisf+0x54>
    1aba:	9e e8       	ldi	r25, 0x8E	; 142
    1abc:	87 2f       	mov	r24, r23
    1abe:	76 2f       	mov	r23, r22
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <__floatsisf+0x5e>
    1ac2:	66 23       	and	r22, r22
    1ac4:	71 f0       	breq	.+28     	; 0x1ae2 <__floatsisf+0x74>
    1ac6:	96 e8       	ldi	r25, 0x86	; 134
    1ac8:	86 2f       	mov	r24, r22
    1aca:	70 e0       	ldi	r23, 0x00	; 0
    1acc:	60 e0       	ldi	r22, 0x00	; 0
    1ace:	2a f0       	brmi	.+10     	; 0x1ada <__floatsisf+0x6c>
    1ad0:	9a 95       	dec	r25
    1ad2:	66 0f       	add	r22, r22
    1ad4:	77 1f       	adc	r23, r23
    1ad6:	88 1f       	adc	r24, r24
    1ad8:	da f7       	brpl	.-10     	; 0x1ad0 <__floatsisf+0x62>
    1ada:	88 0f       	add	r24, r24
    1adc:	96 95       	lsr	r25
    1ade:	87 95       	ror	r24
    1ae0:	97 f9       	bld	r25, 7
    1ae2:	08 95       	ret

00001ae4 <__fp_inf>:
    1ae4:	97 f9       	bld	r25, 7
    1ae6:	9f 67       	ori	r25, 0x7F	; 127
    1ae8:	80 e8       	ldi	r24, 0x80	; 128
    1aea:	70 e0       	ldi	r23, 0x00	; 0
    1aec:	60 e0       	ldi	r22, 0x00	; 0
    1aee:	08 95       	ret

00001af0 <__fp_nan>:
    1af0:	9f ef       	ldi	r25, 0xFF	; 255
    1af2:	80 ec       	ldi	r24, 0xC0	; 192
    1af4:	08 95       	ret

00001af6 <__fp_pscA>:
    1af6:	00 24       	eor	r0, r0
    1af8:	0a 94       	dec	r0
    1afa:	16 16       	cp	r1, r22
    1afc:	17 06       	cpc	r1, r23
    1afe:	18 06       	cpc	r1, r24
    1b00:	09 06       	cpc	r0, r25
    1b02:	08 95       	ret

00001b04 <__fp_pscB>:
    1b04:	00 24       	eor	r0, r0
    1b06:	0a 94       	dec	r0
    1b08:	12 16       	cp	r1, r18
    1b0a:	13 06       	cpc	r1, r19
    1b0c:	14 06       	cpc	r1, r20
    1b0e:	05 06       	cpc	r0, r21
    1b10:	08 95       	ret

00001b12 <__fp_round>:
    1b12:	09 2e       	mov	r0, r25
    1b14:	03 94       	inc	r0
    1b16:	00 0c       	add	r0, r0
    1b18:	11 f4       	brne	.+4      	; 0x1b1e <__fp_round+0xc>
    1b1a:	88 23       	and	r24, r24
    1b1c:	52 f0       	brmi	.+20     	; 0x1b32 <__fp_round+0x20>
    1b1e:	bb 0f       	add	r27, r27
    1b20:	40 f4       	brcc	.+16     	; 0x1b32 <__fp_round+0x20>
    1b22:	bf 2b       	or	r27, r31
    1b24:	11 f4       	brne	.+4      	; 0x1b2a <__fp_round+0x18>
    1b26:	60 ff       	sbrs	r22, 0
    1b28:	04 c0       	rjmp	.+8      	; 0x1b32 <__fp_round+0x20>
    1b2a:	6f 5f       	subi	r22, 0xFF	; 255
    1b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b30:	9f 4f       	sbci	r25, 0xFF	; 255
    1b32:	08 95       	ret

00001b34 <__fp_split3>:
    1b34:	57 fd       	sbrc	r21, 7
    1b36:	90 58       	subi	r25, 0x80	; 128
    1b38:	44 0f       	add	r20, r20
    1b3a:	55 1f       	adc	r21, r21
    1b3c:	59 f0       	breq	.+22     	; 0x1b54 <__fp_splitA+0x10>
    1b3e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b40:	71 f0       	breq	.+28     	; 0x1b5e <__fp_splitA+0x1a>
    1b42:	47 95       	ror	r20

00001b44 <__fp_splitA>:
    1b44:	88 0f       	add	r24, r24
    1b46:	97 fb       	bst	r25, 7
    1b48:	99 1f       	adc	r25, r25
    1b4a:	61 f0       	breq	.+24     	; 0x1b64 <__fp_splitA+0x20>
    1b4c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b4e:	79 f0       	breq	.+30     	; 0x1b6e <__fp_splitA+0x2a>
    1b50:	87 95       	ror	r24
    1b52:	08 95       	ret
    1b54:	12 16       	cp	r1, r18
    1b56:	13 06       	cpc	r1, r19
    1b58:	14 06       	cpc	r1, r20
    1b5a:	55 1f       	adc	r21, r21
    1b5c:	f2 cf       	rjmp	.-28     	; 0x1b42 <__fp_split3+0xe>
    1b5e:	46 95       	lsr	r20
    1b60:	f1 df       	rcall	.-30     	; 0x1b44 <__fp_splitA>
    1b62:	08 c0       	rjmp	.+16     	; 0x1b74 <__fp_splitA+0x30>
    1b64:	16 16       	cp	r1, r22
    1b66:	17 06       	cpc	r1, r23
    1b68:	18 06       	cpc	r1, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	f1 cf       	rjmp	.-30     	; 0x1b50 <__fp_splitA+0xc>
    1b6e:	86 95       	lsr	r24
    1b70:	71 05       	cpc	r23, r1
    1b72:	61 05       	cpc	r22, r1
    1b74:	08 94       	sec
    1b76:	08 95       	ret

00001b78 <__fp_zero>:
    1b78:	e8 94       	clt

00001b7a <__fp_szero>:
    1b7a:	bb 27       	eor	r27, r27
    1b7c:	66 27       	eor	r22, r22
    1b7e:	77 27       	eor	r23, r23
    1b80:	cb 01       	movw	r24, r22
    1b82:	97 f9       	bld	r25, 7
    1b84:	08 95       	ret

00001b86 <__mulsf3>:
    1b86:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <__mulsf3x>
    1b8a:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__fp_round>
    1b8e:	0e 94 7b 0d 	call	0x1af6	; 0x1af6 <__fp_pscA>
    1b92:	38 f0       	brcs	.+14     	; 0x1ba2 <__mulsf3+0x1c>
    1b94:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <__fp_pscB>
    1b98:	20 f0       	brcs	.+8      	; 0x1ba2 <__mulsf3+0x1c>
    1b9a:	95 23       	and	r25, r21
    1b9c:	11 f0       	breq	.+4      	; 0x1ba2 <__mulsf3+0x1c>
    1b9e:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_inf>
    1ba2:	0c 94 78 0d 	jmp	0x1af0	; 0x1af0 <__fp_nan>
    1ba6:	11 24       	eor	r1, r1
    1ba8:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__fp_szero>

00001bac <__mulsf3x>:
    1bac:	0e 94 9a 0d 	call	0x1b34	; 0x1b34 <__fp_split3>
    1bb0:	70 f3       	brcs	.-36     	; 0x1b8e <__mulsf3+0x8>

00001bb2 <__mulsf3_pse>:
    1bb2:	95 9f       	mul	r25, r21
    1bb4:	c1 f3       	breq	.-16     	; 0x1ba6 <__mulsf3+0x20>
    1bb6:	95 0f       	add	r25, r21
    1bb8:	50 e0       	ldi	r21, 0x00	; 0
    1bba:	55 1f       	adc	r21, r21
    1bbc:	62 9f       	mul	r22, r18
    1bbe:	f0 01       	movw	r30, r0
    1bc0:	72 9f       	mul	r23, r18
    1bc2:	bb 27       	eor	r27, r27
    1bc4:	f0 0d       	add	r31, r0
    1bc6:	b1 1d       	adc	r27, r1
    1bc8:	63 9f       	mul	r22, r19
    1bca:	aa 27       	eor	r26, r26
    1bcc:	f0 0d       	add	r31, r0
    1bce:	b1 1d       	adc	r27, r1
    1bd0:	aa 1f       	adc	r26, r26
    1bd2:	64 9f       	mul	r22, r20
    1bd4:	66 27       	eor	r22, r22
    1bd6:	b0 0d       	add	r27, r0
    1bd8:	a1 1d       	adc	r26, r1
    1bda:	66 1f       	adc	r22, r22
    1bdc:	82 9f       	mul	r24, r18
    1bde:	22 27       	eor	r18, r18
    1be0:	b0 0d       	add	r27, r0
    1be2:	a1 1d       	adc	r26, r1
    1be4:	62 1f       	adc	r22, r18
    1be6:	73 9f       	mul	r23, r19
    1be8:	b0 0d       	add	r27, r0
    1bea:	a1 1d       	adc	r26, r1
    1bec:	62 1f       	adc	r22, r18
    1bee:	83 9f       	mul	r24, r19
    1bf0:	a0 0d       	add	r26, r0
    1bf2:	61 1d       	adc	r22, r1
    1bf4:	22 1f       	adc	r18, r18
    1bf6:	74 9f       	mul	r23, r20
    1bf8:	33 27       	eor	r19, r19
    1bfa:	a0 0d       	add	r26, r0
    1bfc:	61 1d       	adc	r22, r1
    1bfe:	23 1f       	adc	r18, r19
    1c00:	84 9f       	mul	r24, r20
    1c02:	60 0d       	add	r22, r0
    1c04:	21 1d       	adc	r18, r1
    1c06:	82 2f       	mov	r24, r18
    1c08:	76 2f       	mov	r23, r22
    1c0a:	6a 2f       	mov	r22, r26
    1c0c:	11 24       	eor	r1, r1
    1c0e:	9f 57       	subi	r25, 0x7F	; 127
    1c10:	50 40       	sbci	r21, 0x00	; 0
    1c12:	9a f0       	brmi	.+38     	; 0x1c3a <__mulsf3_pse+0x88>
    1c14:	f1 f0       	breq	.+60     	; 0x1c52 <__mulsf3_pse+0xa0>
    1c16:	88 23       	and	r24, r24
    1c18:	4a f0       	brmi	.+18     	; 0x1c2c <__mulsf3_pse+0x7a>
    1c1a:	ee 0f       	add	r30, r30
    1c1c:	ff 1f       	adc	r31, r31
    1c1e:	bb 1f       	adc	r27, r27
    1c20:	66 1f       	adc	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	88 1f       	adc	r24, r24
    1c26:	91 50       	subi	r25, 0x01	; 1
    1c28:	50 40       	sbci	r21, 0x00	; 0
    1c2a:	a9 f7       	brne	.-22     	; 0x1c16 <__mulsf3_pse+0x64>
    1c2c:	9e 3f       	cpi	r25, 0xFE	; 254
    1c2e:	51 05       	cpc	r21, r1
    1c30:	80 f0       	brcs	.+32     	; 0x1c52 <__mulsf3_pse+0xa0>
    1c32:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__fp_inf>
    1c36:	0c 94 bd 0d 	jmp	0x1b7a	; 0x1b7a <__fp_szero>
    1c3a:	5f 3f       	cpi	r21, 0xFF	; 255
    1c3c:	e4 f3       	brlt	.-8      	; 0x1c36 <__mulsf3_pse+0x84>
    1c3e:	98 3e       	cpi	r25, 0xE8	; 232
    1c40:	d4 f3       	brlt	.-12     	; 0x1c36 <__mulsf3_pse+0x84>
    1c42:	86 95       	lsr	r24
    1c44:	77 95       	ror	r23
    1c46:	67 95       	ror	r22
    1c48:	b7 95       	ror	r27
    1c4a:	f7 95       	ror	r31
    1c4c:	e7 95       	ror	r30
    1c4e:	9f 5f       	subi	r25, 0xFF	; 255
    1c50:	c1 f7       	brne	.-16     	; 0x1c42 <__mulsf3_pse+0x90>
    1c52:	fe 2b       	or	r31, r30
    1c54:	88 0f       	add	r24, r24
    1c56:	91 1d       	adc	r25, r1
    1c58:	96 95       	lsr	r25
    1c5a:	87 95       	ror	r24
    1c5c:	97 f9       	bld	r25, 7
    1c5e:	08 95       	ret

00001c60 <__udivmodsi4>:
    1c60:	a1 e2       	ldi	r26, 0x21	; 33
    1c62:	1a 2e       	mov	r1, r26
    1c64:	aa 1b       	sub	r26, r26
    1c66:	bb 1b       	sub	r27, r27
    1c68:	fd 01       	movw	r30, r26
    1c6a:	0d c0       	rjmp	.+26     	; 0x1c86 <__udivmodsi4_ep>

00001c6c <__udivmodsi4_loop>:
    1c6c:	aa 1f       	adc	r26, r26
    1c6e:	bb 1f       	adc	r27, r27
    1c70:	ee 1f       	adc	r30, r30
    1c72:	ff 1f       	adc	r31, r31
    1c74:	a2 17       	cp	r26, r18
    1c76:	b3 07       	cpc	r27, r19
    1c78:	e4 07       	cpc	r30, r20
    1c7a:	f5 07       	cpc	r31, r21
    1c7c:	20 f0       	brcs	.+8      	; 0x1c86 <__udivmodsi4_ep>
    1c7e:	a2 1b       	sub	r26, r18
    1c80:	b3 0b       	sbc	r27, r19
    1c82:	e4 0b       	sbc	r30, r20
    1c84:	f5 0b       	sbc	r31, r21

00001c86 <__udivmodsi4_ep>:
    1c86:	66 1f       	adc	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	88 1f       	adc	r24, r24
    1c8c:	99 1f       	adc	r25, r25
    1c8e:	1a 94       	dec	r1
    1c90:	69 f7       	brne	.-38     	; 0x1c6c <__udivmodsi4_loop>
    1c92:	60 95       	com	r22
    1c94:	70 95       	com	r23
    1c96:	80 95       	com	r24
    1c98:	90 95       	com	r25
    1c9a:	9b 01       	movw	r18, r22
    1c9c:	ac 01       	movw	r20, r24
    1c9e:	bd 01       	movw	r22, r26
    1ca0:	cf 01       	movw	r24, r30
    1ca2:	08 95       	ret

00001ca4 <__divmodsi4>:
    1ca4:	05 2e       	mov	r0, r21
    1ca6:	97 fb       	bst	r25, 7
    1ca8:	1e f4       	brtc	.+6      	; 0x1cb0 <__divmodsi4+0xc>
    1caa:	00 94       	com	r0
    1cac:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__negsi2>
    1cb0:	57 fd       	sbrc	r21, 7
    1cb2:	07 d0       	rcall	.+14     	; 0x1cc2 <__divmodsi4_neg2>
    1cb4:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <__udivmodsi4>
    1cb8:	07 fc       	sbrc	r0, 7
    1cba:	03 d0       	rcall	.+6      	; 0x1cc2 <__divmodsi4_neg2>
    1cbc:	4e f4       	brtc	.+18     	; 0x1cd0 <__divmodsi4_exit>
    1cbe:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__negsi2>

00001cc2 <__divmodsi4_neg2>:
    1cc2:	50 95       	com	r21
    1cc4:	40 95       	com	r20
    1cc6:	30 95       	com	r19
    1cc8:	21 95       	neg	r18
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	4f 4f       	sbci	r20, 0xFF	; 255
    1cce:	5f 4f       	sbci	r21, 0xFF	; 255

00001cd0 <__divmodsi4_exit>:
    1cd0:	08 95       	ret

00001cd2 <__negsi2>:
    1cd2:	90 95       	com	r25
    1cd4:	80 95       	com	r24
    1cd6:	70 95       	com	r23
    1cd8:	61 95       	neg	r22
    1cda:	7f 4f       	sbci	r23, 0xFF	; 255
    1cdc:	8f 4f       	sbci	r24, 0xFF	; 255
    1cde:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce0:	08 95       	ret

00001ce2 <__umulhisi3>:
    1ce2:	a2 9f       	mul	r26, r18
    1ce4:	b0 01       	movw	r22, r0
    1ce6:	b3 9f       	mul	r27, r19
    1ce8:	c0 01       	movw	r24, r0
    1cea:	a3 9f       	mul	r26, r19
    1cec:	70 0d       	add	r23, r0
    1cee:	81 1d       	adc	r24, r1
    1cf0:	11 24       	eor	r1, r1
    1cf2:	91 1d       	adc	r25, r1
    1cf4:	b2 9f       	mul	r27, r18
    1cf6:	70 0d       	add	r23, r0
    1cf8:	81 1d       	adc	r24, r1
    1cfa:	11 24       	eor	r1, r1
    1cfc:	91 1d       	adc	r25, r1
    1cfe:	08 95       	ret

00001d00 <__muluhisi3>:
    1d00:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__umulhisi3>
    1d04:	a5 9f       	mul	r26, r21
    1d06:	90 0d       	add	r25, r0
    1d08:	b4 9f       	mul	r27, r20
    1d0a:	90 0d       	add	r25, r0
    1d0c:	a4 9f       	mul	r26, r20
    1d0e:	80 0d       	add	r24, r0
    1d10:	91 1d       	adc	r25, r1
    1d12:	11 24       	eor	r1, r1
    1d14:	08 95       	ret

00001d16 <_exit>:
    1d16:	f8 94       	cli

00001d18 <__stop_program>:
    1d18:	ff cf       	rjmp	.-2      	; 0x1d18 <__stop_program>
